
Embarcado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800b020  0800b020  0000c020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b550  0800b550  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b550  0800b550  0000c550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b558  0800b558  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b558  0800b558  0000c558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b55c  0800b55c  0000c55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b560  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004758  200001e8  0800b748  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004940  0800b748  0000d940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f108  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f4f  00000000  00000000  0002c320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00030270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015d9  00000000  00000000  00031e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c14f  00000000  00000000  00033451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020266  00000000  00000000  0005f5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001136e9  00000000  00000000  0007f806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00192eef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000878c  00000000  00000000  00192f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0019b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b008 	.word	0x0800b008

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800b008 	.word	0x0800b008

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <vApplicationGetIdleTaskMemory+0x30>)
 8000eee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2280      	movs	r2, #128	@ 0x80
 8000ef4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000204 	.word	0x20000204
 8000f08:	200002a4 	.word	0x200002a4

08000f0c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000f16:	4a38      	ldr	r2, [pc, #224]	@ (8000ff8 <HD44780_Init+0xec>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000f1c:	4b37      	ldr	r3, [pc, #220]	@ (8000ffc <HD44780_Init+0xf0>)
 8000f1e:	2208      	movs	r2, #8
 8000f20:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f22:	4b37      	ldr	r3, [pc, #220]	@ (8001000 <HD44780_Init+0xf4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000f28:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <HD44780_Init+0xec>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d907      	bls.n	8000f40 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000f30:	4b33      	ldr	r3, [pc, #204]	@ (8001000 <HD44780_Init+0xf4>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b31      	ldr	r3, [pc, #196]	@ (8001000 <HD44780_Init+0xf4>)
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	e006      	b.n	8000f4e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000f40:	4b2f      	ldr	r3, [pc, #188]	@ (8001000 <HD44780_Init+0xf4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <HD44780_Init+0xf4>)
 8000f4c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000f4e:	f000 f98d 	bl	800126c <DelayInit>
  HAL_Delay(50);
 8000f52:	2032      	movs	r0, #50	@ 0x32
 8000f54:	f001 f956 	bl	8002204 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000f58:	4b28      	ldr	r3, [pc, #160]	@ (8000ffc <HD44780_Init+0xf0>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 f94b 	bl	80011f8 <ExpanderWrite>
  HAL_Delay(1000);
 8000f62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f66:	f001 f94d 	bl	8002204 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000f6a:	2030      	movs	r0, #48	@ 0x30
 8000f6c:	f000 f932 	bl	80011d4 <Write4Bits>
  DelayUS(4500);
 8000f70:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000f74:	f000 f9a4 	bl	80012c0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000f78:	2030      	movs	r0, #48	@ 0x30
 8000f7a:	f000 f92b 	bl	80011d4 <Write4Bits>
  DelayUS(4500);
 8000f7e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000f82:	f000 f99d 	bl	80012c0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000f86:	2030      	movs	r0, #48	@ 0x30
 8000f88:	f000 f924 	bl	80011d4 <Write4Bits>
  DelayUS(4500);
 8000f8c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000f90:	f000 f996 	bl	80012c0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000f94:	2020      	movs	r0, #32
 8000f96:	f000 f91d 	bl	80011d4 <Write4Bits>
  DelayUS(100);
 8000f9a:	2064      	movs	r0, #100	@ 0x64
 8000f9c:	f000 f990 	bl	80012c0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000fa0:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <HD44780_Init+0xf4>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f043 0320 	orr.w	r3, r3, #32
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f8d5 	bl	800115a <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <HD44780_Init+0xf8>)
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000fb6:	f000 f875 	bl	80010a4 <HD44780_Display>
  HD44780_Clear();
 8000fba:	f000 f82b 	bl	8001014 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HD44780_Init+0xfc>)
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000fc4:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <HD44780_Init+0xfc>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f8c3 	bl	800115a <SendCommand>
  DelayUS(4500);
 8000fd4:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000fd8:	f000 f972 	bl	80012c0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000fdc:	490b      	ldr	r1, [pc, #44]	@ (800100c <HD44780_Init+0x100>)
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f87d 	bl	80010de <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000fe4:	490a      	ldr	r1, [pc, #40]	@ (8001010 <HD44780_Init+0x104>)
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f000 f879 	bl	80010de <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000fec:	f000 f81d 	bl	800102a <HD44780_Home>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200004a7 	.word	0x200004a7
 8000ffc:	200004a8 	.word	0x200004a8
 8001000:	200004a4 	.word	0x200004a4
 8001004:	200004a5 	.word	0x200004a5
 8001008:	200004a6 	.word	0x200004a6
 800100c:	20000000 	.word	0x20000000
 8001010:	20000008 	.word	0x20000008

08001014 <HD44780_Clear>:

void HD44780_Clear()
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001018:	2001      	movs	r0, #1
 800101a:	f000 f89e 	bl	800115a <SendCommand>
  DelayUS(2000);
 800101e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001022:	f000 f94d 	bl	80012c0 <DelayUS>
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}

0800102a <HD44780_Home>:

void HD44780_Home()
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800102e:	2002      	movs	r0, #2
 8001030:	f000 f893 	bl	800115a <SendCommand>
  DelayUS(2000);
 8001034:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001038:	f000 f942 	bl	80012c0 <DelayUS>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	460a      	mov	r2, r1
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HD44780_SetCursor+0x5c>)
 8001052:	f107 0408 	add.w	r4, r7, #8
 8001056:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800105c:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <HD44780_SetCursor+0x60>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	79ba      	ldrb	r2, [r7, #6]
 8001062:	429a      	cmp	r2, r3
 8001064:	d303      	bcc.n	800106e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <HD44780_SetCursor+0x60>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	3b01      	subs	r3, #1
 800106c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	3318      	adds	r3, #24
 8001074:	443b      	add	r3, r7
 8001076:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4413      	add	r3, r2
 8001080:	b2db      	uxtb	r3, r3
 8001082:	b25b      	sxtb	r3, r3
 8001084:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001088:	b25b      	sxtb	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f864 	bl	800115a <SendCommand>
}
 8001092:	bf00      	nop
 8001094:	371c      	adds	r7, #28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd90      	pop	{r4, r7, pc}
 800109a:	bf00      	nop
 800109c:	0800b020 	.word	0x0800b020
 80010a0:	200004a7 	.word	0x200004a7

080010a4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80010a8:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <HD44780_Display+0x28>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HD44780_Display+0x28>)
 80010b4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80010b6:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <HD44780_Display+0x28>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f84a 	bl	800115a <SendCommand>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200004a5 	.word	0x200004a5

080010d0 <HD44780_ScrollDisplayLeft>:
  dpControl |= LCD_BLINKON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_ScrollDisplayLeft(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80010d4:	2018      	movs	r0, #24
 80010d6:	f000 f840 	bl	800115a <SendCommand>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}

080010de <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	6039      	str	r1, [r7, #0]
 80010e8:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f82a 	bl	800115a <SendCommand>
  for (int i=0; i<8; i++)
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	e009      	b.n	8001120 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f82e 	bl	8001176 <SendChar>
  for (int i=0; i<8; i++)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3301      	adds	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b07      	cmp	r3, #7
 8001124:	ddf2      	ble.n	800110c <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001138:	e006      	b.n	8001148 <HD44780_PrintStr+0x18>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f817 	bl	8001176 <SendChar>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f4      	bne.n	800113a <HD44780_PrintStr+0xa>
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f812 	bl	8001192 <Send>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f804 	bl	8001192 <Send>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	460a      	mov	r2, r1
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	4613      	mov	r3, r2
 80011a0:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f023 030f 	bic.w	r3, r3, #15
 80011a8:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f80b 	bl	80011d4 <Write4Bits>
  Write4Bits((lownib)|mode);
 80011be:	7bba      	ldrb	r2, [r7, #14]
 80011c0:	79bb      	ldrb	r3, [r7, #6]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f804 	bl	80011d4 <Write4Bits>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f809 	bl	80011f8 <ExpanderWrite>
  PulseEnable(value);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f821 	bl	8001230 <PulseEnable>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <ExpanderWrite+0x30>)
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4313      	orrs	r3, r2
 800120a:	b2db      	uxtb	r3, r3
 800120c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800120e:	f107 020f 	add.w	r2, r7, #15
 8001212:	230a      	movs	r3, #10
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	214e      	movs	r1, #78	@ 0x4e
 800121a:	4804      	ldr	r0, [pc, #16]	@ (800122c <ExpanderWrite+0x34>)
 800121c:	f002 fdaa 	bl	8003d74 <HAL_I2C_Master_Transmit>
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200004a8 	.word	0x200004a8
 800122c:	20000510 	.word	0x20000510

08001230 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ffd8 	bl	80011f8 <ExpanderWrite>
  DelayUS(20);
 8001248:	2014      	movs	r0, #20
 800124a:	f000 f839 	bl	80012c0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f023 0304 	bic.w	r3, r3, #4
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ffce 	bl	80011f8 <ExpanderWrite>
  DelayUS(20);
 800125c:	2014      	movs	r0, #20
 800125e:	f000 f82f 	bl	80012c0 <DelayUS>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <DelayInit>:

static void DelayInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001270:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <DelayInit+0x4c>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4a10      	ldr	r2, [pc, #64]	@ (80012b8 <DelayInit+0x4c>)
 8001276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800127a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <DelayInit+0x4c>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4a0d      	ldr	r2, [pc, #52]	@ (80012b8 <DelayInit+0x4c>)
 8001282:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001286:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <DelayInit+0x50>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0b      	ldr	r2, [pc, #44]	@ (80012bc <DelayInit+0x50>)
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <DelayInit+0x50>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <DelayInit+0x50>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <DelayInit+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80012a6:	bf00      	nop
  __ASM volatile ("NOP");
 80012a8:	bf00      	nop
  __ASM volatile ("NOP");
 80012aa:	bf00      	nop
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000edf0 	.word	0xe000edf0
 80012bc:	e0001000 	.word	0xe0001000

080012c0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <DelayUS+0x44>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <DelayUS+0x48>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	0c9a      	lsrs	r2, r3, #18
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	fb02 f303 	mul.w	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <DelayUS+0x4c>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <DelayUS+0x4c>)
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f6      	bhi.n	80012e2 <DelayUS+0x22>
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	371c      	adds	r7, #28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000010 	.word	0x20000010
 8001308:	431bde83 	.word	0x431bde83
 800130c:	e0001000 	.word	0xe0001000

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f000 ff35 	bl	8002184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f883 	bl	8001424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f000 fa05 	bl	800172c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001322:	f000 f9d3 	bl	80016cc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001326:	f000 f8cd 	bl	80014c4 <MX_ADC1_Init>
  MX_TIM2_Init();
 800132a:	f000 f981 	bl	8001630 <MX_TIM2_Init>
  MX_I2C1_Init();
 800132e:	f000 f93f 	bl	80015b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001332:	482d      	ldr	r0, [pc, #180]	@ (80013e8 <main+0xd8>)
 8001334:	f004 fc92 	bl	8005c5c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800133e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001342:	f002 fc49 	bl	8003bd8 <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001346:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <main+0xdc>)
 8001348:	1d3c      	adds	r4, r7, #4
 800134a:	461d      	mov	r5, r3
 800134c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001350:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001354:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f005 fefd 	bl	800715c <osThreadCreate>
 8001362:	4603      	mov	r3, r0
 8001364:	4a22      	ldr	r2, [pc, #136]	@ (80013f0 <main+0xe0>)
 8001366:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  xTaskCreate(button_led_red, "read_button_blink_lead_red",configMINIMAL_STACK_SIZE,NULL,tskIDLE_PRIORITY,NULL);
 8001368:	2300      	movs	r3, #0
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	2300      	movs	r3, #0
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	2280      	movs	r2, #128	@ 0x80
 8001374:	491f      	ldr	r1, [pc, #124]	@ (80013f4 <main+0xe4>)
 8001376:	4820      	ldr	r0, [pc, #128]	@ (80013f8 <main+0xe8>)
 8001378:	f006 f864 	bl	8007444 <xTaskCreate>
  xTaskCreate(button_led_green, "read_button_blink_lead_green",configMINIMAL_STACK_SIZE,NULL,tskIDLE_PRIORITY,NULL);
 800137c:	2300      	movs	r3, #0
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2300      	movs	r3, #0
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	491c      	ldr	r1, [pc, #112]	@ (80013fc <main+0xec>)
 800138a:	481d      	ldr	r0, [pc, #116]	@ (8001400 <main+0xf0>)
 800138c:	f006 f85a 	bl	8007444 <xTaskCreate>
  xTaskCreate(button_led_yell, "read_button_blink_lead_yell",configMINIMAL_STACK_SIZE,NULL,tskIDLE_PRIORITY,NULL);
 8001390:	2300      	movs	r3, #0
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	2300      	movs	r3, #0
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2300      	movs	r3, #0
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	4919      	ldr	r1, [pc, #100]	@ (8001404 <main+0xf4>)
 800139e:	481a      	ldr	r0, [pc, #104]	@ (8001408 <main+0xf8>)
 80013a0:	f006 f850 	bl	8007444 <xTaskCreate>
  xTaskCreate(readVoltage, "read_voltage_potenciometro",configMINIMAL_STACK_SIZE,NULL,tskIDLE_PRIORITY,NULL);
 80013a4:	2300      	movs	r3, #0
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	2300      	movs	r3, #0
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2300      	movs	r3, #0
 80013ae:	2280      	movs	r2, #128	@ 0x80
 80013b0:	4916      	ldr	r1, [pc, #88]	@ (800140c <main+0xfc>)
 80013b2:	4817      	ldr	r0, [pc, #92]	@ (8001410 <main+0x100>)
 80013b4:	f006 f846 	bl	8007444 <xTaskCreate>
  xTaskCreate(read_distance, "read_distance",configMINIMAL_STACK_SIZE,NULL,tskIDLE_PRIORITY,NULL);
 80013b8:	2300      	movs	r3, #0
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	2300      	movs	r3, #0
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2300      	movs	r3, #0
 80013c2:	2280      	movs	r2, #128	@ 0x80
 80013c4:	4913      	ldr	r1, [pc, #76]	@ (8001414 <main+0x104>)
 80013c6:	4814      	ldr	r0, [pc, #80]	@ (8001418 <main+0x108>)
 80013c8:	f006 f83c 	bl	8007444 <xTaskCreate>
  xTaskCreate(LCD_Task, "LCD Display Task", 128, NULL, 1, NULL);
 80013cc:	2300      	movs	r3, #0
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	2280      	movs	r2, #128	@ 0x80
 80013d8:	4910      	ldr	r1, [pc, #64]	@ (800141c <main+0x10c>)
 80013da:	4811      	ldr	r0, [pc, #68]	@ (8001420 <main+0x110>)
 80013dc:	f006 f832 	bl	8007444 <xTaskCreate>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013e0:	f005 feb5 	bl	800714e <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <main+0xd4>
 80013e8:	20000564 	.word	0x20000564
 80013ec:	0800b0d4 	.word	0x0800b0d4
 80013f0:	20000638 	.word	0x20000638
 80013f4:	0800b030 	.word	0x0800b030
 80013f8:	08001885 	.word	0x08001885
 80013fc:	0800b04c 	.word	0x0800b04c
 8001400:	080018b9 	.word	0x080018b9
 8001404:	0800b06c 	.word	0x0800b06c
 8001408:	080018ed 	.word	0x080018ed
 800140c:	0800b088 	.word	0x0800b088
 8001410:	08001925 	.word	0x08001925
 8001414:	0800b0a4 	.word	0x0800b0a4
 8001418:	08001969 	.word	0x08001969
 800141c:	0800b0b4 	.word	0x0800b0b4
 8001420:	08001ab1 	.word	0x08001ab1

08001424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b096      	sub	sp, #88	@ 0x58
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2244      	movs	r2, #68	@ 0x44
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f007 fe6d 	bl	8009112 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001446:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800144a:	f003 f86b 	bl	8004524 <HAL_PWREx_ControlVoltageScaling>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001454:	f000 fbae 	bl	8001bb4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800145c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001460:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001462:	2302      	movs	r3, #2
 8001464:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001466:	2303      	movs	r3, #3
 8001468:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800146a:	2301      	movs	r3, #1
 800146c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 18;
 800146e:	2312      	movs	r3, #18
 8001470:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001472:	2307      	movs	r3, #7
 8001474:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001476:	2302      	movs	r3, #2
 8001478:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800147a:	2302      	movs	r3, #2
 800147c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4618      	mov	r0, r3
 8001484:	f003 f8a4 	bl	80045d0 <HAL_RCC_OscConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800148e:	f000 fb91 	bl	8001bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	230f      	movs	r3, #15
 8001494:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	2303      	movs	r3, #3
 8001498:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014a8:	463b      	mov	r3, r7
 80014aa:	2104      	movs	r1, #4
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 fc6b 	bl	8004d88 <HAL_RCC_ClockConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014b8:	f000 fb7c 	bl	8001bb4 <Error_Handler>
  }
}
 80014bc:	bf00      	nop
 80014be:	3758      	adds	r7, #88	@ 0x58
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
 80014e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 80014e8:	4a2f      	ldr	r2, [pc, #188]	@ (80015a8 <MX_ADC1_Init+0xe4>)
 80014ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014f2:	4b2c      	ldr	r3, [pc, #176]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f8:	4b2a      	ldr	r3, [pc, #168]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014fe:	4b29      	ldr	r3, [pc, #164]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001504:	4b27      	ldr	r3, [pc, #156]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 8001506:	2204      	movs	r2, #4
 8001508:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 800150c:	2200      	movs	r2, #0
 800150e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001510:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 8001512:	2200      	movs	r2, #0
 8001514:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001516:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 8001518:	2201      	movs	r2, #1
 800151a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800151c:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001524:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 8001526:	2200      	movs	r2, #0
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152a:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 800152c:	2200      	movs	r2, #0
 800152e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001530:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 800153a:	2200      	movs	r2, #0
 800153c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800153e:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001546:	4817      	ldr	r0, [pc, #92]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 8001548:	f001 f864 	bl	8002614 <HAL_ADC_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001552:	f000 fb2f 	bl	8001bb4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	4810      	ldr	r0, [pc, #64]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 8001562:	f001 ffe5 	bl	8003530 <HAL_ADCEx_MultiModeConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800156c:	f000 fb22 	bl	8001bb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_ADC1_Init+0xe8>)
 8001572:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001574:	2306      	movs	r3, #6
 8001576:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800157c:	237f      	movs	r3, #127	@ 0x7f
 800157e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001580:	2304      	movs	r3, #4
 8001582:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <MX_ADC1_Init+0xe0>)
 800158e:	f001 fb31 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001598:	f000 fb0c 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	@ 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200004ac 	.word	0x200004ac
 80015a8:	50040000 	.word	0x50040000
 80015ac:	14f00020 	.word	0x14f00020

080015b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <MX_I2C1_Init+0x78>)
 80015b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C08CCB;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015bc:	4a1b      	ldr	r2, [pc, #108]	@ (800162c <MX_I2C1_Init+0x7c>)
 80015be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015c0:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c6:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015cc:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015d2:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ea:	480e      	ldr	r0, [pc, #56]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015ec:	f002 fb26 	bl	8003c3c <HAL_I2C_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015f6:	f000 fadd 	bl	8001bb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015fa:	2100      	movs	r1, #0
 80015fc:	4809      	ldr	r0, [pc, #36]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015fe:	f002 feeb 	bl	80043d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001608:	f000 fad4 	bl	8001bb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800160c:	2100      	movs	r1, #0
 800160e:	4805      	ldr	r0, [pc, #20]	@ (8001624 <MX_I2C1_Init+0x74>)
 8001610:	f002 ff2d 	bl	800446e <HAL_I2CEx_ConfigDigitalFilter>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800161a:	f000 facb 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000510 	.word	0x20000510
 8001628:	40005400 	.word	0x40005400
 800162c:	00c08ccb 	.word	0x00c08ccb

08001630 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <MX_TIM2_Init+0x98>)
 8001650:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001654:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001656:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <MX_TIM2_Init+0x98>)
 8001658:	2247      	movs	r2, #71	@ 0x47
 800165a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <MX_TIM2_Init+0x98>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001662:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <MX_TIM2_Init+0x98>)
 8001664:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001668:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <MX_TIM2_Init+0x98>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001670:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <MX_TIM2_Init+0x98>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001676:	4814      	ldr	r0, [pc, #80]	@ (80016c8 <MX_TIM2_Init+0x98>)
 8001678:	f004 fa98 	bl	8005bac <HAL_TIM_Base_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001682:	f000 fa97 	bl	8001bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4619      	mov	r1, r3
 8001692:	480d      	ldr	r0, [pc, #52]	@ (80016c8 <MX_TIM2_Init+0x98>)
 8001694:	f004 fcc1 	bl	800601a <HAL_TIM_ConfigClockSource>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800169e:	f000 fa89 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	@ (80016c8 <MX_TIM2_Init+0x98>)
 80016b0:	f004 fee4 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016ba:	f000 fa7b 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000564 	.word	0x20000564

080016cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <MX_USART2_UART_Init+0x58>)
 80016d2:	4a15      	ldr	r2, [pc, #84]	@ (8001728 <MX_USART2_UART_Init+0x5c>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <MX_USART2_UART_Init+0x58>)
 80016d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <MX_USART2_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <MX_USART2_UART_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <MX_USART2_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <MX_USART2_UART_Init+0x58>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <MX_USART2_UART_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <MX_USART2_UART_Init+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001702:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <MX_USART2_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <MX_USART2_UART_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	@ (8001724 <MX_USART2_UART_Init+0x58>)
 8001710:	f004 ff5a 	bl	80065c8 <HAL_UART_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800171a:	f000 fa4b 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200005b0 	.word	0x200005b0
 8001728:	40004400 	.word	0x40004400

0800172c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	4b4d      	ldr	r3, [pc, #308]	@ (8001878 <MX_GPIO_Init+0x14c>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	4a4c      	ldr	r2, [pc, #304]	@ (8001878 <MX_GPIO_Init+0x14c>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174e:	4b4a      	ldr	r3, [pc, #296]	@ (8001878 <MX_GPIO_Init+0x14c>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175a:	4b47      	ldr	r3, [pc, #284]	@ (8001878 <MX_GPIO_Init+0x14c>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	4a46      	ldr	r2, [pc, #280]	@ (8001878 <MX_GPIO_Init+0x14c>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001766:	4b44      	ldr	r3, [pc, #272]	@ (8001878 <MX_GPIO_Init+0x14c>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b41      	ldr	r3, [pc, #260]	@ (8001878 <MX_GPIO_Init+0x14c>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	4a40      	ldr	r2, [pc, #256]	@ (8001878 <MX_GPIO_Init+0x14c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177e:	4b3e      	ldr	r3, [pc, #248]	@ (8001878 <MX_GPIO_Init+0x14c>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	4b3b      	ldr	r3, [pc, #236]	@ (8001878 <MX_GPIO_Init+0x14c>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	4a3a      	ldr	r2, [pc, #232]	@ (8001878 <MX_GPIO_Init+0x14c>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001796:	4b38      	ldr	r3, [pc, #224]	@ (8001878 <MX_GPIO_Init+0x14c>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2102      	movs	r1, #2
 80017a6:	4835      	ldr	r0, [pc, #212]	@ (800187c <MX_GPIO_Init+0x150>)
 80017a8:	f002 fa16 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80017b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b6:	f002 fa0f 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2160      	movs	r1, #96	@ 0x60
 80017be:	4830      	ldr	r0, [pc, #192]	@ (8001880 <MX_GPIO_Init+0x154>)
 80017c0:	f002 fa0a 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4828      	ldr	r0, [pc, #160]	@ (800187c <MX_GPIO_Init+0x150>)
 80017dc:	f002 f83a 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017e0:	2302      	movs	r3, #2
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4821      	ldr	r0, [pc, #132]	@ (800187c <MX_GPIO_Init+0x150>)
 80017f8:	f002 f82c 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80017fc:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001818:	f002 f81c 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800181c:	23c0      	movs	r3, #192	@ 0xc0
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001824:	2302      	movs	r3, #2
 8001826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001832:	f002 f80f 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001836:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800184e:	f002 f801 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001852:	2360      	movs	r3, #96	@ 0x60
 8001854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	@ (8001880 <MX_GPIO_Init+0x154>)
 800186a:	f001 fff3 	bl	8003854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	@ 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	48000800 	.word	0x48000800
 8001880:	48000400 	.word	0x48000400

08001884 <button_led_red>:

*/


          // Funções para acender os leds
void button_led_red(void){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
   for(;;){
       if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){
 8001888:	2140      	movs	r1, #64	@ 0x40
 800188a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188e:	f002 f98b 	bl	8003ba8 <HAL_GPIO_ReadPin>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f7      	beq.n	8001888 <button_led_red+0x4>
           printf("red button press \n\r");
 8001898:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <button_led_red+0x2c>)
 800189a:	f007 fbe5 	bl	8009068 <iprintf>
           HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 800189e:	2140      	movs	r1, #64	@ 0x40
 80018a0:	4804      	ldr	r0, [pc, #16]	@ (80018b4 <button_led_red+0x30>)
 80018a2:	f002 f9b1 	bl	8003c08 <HAL_GPIO_TogglePin>
           osDelay(300);
 80018a6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80018aa:	f005 fca3 	bl	80071f4 <osDelay>
       if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){
 80018ae:	e7eb      	b.n	8001888 <button_led_red+0x4>
 80018b0:	0800b0f0 	.word	0x0800b0f0
 80018b4:	48000400 	.word	0x48000400

080018b8 <button_led_green>:
       }
   }
}

void button_led_green(void){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
   for(;;){
       if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 80018bc:	2180      	movs	r1, #128	@ 0x80
 80018be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c2:	f002 f971 	bl	8003ba8 <HAL_GPIO_ReadPin>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f7      	beq.n	80018bc <button_led_green+0x4>
           printf("green button press \n\r");
 80018cc:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <button_led_green+0x2c>)
 80018ce:	f007 fbcb 	bl	8009068 <iprintf>
           HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80018d2:	2120      	movs	r1, #32
 80018d4:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <button_led_green+0x30>)
 80018d6:	f002 f997 	bl	8003c08 <HAL_GPIO_TogglePin>
           osDelay(300);
 80018da:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80018de:	f005 fc89 	bl	80071f4 <osDelay>
       if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 80018e2:	e7eb      	b.n	80018bc <button_led_green+0x4>
 80018e4:	0800b104 	.word	0x0800b104
 80018e8:	48000400 	.word	0x48000400

080018ec <button_led_yell>:
       }
   }
}

void button_led_yell(void){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
   for(;;){
       if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 80018f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f8:	f002 f956 	bl	8003ba8 <HAL_GPIO_ReadPin>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f6      	beq.n	80018f0 <button_led_yell+0x4>
           printf("yellow button press \n\r");
 8001902:	4806      	ldr	r0, [pc, #24]	@ (800191c <button_led_yell+0x30>)
 8001904:	f007 fbb0 	bl	8009068 <iprintf>
           HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001908:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800190c:	4804      	ldr	r0, [pc, #16]	@ (8001920 <button_led_yell+0x34>)
 800190e:	f002 f97b 	bl	8003c08 <HAL_GPIO_TogglePin>
           osDelay(300);
 8001912:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001916:	f005 fc6d 	bl	80071f4 <osDelay>
       if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 800191a:	e7e9      	b.n	80018f0 <button_led_yell+0x4>
 800191c:	0800b11c 	.word	0x0800b11c
 8001920:	48000400 	.word	0x48000400

08001924 <readVoltage>:



// Potenciometro

void readVoltage(void){
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
	for(;;){
	  HAL_ADC_Start(&hadc1);
 800192a:	480c      	ldr	r0, [pc, #48]	@ (800195c <readVoltage+0x38>)
 800192c:	f000 ffc2 	bl	80028b4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	4809      	ldr	r0, [pc, #36]	@ (800195c <readVoltage+0x38>)
 8001936:	f001 f877 	bl	8002a28 <HAL_ADC_PollForConversion>
	  uint16_t valorPotenciometro = HAL_ADC_GetValue(&hadc1);
 800193a:	4808      	ldr	r0, [pc, #32]	@ (800195c <readVoltage+0x38>)
 800193c:	f001 f94c 	bl	8002bd8 <HAL_ADC_GetValue>
 8001940:	4603      	mov	r3, r0
 8001942:	80fb      	strh	r3, [r7, #6]

	  printf("%i\n\r", valorPotenciometro);
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <readVoltage+0x3c>)
 800194a:	f007 fb8d 	bl	8009068 <iprintf>
	  vTaskDelay(1000);
 800194e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001952:	f005 fec7 	bl	80076e4 <vTaskDelay>
	for(;;){
 8001956:	bf00      	nop
 8001958:	e7e7      	b.n	800192a <readVoltage+0x6>
 800195a:	bf00      	nop
 800195c:	200004ac 	.word	0x200004ac
 8001960:	0800b134 	.word	0x0800b134
 8001964:	00000000 	.word	0x00000000

08001968 <read_distance>:
  }
}

void read_distance(void){
 8001968:	b598      	push	{r3, r4, r7, lr}
 800196a:	af00      	add	r7, sp, #0

	while (1)
	  {
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800196c:	2201      	movs	r2, #1
 800196e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001972:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001976:	f002 f92f 	bl	8003bd8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 800197a:	4b45      	ldr	r3, [pc, #276]	@ (8001a90 <read_distance+0x128>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24
		while (__HAL_TIM_GET_COUNTER (&htim2) < 10);  // wait for 10 us
 8001982:	bf00      	nop
 8001984:	4b42      	ldr	r3, [pc, #264]	@ (8001a90 <read_distance+0x128>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	2b09      	cmp	r3, #9
 800198c:	d9fa      	bls.n	8001984 <read_distance+0x1c>
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001998:	f002 f91e 	bl	8003bd8 <HAL_GPIO_WritePin>

		pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 800199c:	f000 fc26 	bl	80021ec <HAL_GetTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4a3c      	ldr	r2, [pc, #240]	@ (8001a94 <read_distance+0x12c>)
 80019a4:	6013      	str	r3, [r2, #0]
		// wait for the echo pin to go high
	    while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 80019a6:	bf00      	nop
 80019a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b0:	f002 f8fa 	bl	8003ba8 <HAL_GPIO_ReadPin>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d108      	bne.n	80019cc <read_distance+0x64>
 80019ba:	4b36      	ldr	r3, [pc, #216]	@ (8001a94 <read_distance+0x12c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f103 040a 	add.w	r4, r3, #10
 80019c2:	f000 fc13 	bl	80021ec <HAL_GetTick>
 80019c6:	4603      	mov	r3, r0
 80019c8:	429c      	cmp	r4, r3
 80019ca:	d8ed      	bhi.n	80019a8 <read_distance+0x40>
	    Value1 = __HAL_TIM_GET_COUNTER (&htim2);
 80019cc:	4b30      	ldr	r3, [pc, #192]	@ (8001a90 <read_distance+0x128>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	4a31      	ldr	r2, [pc, #196]	@ (8001a98 <read_distance+0x130>)
 80019d4:	6013      	str	r3, [r2, #0]

	    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80019d6:	f000 fc09 	bl	80021ec <HAL_GetTick>
 80019da:	4603      	mov	r3, r0
 80019dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001a94 <read_distance+0x12c>)
 80019de:	6013      	str	r3, [r2, #0]
	    // wait for the echo pin to go low
	    while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 > HAL_GetTick());
 80019e0:	bf00      	nop
 80019e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ea:	f002 f8dd 	bl	8003ba8 <HAL_GPIO_ReadPin>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <read_distance+0x9e>
 80019f4:	4b27      	ldr	r3, [pc, #156]	@ (8001a94 <read_distance+0x12c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f103 040a 	add.w	r4, r3, #10
 80019fc:	f000 fbf6 	bl	80021ec <HAL_GetTick>
 8001a00:	4603      	mov	r3, r0
 8001a02:	429c      	cmp	r4, r3
 8001a04:	d8ed      	bhi.n	80019e2 <read_distance+0x7a>
	    Value2 = __HAL_TIM_GET_COUNTER (&htim2);
 8001a06:	4b22      	ldr	r3, [pc, #136]	@ (8001a90 <read_distance+0x128>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0c:	4a23      	ldr	r2, [pc, #140]	@ (8001a9c <read_distance+0x134>)
 8001a0e:	6013      	str	r3, [r2, #0]

	    printf("value 1 = %d\n\r", (Value1));
 8001a10:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <read_distance+0x130>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	4822      	ldr	r0, [pc, #136]	@ (8001aa0 <read_distance+0x138>)
 8001a18:	f007 fb26 	bl	8009068 <iprintf>
	    printf("value 2 = %d\n\r", (Value2));
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a9c <read_distance+0x134>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	4820      	ldr	r0, [pc, #128]	@ (8001aa4 <read_distance+0x13c>)
 8001a24:	f007 fb20 	bl	8009068 <iprintf>

	    Distance = (((Value2-Value1)* 0.0343) / 2);
 8001a28:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <read_distance+0x134>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <read_distance+0x130>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd66 	bl	8000504 <__aeabi_ui2d>
 8001a38:	a313      	add	r3, pc, #76	@ (adr r3, 8001a88 <read_distance+0x120>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fddb 	bl	80005f8 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a52:	f7fe fefb 	bl	800084c <__aeabi_ddiv>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff f8a3 	bl	8000ba8 <__aeabi_d2uiz>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a10      	ldr	r2, [pc, #64]	@ (8001aa8 <read_distance+0x140>)
 8001a66:	6013      	str	r3, [r2, #0]

	    printf("Distance = %d\n\r", (Value2-Value1));
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <read_distance+0x134>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <read_distance+0x130>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	4619      	mov	r1, r3
 8001a74:	480d      	ldr	r0, [pc, #52]	@ (8001aac <read_distance+0x144>)
 8001a76:	f007 faf7 	bl	8009068 <iprintf>
	    osDelay(1000);
 8001a7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a7e:	f005 fbb9 	bl	80071f4 <osDelay>
	  {
 8001a82:	e773      	b.n	800196c <read_distance+0x4>
 8001a84:	f3af 8000 	nop.w
 8001a88:	04816f00 	.word	0x04816f00
 8001a8c:	3fa18fc5 	.word	0x3fa18fc5
 8001a90:	20000564 	.word	0x20000564
 8001a94:	2000063c 	.word	0x2000063c
 8001a98:	20000640 	.word	0x20000640
 8001a9c:	20000644 	.word	0x20000644
 8001aa0:	0800b13c 	.word	0x0800b13c
 8001aa4:	0800b14c 	.word	0x0800b14c
 8001aa8:	20000648 	.word	0x20000648
 8001aac:	0800b15c 	.word	0x0800b15c

08001ab0 <LCD_Task>:
	    /* USER CODE BEGIN 3 */
	  }

}

void LCD_Task(void *pvParameters) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
    HD44780_Init(2);         // Inicializa o LCD
 8001ab8:	2002      	movs	r0, #2
 8001aba:	f7ff fa27 	bl	8000f0c <HD44780_Init>
    HD44780_Clear();
 8001abe:	f7ff faa9 	bl	8001014 <HD44780_Clear>

    while (1) {
        // Exemplo: Exibe "HELLO" e "WORLD" e limpa o display
        HD44780_SetCursor(0, 0);
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fabb 	bl	8001040 <HD44780_SetCursor>
        HD44780_PrintStr("HELLO");
 8001aca:	4815      	ldr	r0, [pc, #84]	@ (8001b20 <LCD_Task+0x70>)
 8001acc:	f7ff fb30 	bl	8001130 <HD44780_PrintStr>
        HD44780_SetCursor(10, 1);
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	200a      	movs	r0, #10
 8001ad4:	f7ff fab4 	bl	8001040 <HD44780_SetCursor>
        HD44780_PrintStr("WORLD");
 8001ad8:	4812      	ldr	r0, [pc, #72]	@ (8001b24 <LCD_Task+0x74>)
 8001ada:	f7ff fb29 	bl	8001130 <HD44780_PrintStr>

        osDelay(2000);      // Delay para visualização
 8001ade:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ae2:	f005 fb87 	bl	80071f4 <osDelay>

        HD44780_Clear();      // Limpa o display
 8001ae6:	f7ff fa95 	bl	8001014 <HD44780_Clear>
        HD44780_SetCursor(0, 0);
 8001aea:	2100      	movs	r1, #0
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff faa7 	bl	8001040 <HD44780_SetCursor>
        HD44780_PrintStr("Learning STM32");
 8001af2:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <LCD_Task+0x78>)
 8001af4:	f7ff fb1c 	bl	8001130 <HD44780_PrintStr>

        // Move o texto para a esquerda
        for (int x = 0; x < 40; x++) {
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e008      	b.n	8001b10 <LCD_Task+0x60>
            HD44780_ScrollDisplayLeft();
 8001afe:	f7ff fae7 	bl	80010d0 <HD44780_ScrollDisplayLeft>
            osDelay(500);
 8001b02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b06:	f005 fb75 	bl	80071f4 <osDelay>
        for (int x = 0; x < 40; x++) {
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b27      	cmp	r3, #39	@ 0x27
 8001b14:	ddf3      	ble.n	8001afe <LCD_Task+0x4e>
        }

        osDelay(2000);      // Delay entre atualizações
 8001b16:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b1a:	f005 fb6b 	bl	80071f4 <osDelay>
        HD44780_SetCursor(0, 0);
 8001b1e:	e7d0      	b.n	8001ac2 <LCD_Task+0x12>
 8001b20:	0800b16c 	.word	0x0800b16c
 8001b24:	0800b174 	.word	0x0800b174
 8001b28:	0800b17c 	.word	0x0800b17c

08001b2c <_write>:
    }
}


int _write(int file, uint8_t *ptr, int len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
switch (file)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d003      	beq.n	8001b46 <_write+0x1a>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d009      	beq.n	8001b58 <_write+0x2c>
 8001b44:	e011      	b.n	8001b6a <_write+0x3e>
{
case STDOUT_FILENO:
HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	480a      	ldr	r0, [pc, #40]	@ (8001b7c <_write+0x50>)
 8001b52:	f004 fd87 	bl	8006664 <HAL_UART_Transmit>
break;
 8001b56:	e00b      	b.n	8001b70 <_write+0x44>

case STDERR_FILENO:
HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	4806      	ldr	r0, [pc, #24]	@ (8001b7c <_write+0x50>)
 8001b64:	f004 fd7e 	bl	8006664 <HAL_UART_Transmit>
break;
 8001b68:	e002      	b.n	8001b70 <_write+0x44>

default:
return -1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e000      	b.n	8001b72 <_write+0x46>
}

return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200005b0 	.word	0x200005b0

08001b80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f005 fb33 	bl	80071f4 <osDelay>
 8001b8e:	e7fb      	b.n	8001b88 <StartDefaultTask+0x8>

08001b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a04      	ldr	r2, [pc, #16]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ba2:	f000 fb0f 	bl	80021c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40012c00 	.word	0x40012c00

08001bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb8:	b672      	cpsid	i
}
 8001bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <Error_Handler+0x8>

08001bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <HAL_MspInit+0x4c>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bca:	4a10      	ldr	r2, [pc, #64]	@ (8001c0c <HAL_MspInit+0x4c>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <HAL_MspInit+0x4c>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <HAL_MspInit+0x4c>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <HAL_MspInit+0x4c>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <HAL_MspInit+0x4c>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	210f      	movs	r1, #15
 8001bfa:	f06f 0001 	mvn.w	r0, #1
 8001bfe:	f001 fdff 	bl	8003800 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000

08001c10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0ac      	sub	sp, #176	@ 0xb0
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2288      	movs	r2, #136	@ 0x88
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f007 fa6e 	bl	8009112 <memset>
  if(hadc->Instance==ADC1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a27      	ldr	r2, [pc, #156]	@ (8001cd8 <HAL_ADC_MspInit+0xc8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d147      	bne.n	8001cd0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c44:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c46:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001c4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001c56:	2308      	movs	r3, #8
 8001c58:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c62:	2302      	movs	r3, #2
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c6a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fadf 	bl	8005234 <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001c7c:	f7ff ff9a 	bl	8001bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c80:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c84:	4a15      	ldr	r2, [pc, #84]	@ (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001c86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8c:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cb6:	230b      	movs	r3, #11
 8001cb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ccc:	f001 fdc2 	bl	8003854 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001cd0:	bf00      	nop
 8001cd2:	37b0      	adds	r7, #176	@ 0xb0
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	50040000 	.word	0x50040000
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0ac      	sub	sp, #176	@ 0xb0
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2288      	movs	r2, #136	@ 0x88
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f007 fa06 	bl	8009112 <memset>
  if(hi2c->Instance==I2C1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a21      	ldr	r2, [pc, #132]	@ (8001d90 <HAL_I2C_MspInit+0xb0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d13b      	bne.n	8001d88 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d10:	2340      	movs	r3, #64	@ 0x40
 8001d12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fa89 	bl	8005234 <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d28:	f7ff ff44 	bl	8001bb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d30:	4a18      	ldr	r2, [pc, #96]	@ (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d38:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4c:	2312      	movs	r3, #18
 8001d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480b      	ldr	r0, [pc, #44]	@ (8001d98 <HAL_I2C_MspInit+0xb8>)
 8001d6c:	f001 fd72 	bl	8003854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	4a07      	ldr	r2, [pc, #28]	@ (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d88:	bf00      	nop
 8001d8a:	37b0      	adds	r7, #176	@ 0xb0
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40005400 	.word	0x40005400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000400 	.word	0x48000400

08001d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dac:	d10b      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x38>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	4a08      	ldr	r2, [pc, #32]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x38>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x38>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0ac      	sub	sp, #176	@ 0xb0
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2288      	movs	r2, #136	@ 0x88
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f007 f98a 	bl	8009112 <memset>
  if(huart->Instance==USART2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <HAL_UART_MspInit+0xb0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d13b      	bne.n	8001e80 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 fa0d 	bl	8005234 <HAL_RCCEx_PeriphCLKConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e20:	f7ff fec8 	bl	8001bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e24:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e28:	4a18      	ldr	r2, [pc, #96]	@ (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e30:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e40:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e48:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e54:	230c      	movs	r3, #12
 8001e56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e7c:	f001 fcea 	bl	8003854 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e80:	bf00      	nop
 8001e82:	37b0      	adds	r7, #176	@ 0xb0
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40004400 	.word	0x40004400
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	@ 0x30
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f58 <HAL_InitTick+0xc8>)
 8001ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8001f58 <HAL_InitTick+0xc8>)
 8001ea4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ea8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8001f58 <HAL_InitTick+0xc8>)
 8001eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb6:	f107 020c 	add.w	r2, r7, #12
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 f925 	bl	8005110 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ec6:	f003 f90d 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8001eca:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ece:	4a23      	ldr	r2, [pc, #140]	@ (8001f5c <HAL_InitTick+0xcc>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	0c9b      	lsrs	r3, r3, #18
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001eda:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <HAL_InitTick+0xd0>)
 8001edc:	4a21      	ldr	r2, [pc, #132]	@ (8001f64 <HAL_InitTick+0xd4>)
 8001ede:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <HAL_InitTick+0xd0>)
 8001ee2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ee6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f60 <HAL_InitTick+0xd0>)
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	@ (8001f60 <HAL_InitTick+0xd0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <HAL_InitTick+0xd0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efa:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <HAL_InitTick+0xd0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f00:	4817      	ldr	r0, [pc, #92]	@ (8001f60 <HAL_InitTick+0xd0>)
 8001f02:	f003 fe53 	bl	8005bac <HAL_TIM_Base_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d11b      	bne.n	8001f4c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f14:	4812      	ldr	r0, [pc, #72]	@ (8001f60 <HAL_InitTick+0xd0>)
 8001f16:	f003 ff09 	bl	8005d2c <HAL_TIM_Base_Start_IT>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d111      	bne.n	8001f4c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f28:	2019      	movs	r0, #25
 8001f2a:	f001 fc85 	bl	8003838 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d808      	bhi.n	8001f46 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	2019      	movs	r0, #25
 8001f3a:	f001 fc61 	bl	8003800 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <HAL_InitTick+0xd8>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e002      	b.n	8001f4c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3730      	adds	r7, #48	@ 0x30
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	431bde83 	.word	0x431bde83
 8001f60:	2000064c 	.word	0x2000064c
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	20000014 	.word	0x20000014

08001f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <NMI_Handler+0x4>

08001f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <HardFault_Handler+0x4>

08001f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <MemManage_Handler+0x4>

08001f84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <BusFault_Handler+0x4>

08001f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <UsageFault_Handler+0x4>

08001f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa8:	4802      	ldr	r0, [pc, #8]	@ (8001fb4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001faa:	f003 ff2f 	bl	8005e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000064c 	.word	0x2000064c

08001fb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return 1;
 8001fbc:	2301      	movs	r3, #1
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_kill>:

int _kill(int pid, int sig)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fd2:	f007 f947 	bl	8009264 <__errno>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2216      	movs	r2, #22
 8001fda:	601a      	str	r2, [r3, #0]
  return -1;
 8001fdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <_exit>:

void _exit (int status)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ffe7 	bl	8001fc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ffa:	bf00      	nop
 8001ffc:	e7fd      	b.n	8001ffa <_exit+0x12>

08001ffe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e00a      	b.n	8002026 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002010:	f3af 8000 	nop.w
 8002014:	4601      	mov	r1, r0
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	60ba      	str	r2, [r7, #8]
 800201c:	b2ca      	uxtb	r2, r1
 800201e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	dbf0      	blt.n	8002010 <_read+0x12>
  }

  return len;
 800202e:	687b      	ldr	r3, [r7, #4]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002060:	605a      	str	r2, [r3, #4]
  return 0;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_isatty>:

int _isatty(int file)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002078:	2301      	movs	r3, #1
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002086:	b480      	push	{r7}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a8:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <_sbrk+0x5c>)
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <_sbrk+0x60>)
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020bc:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <_sbrk+0x64>)
 80020be:	4a12      	ldr	r2, [pc, #72]	@ (8002108 <_sbrk+0x68>)
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c2:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d207      	bcs.n	80020e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d0:	f007 f8c8 	bl	8009264 <__errno>
 80020d4:	4603      	mov	r3, r0
 80020d6:	220c      	movs	r2, #12
 80020d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	e009      	b.n	80020f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e0:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e6:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a05      	ldr	r2, [pc, #20]	@ (8002104 <_sbrk+0x64>)
 80020f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20018000 	.word	0x20018000
 8002100:	00000400 	.word	0x00000400
 8002104:	20000698 	.word	0x20000698
 8002108:	20004940 	.word	0x20004940

0800210c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <SystemInit+0x20>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002116:	4a05      	ldr	r2, [pc, #20]	@ (800212c <SystemInit+0x20>)
 8002118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800211c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <Reset_Handler>:
 8002130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002168 <LoopForever+0x2>
 8002134:	f7ff ffea 	bl	800210c <SystemInit>
 8002138:	480c      	ldr	r0, [pc, #48]	@ (800216c <LoopForever+0x6>)
 800213a:	490d      	ldr	r1, [pc, #52]	@ (8002170 <LoopForever+0xa>)
 800213c:	4a0d      	ldr	r2, [pc, #52]	@ (8002174 <LoopForever+0xe>)
 800213e:	2300      	movs	r3, #0
 8002140:	e002      	b.n	8002148 <LoopCopyDataInit>

08002142 <CopyDataInit>:
 8002142:	58d4      	ldr	r4, [r2, r3]
 8002144:	50c4      	str	r4, [r0, r3]
 8002146:	3304      	adds	r3, #4

08002148 <LoopCopyDataInit>:
 8002148:	18c4      	adds	r4, r0, r3
 800214a:	428c      	cmp	r4, r1
 800214c:	d3f9      	bcc.n	8002142 <CopyDataInit>
 800214e:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <LoopForever+0x12>)
 8002150:	4c0a      	ldr	r4, [pc, #40]	@ (800217c <LoopForever+0x16>)
 8002152:	2300      	movs	r3, #0
 8002154:	e001      	b.n	800215a <LoopFillZerobss>

08002156 <FillZerobss>:
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	3204      	adds	r2, #4

0800215a <LoopFillZerobss>:
 800215a:	42a2      	cmp	r2, r4
 800215c:	d3fb      	bcc.n	8002156 <FillZerobss>
 800215e:	f007 f887 	bl	8009270 <__libc_init_array>
 8002162:	f7ff f8d5 	bl	8001310 <main>

08002166 <LoopForever>:
 8002166:	e7fe      	b.n	8002166 <LoopForever>
 8002168:	20018000 	.word	0x20018000
 800216c:	20000000 	.word	0x20000000
 8002170:	200001e8 	.word	0x200001e8
 8002174:	0800b560 	.word	0x0800b560
 8002178:	200001e8 	.word	0x200001e8
 800217c:	20004940 	.word	0x20004940

08002180 <ADC1_2_IRQHandler>:
 8002180:	e7fe      	b.n	8002180 <ADC1_2_IRQHandler>
	...

08002184 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800218e:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <HAL_Init+0x3c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a0b      	ldr	r2, [pc, #44]	@ (80021c0 <HAL_Init+0x3c>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002198:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219a:	2003      	movs	r0, #3
 800219c:	f001 fb25 	bl	80037ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021a0:	200f      	movs	r0, #15
 80021a2:	f7ff fe75 	bl	8001e90 <HAL_InitTick>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	71fb      	strb	r3, [r7, #7]
 80021b0:	e001      	b.n	80021b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021b2:	f7ff fd05 	bl	8001bc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021b6:	79fb      	ldrb	r3, [r7, #7]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40022000 	.word	0x40022000

080021c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_IncTick+0x20>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_IncTick+0x24>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	4a04      	ldr	r2, [pc, #16]	@ (80021e8 <HAL_IncTick+0x24>)
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000018 	.word	0x20000018
 80021e8:	2000069c 	.word	0x2000069c

080021ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b03      	ldr	r3, [pc, #12]	@ (8002200 <HAL_GetTick+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	2000069c 	.word	0x2000069c

08002204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff ffee 	bl	80021ec <HAL_GetTick>
 8002210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d005      	beq.n	800222a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800221e:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <HAL_Delay+0x44>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800222a:	bf00      	nop
 800222c:	f7ff ffde 	bl	80021ec <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	429a      	cmp	r2, r3
 800223a:	d8f7      	bhi.n	800222c <HAL_Delay+0x28>
  {
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000018 	.word	0x20000018

0800224c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	609a      	str	r2, [r3, #8]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	609a      	str	r2, [r3, #8]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3360      	adds	r3, #96	@ 0x60
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <LL_ADC_SetOffset+0x44>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022ec:	bf00      	nop
 80022ee:	371c      	adds	r7, #28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	03fff000 	.word	0x03fff000

080022fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3360      	adds	r3, #96	@ 0x60
 800230a:	461a      	mov	r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3360      	adds	r3, #96	@ 0x60
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	431a      	orrs	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002352:	bf00      	nop
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3330      	adds	r3, #48	@ 0x30
 8002394:	461a      	mov	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	4413      	add	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	211f      	movs	r1, #31
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	401a      	ands	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	f003 011f 	and.w	r1, r3, #31
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	431a      	orrs	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3314      	adds	r3, #20
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	0e5b      	lsrs	r3, r3, #25
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	4413      	add	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	0d1b      	lsrs	r3, r3, #20
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	2107      	movs	r1, #7
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	401a      	ands	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	0d1b      	lsrs	r3, r3, #20
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	431a      	orrs	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002426:	bf00      	nop
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	43db      	mvns	r3, r3
 800244e:	401a      	ands	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0318 	and.w	r3, r3, #24
 8002456:	4908      	ldr	r1, [pc, #32]	@ (8002478 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002458:	40d9      	lsrs	r1, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	400b      	ands	r3, r1
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	431a      	orrs	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	0007ffff 	.word	0x0007ffff

0800247c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 031f 	and.w	r3, r3, #31
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80024c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6093      	str	r3, [r2, #8]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024ec:	d101      	bne.n	80024f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002510:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002514:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800253c:	d101      	bne.n	8002542 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002560:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <LL_ADC_IsEnabled+0x18>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <LL_ADC_IsEnabled+0x1a>
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025b2:	f043 0204 	orr.w	r2, r3, #4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d101      	bne.n	80025de <LL_ADC_REG_IsConversionOngoing+0x18>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d101      	bne.n	8002604 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b089      	sub	sp, #36	@ 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e130      	b.n	8002890 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff fae7 	bl	8001c10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff3f 	bl	80024d8 <LL_ADC_IsDeepPowerDownEnabled>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff25 	bl	80024b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff5a 	bl	8002528 <LL_ADC_IsInternalRegulatorEnabled>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d115      	bne.n	80026a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ff3e 	bl	8002500 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002684:	4b84      	ldr	r3, [pc, #528]	@ (8002898 <HAL_ADC_Init+0x284>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	099b      	lsrs	r3, r3, #6
 800268a:	4a84      	ldr	r2, [pc, #528]	@ (800289c <HAL_ADC_Init+0x288>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	099b      	lsrs	r3, r3, #6
 8002692:	3301      	adds	r3, #1
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002698:	e002      	b.n	80026a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3b01      	subs	r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f9      	bne.n	800269a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff3c 	bl	8002528 <LL_ADC_IsInternalRegulatorEnabled>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff75 	bl	80025c6 <LL_ADC_REG_IsConversionOngoing>
 80026dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 80c9 	bne.w	800287e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 80c5 	bne.w	800287e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80026fc:	f043 0202 	orr.w	r2, r3, #2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff35 	bl	8002578 <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d115      	bne.n	8002740 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002714:	4862      	ldr	r0, [pc, #392]	@ (80028a0 <HAL_ADC_Init+0x28c>)
 8002716:	f7ff ff2f 	bl	8002578 <LL_ADC_IsEnabled>
 800271a:	4604      	mov	r4, r0
 800271c:	4861      	ldr	r0, [pc, #388]	@ (80028a4 <HAL_ADC_Init+0x290>)
 800271e:	f7ff ff2b 	bl	8002578 <LL_ADC_IsEnabled>
 8002722:	4603      	mov	r3, r0
 8002724:	431c      	orrs	r4, r3
 8002726:	4860      	ldr	r0, [pc, #384]	@ (80028a8 <HAL_ADC_Init+0x294>)
 8002728:	f7ff ff26 	bl	8002578 <LL_ADC_IsEnabled>
 800272c:	4603      	mov	r3, r0
 800272e:	4323      	orrs	r3, r4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4619      	mov	r1, r3
 800273a:	485c      	ldr	r0, [pc, #368]	@ (80028ac <HAL_ADC_Init+0x298>)
 800273c:	f7ff fd86 	bl	800224c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7e5b      	ldrb	r3, [r3, #25]
 8002744:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800274a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002750:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002756:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800275e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d106      	bne.n	800277c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002772:	3b01      	subs	r3, #1
 8002774:	045b      	lsls	r3, r3, #17
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	2b00      	cmp	r3, #0
 8002782:	d009      	beq.n	8002798 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002788:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	4b44      	ldr	r3, [pc, #272]	@ (80028b0 <HAL_ADC_Init+0x29c>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	69b9      	ldr	r1, [r7, #24]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff1b 	bl	80025ec <LL_ADC_INJ_IsConversionOngoing>
 80027b6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d13d      	bne.n	800283a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d13a      	bne.n	800283a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027c8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027d0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027e0:	f023 0302 	bic.w	r3, r3, #2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	69b9      	ldr	r1, [r7, #24]
 80027ea:	430b      	orrs	r3, r1
 80027ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d118      	bne.n	800282a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002802:	f023 0304 	bic.w	r3, r3, #4
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800280e:	4311      	orrs	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002814:	4311      	orrs	r1, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800281a:	430a      	orrs	r2, r1
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	611a      	str	r2, [r3, #16]
 8002828:	e007      	b.n	800283a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0201 	bic.w	r2, r2, #1
 8002838:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10c      	bne.n	800285c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	f023 010f 	bic.w	r1, r3, #15
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	1e5a      	subs	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
 800285a:	e007      	b.n	800286c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 020f 	bic.w	r2, r2, #15
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	f023 0303 	bic.w	r3, r3, #3
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54
 800287c:	e007      	b.n	800288e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002882:	f043 0210 	orr.w	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800288e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3724      	adds	r7, #36	@ 0x24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd90      	pop	{r4, r7, pc}
 8002898:	20000010 	.word	0x20000010
 800289c:	053e2d63 	.word	0x053e2d63
 80028a0:	50040000 	.word	0x50040000
 80028a4:	50040100 	.word	0x50040100
 80028a8:	50040200 	.word	0x50040200
 80028ac:	50040300 	.word	0x50040300
 80028b0:	fff0c007 	.word	0xfff0c007

080028b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028bc:	4857      	ldr	r0, [pc, #348]	@ (8002a1c <HAL_ADC_Start+0x168>)
 80028be:	f7ff fddd 	bl	800247c <LL_ADC_GetMultimode>
 80028c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fe7c 	bl	80025c6 <LL_ADC_REG_IsConversionOngoing>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 809c 	bne.w	8002a0e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_Start+0x30>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e097      	b.n	8002a14 <HAL_ADC_Start+0x160>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fd73 	bl	80033d8 <ADC_Enable>
 80028f2:	4603      	mov	r3, r0
 80028f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f040 8083 	bne.w	8002a04 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002902:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a42      	ldr	r2, [pc, #264]	@ (8002a20 <HAL_ADC_Start+0x16c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d002      	beq.n	8002922 <HAL_ADC_Start+0x6e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	e000      	b.n	8002924 <HAL_ADC_Start+0x70>
 8002922:	4b40      	ldr	r3, [pc, #256]	@ (8002a24 <HAL_ADC_Start+0x170>)
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	4293      	cmp	r3, r2
 800292a:	d002      	beq.n	8002932 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002936:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002942:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800294a:	d106      	bne.n	800295a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002950:	f023 0206 	bic.w	r2, r3, #6
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	659a      	str	r2, [r3, #88]	@ 0x58
 8002958:	e002      	b.n	8002960 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	221c      	movs	r2, #28
 8002966:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a2a      	ldr	r2, [pc, #168]	@ (8002a20 <HAL_ADC_Start+0x16c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d002      	beq.n	8002980 <HAL_ADC_Start+0xcc>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e000      	b.n	8002982 <HAL_ADC_Start+0xce>
 8002980:	4b28      	ldr	r3, [pc, #160]	@ (8002a24 <HAL_ADC_Start+0x170>)
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	4293      	cmp	r3, r2
 8002988:	d008      	beq.n	800299c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b05      	cmp	r3, #5
 8002994:	d002      	beq.n	800299c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b09      	cmp	r3, #9
 800299a:	d114      	bne.n	80029c6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fded 	bl	800259e <LL_ADC_REG_StartConversion>
 80029c4:	e025      	b.n	8002a12 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a12      	ldr	r2, [pc, #72]	@ (8002a20 <HAL_ADC_Start+0x16c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d002      	beq.n	80029e2 <HAL_ADC_Start+0x12e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	e000      	b.n	80029e4 <HAL_ADC_Start+0x130>
 80029e2:	4b10      	ldr	r3, [pc, #64]	@ (8002a24 <HAL_ADC_Start+0x170>)
 80029e4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00f      	beq.n	8002a12 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a02:	e006      	b.n	8002a12 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002a0c:	e001      	b.n	8002a12 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	50040300 	.word	0x50040300
 8002a20:	50040100 	.word	0x50040100
 8002a24:	50040000 	.word	0x50040000

08002a28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a32:	4866      	ldr	r0, [pc, #408]	@ (8002bcc <HAL_ADC_PollForConversion+0x1a4>)
 8002a34:	f7ff fd22 	bl	800247c <LL_ADC_GetMultimode>
 8002a38:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d102      	bne.n	8002a48 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a42:	2308      	movs	r3, #8
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	e02a      	b.n	8002a9e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d002      	beq.n	8002a5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b09      	cmp	r3, #9
 8002a58:	d111      	bne.n	8002a7e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0a4      	b.n	8002bc2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a78:	2304      	movs	r3, #4
 8002a7a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a7c:	e00f      	b.n	8002a9e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a7e:	4853      	ldr	r0, [pc, #332]	@ (8002bcc <HAL_ADC_PollForConversion+0x1a4>)
 8002a80:	f7ff fd0a 	bl	8002498 <LL_ADC_GetMultiDMATransfer>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e093      	b.n	8002bc2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a9e:	f7ff fba5 	bl	80021ec <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002aa4:	e021      	b.n	8002aea <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d01d      	beq.n	8002aea <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002aae:	f7ff fb9d 	bl	80021ec <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d302      	bcc.n	8002ac4 <HAL_ADC_PollForConversion+0x9c>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d112      	bne.n	8002aea <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad6:	f043 0204 	orr.w	r2, r3, #4
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e06b      	b.n	8002bc2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0d6      	beq.n	8002aa6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fc28 	bl	800235e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01c      	beq.n	8002b4e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7e5b      	ldrb	r3, [r3, #25]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d118      	bne.n	8002b4e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d111      	bne.n	8002b4e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd0 <HAL_ADC_PollForConversion+0x1a8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d002      	beq.n	8002b5e <HAL_ADC_PollForConversion+0x136>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	e000      	b.n	8002b60 <HAL_ADC_PollForConversion+0x138>
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd4 <HAL_ADC_PollForConversion+0x1ac>)
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d008      	beq.n	8002b7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d002      	beq.n	8002b7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2b09      	cmp	r3, #9
 8002b78:	d104      	bne.n	8002b84 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	e00c      	b.n	8002b9e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a11      	ldr	r2, [pc, #68]	@ (8002bd0 <HAL_ADC_PollForConversion+0x1a8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d002      	beq.n	8002b94 <HAL_ADC_PollForConversion+0x16c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	e000      	b.n	8002b96 <HAL_ADC_PollForConversion+0x16e>
 8002b94:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <HAL_ADC_PollForConversion+0x1ac>)
 8002b96:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d104      	bne.n	8002bae <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2208      	movs	r2, #8
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e008      	b.n	8002bc0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d103      	bne.n	8002bc0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	220c      	movs	r2, #12
 8002bbe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	50040300 	.word	0x50040300
 8002bd0:	50040100 	.word	0x50040100
 8002bd4:	50040000 	.word	0x50040000

08002bd8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b0b6      	sub	sp, #216	@ 0xd8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x22>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e3c9      	b.n	80033aa <HAL_ADC_ConfigChannel+0x7b6>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fccf 	bl	80025c6 <LL_ADC_REG_IsConversionOngoing>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 83aa 	bne.w	8003384 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d824      	bhi.n	8002c8a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	3b02      	subs	r3, #2
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d81b      	bhi.n	8002c82 <HAL_ADC_ConfigChannel+0x8e>
 8002c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c50 <HAL_ADC_ConfigChannel+0x5c>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c61 	.word	0x08002c61
 8002c54:	08002c69 	.word	0x08002c69
 8002c58:	08002c71 	.word	0x08002c71
 8002c5c:	08002c79 	.word	0x08002c79
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002c60:	230c      	movs	r3, #12
 8002c62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c66:	e010      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002c68:	2312      	movs	r3, #18
 8002c6a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c6e:	e00c      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002c70:	2318      	movs	r3, #24
 8002c72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c76:	e008      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c80:	e003      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002c82:	2306      	movs	r3, #6
 8002c84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c88:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002c98:	f7ff fb74 	bl	8002384 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fc90 	bl	80025c6 <LL_ADC_REG_IsConversionOngoing>
 8002ca6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fc9c 	bl	80025ec <LL_ADC_INJ_IsConversionOngoing>
 8002cb4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 81a4 	bne.w	800300a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 819f 	bne.w	800300a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f7ff fb7f 	bl	80023dc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	08db      	lsrs	r3, r3, #3
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d00a      	beq.n	8002d16 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6919      	ldr	r1, [r3, #16]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d10:	f7ff fad0 	bl	80022b4 <LL_ADC_SetOffset>
 8002d14:	e179      	b.n	800300a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff faed 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x14e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fae2 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	0e9b      	lsrs	r3, r3, #26
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	e01e      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x18c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fad7 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002d70:	2320      	movs	r3, #32
 8002d72:	e004      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002d74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x1a4>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	e018      	b.n	8002dca <HAL_ADC_ConfigChannel+0x1d6>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002db0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002db4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e004      	b.n	8002dca <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d106      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff faa6 	bl	8002328 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2101      	movs	r1, #1
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fa8a 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x214>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2101      	movs	r1, #1
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fa7f 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	f003 021f 	and.w	r2, r3, #31
 8002e06:	e01e      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x252>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fa74 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002e26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002e36:	2320      	movs	r3, #32
 8002e38:	e004      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002e3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x26a>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0e9b      	lsrs	r3, r3, #26
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	e018      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x29c>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002e82:	2320      	movs	r3, #32
 8002e84:	e004      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d106      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fa43 	bl	8002328 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fa27 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x2da>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fa1c 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	0e9b      	lsrs	r3, r3, #26
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	e01e      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x318>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fa11 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ef0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e004      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d105      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x330>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	e014      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x35a>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002f32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002f40:	2320      	movs	r3, #32
 8002f42:	e004      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d106      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f9e4 	bl	8002328 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2103      	movs	r1, #3
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f9c8 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x398>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2103      	movs	r1, #3
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff f9bd 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002f82:	4603      	mov	r3, r0
 8002f84:	0e9b      	lsrs	r3, r3, #26
 8002f86:	f003 021f 	and.w	r2, r3, #31
 8002f8a:	e017      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x3c8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2103      	movs	r1, #3
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff f9b2 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fa6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002fa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	e003      	b.n	8002fba <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x3e0>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	e011      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x404>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002fe2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002fe6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002fec:	2320      	movs	r3, #32
 8002fee:	e003      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ff0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d106      	bne.n	800300a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2200      	movs	r2, #0
 8003002:	2103      	movs	r1, #3
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f98f 	bl	8002328 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fab2 	bl	8002578 <LL_ADC_IsEnabled>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 8140 	bne.w	800329c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	461a      	mov	r2, r3
 800302a:	f7ff fa03 	bl	8002434 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	4a8f      	ldr	r2, [pc, #572]	@ (8003270 <HAL_ADC_ConfigChannel+0x67c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 8131 	bne.w	800329c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x46e>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	0e9b      	lsrs	r3, r3, #26
 8003050:	3301      	adds	r3, #1
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2b09      	cmp	r3, #9
 8003058:	bf94      	ite	ls
 800305a:	2301      	movls	r3, #1
 800305c:	2300      	movhi	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	e019      	b.n	8003096 <HAL_ADC_ConfigChannel+0x4a2>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003072:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003074:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800307a:	2320      	movs	r3, #32
 800307c:	e003      	b.n	8003086 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800307e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	2b09      	cmp	r3, #9
 800308e:	bf94      	ite	ls
 8003090:	2301      	movls	r3, #1
 8003092:	2300      	movhi	r3, #0
 8003094:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003096:	2b00      	cmp	r3, #0
 8003098:	d079      	beq.n	800318e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d107      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x4c2>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0e9b      	lsrs	r3, r3, #26
 80030ac:	3301      	adds	r3, #1
 80030ae:	069b      	lsls	r3, r3, #26
 80030b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030b4:	e015      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x4ee>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80030c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030c6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80030c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80030ce:	2320      	movs	r3, #32
 80030d0:	e003      	b.n	80030da <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80030d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	069b      	lsls	r3, r3, #26
 80030de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x50e>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	0e9b      	lsrs	r3, r3, #26
 80030f4:	3301      	adds	r3, #1
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	e017      	b.n	8003132 <HAL_ADC_ConfigChannel+0x53e>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003112:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800311a:	2320      	movs	r3, #32
 800311c:	e003      	b.n	8003126 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800311e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	ea42 0103 	orr.w	r1, r2, r3
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x564>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	0e9b      	lsrs	r3, r3, #26
 8003148:	3301      	adds	r3, #1
 800314a:	f003 021f 	and.w	r2, r3, #31
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	051b      	lsls	r3, r3, #20
 8003156:	e018      	b.n	800318a <HAL_ADC_ConfigChannel+0x596>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003168:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800316a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003170:	2320      	movs	r3, #32
 8003172:	e003      	b.n	800317c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	3301      	adds	r3, #1
 800317e:	f003 021f 	and.w	r2, r3, #31
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800318a:	430b      	orrs	r3, r1
 800318c:	e081      	b.n	8003292 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003196:	2b00      	cmp	r3, #0
 8003198:	d107      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x5b6>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	0e9b      	lsrs	r3, r3, #26
 80031a0:	3301      	adds	r3, #1
 80031a2:	069b      	lsls	r3, r3, #26
 80031a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031a8:	e015      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x5e2>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80031bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80031c2:	2320      	movs	r3, #32
 80031c4:	e003      	b.n	80031ce <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80031c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	069b      	lsls	r3, r3, #26
 80031d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x602>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0e9b      	lsrs	r3, r3, #26
 80031e8:	3301      	adds	r3, #1
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	2101      	movs	r1, #1
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	e017      	b.n	8003226 <HAL_ADC_ConfigChannel+0x632>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	61bb      	str	r3, [r7, #24]
  return result;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800320e:	2320      	movs	r3, #32
 8003210:	e003      	b.n	800321a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	3301      	adds	r3, #1
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	ea42 0103 	orr.w	r1, r2, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10d      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x65e>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	0e9b      	lsrs	r3, r3, #26
 800323c:	3301      	adds	r3, #1
 800323e:	f003 021f 	and.w	r2, r3, #31
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	3b1e      	subs	r3, #30
 800324a:	051b      	lsls	r3, r3, #20
 800324c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003250:	e01e      	b.n	8003290 <HAL_ADC_ConfigChannel+0x69c>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	60fb      	str	r3, [r7, #12]
  return result;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d104      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800326a:	2320      	movs	r3, #32
 800326c:	e006      	b.n	800327c <HAL_ADC_ConfigChannel+0x688>
 800326e:	bf00      	nop
 8003270:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	3301      	adds	r3, #1
 800327e:	f003 021f 	and.w	r2, r3, #31
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	3b1e      	subs	r3, #30
 800328a:	051b      	lsls	r3, r3, #20
 800328c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003290:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003296:	4619      	mov	r1, r3
 8003298:	f7ff f8a0 	bl	80023dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4b44      	ldr	r3, [pc, #272]	@ (80033b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d07a      	beq.n	800339e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032a8:	4843      	ldr	r0, [pc, #268]	@ (80033b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80032aa:	f7fe fff5 	bl	8002298 <LL_ADC_GetCommonPathInternalCh>
 80032ae:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a41      	ldr	r2, [pc, #260]	@ (80033bc <HAL_ADC_ConfigChannel+0x7c8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d12c      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d126      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a3c      	ldr	r2, [pc, #240]	@ (80033c0 <HAL_ADC_ConfigChannel+0x7cc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <HAL_ADC_ConfigChannel+0x6e8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a3b      	ldr	r2, [pc, #236]	@ (80033c4 <HAL_ADC_ConfigChannel+0x7d0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d15d      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032e4:	4619      	mov	r1, r3
 80032e6:	4834      	ldr	r0, [pc, #208]	@ (80033b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80032e8:	f7fe ffc3 	bl	8002272 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032ec:	4b36      	ldr	r3, [pc, #216]	@ (80033c8 <HAL_ADC_ConfigChannel+0x7d4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	4a36      	ldr	r2, [pc, #216]	@ (80033cc <HAL_ADC_ConfigChannel+0x7d8>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	099b      	lsrs	r3, r3, #6
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003306:	e002      	b.n	800330e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	3b01      	subs	r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f9      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003314:	e040      	b.n	8003398 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2d      	ldr	r2, [pc, #180]	@ (80033d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d118      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003324:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d112      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a23      	ldr	r2, [pc, #140]	@ (80033c0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x74c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a22      	ldr	r2, [pc, #136]	@ (80033c4 <HAL_ADC_ConfigChannel+0x7d0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d12d      	bne.n	800339c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003344:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003348:	4619      	mov	r1, r3
 800334a:	481b      	ldr	r0, [pc, #108]	@ (80033b8 <HAL_ADC_ConfigChannel+0x7c4>)
 800334c:	f7fe ff91 	bl	8002272 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003350:	e024      	b.n	800339c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1f      	ldr	r2, [pc, #124]	@ (80033d4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d120      	bne.n	800339e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800335c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d11a      	bne.n	800339e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a14      	ldr	r2, [pc, #80]	@ (80033c0 <HAL_ADC_ConfigChannel+0x7cc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d115      	bne.n	800339e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003376:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800337a:	4619      	mov	r1, r3
 800337c:	480e      	ldr	r0, [pc, #56]	@ (80033b8 <HAL_ADC_ConfigChannel+0x7c4>)
 800337e:	f7fe ff78 	bl	8002272 <LL_ADC_SetCommonPathInternalCh>
 8003382:	e00c      	b.n	800339e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003396:	e002      	b.n	800339e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003398:	bf00      	nop
 800339a:	e000      	b.n	800339e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800339c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	37d8      	adds	r7, #216	@ 0xd8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	80080000 	.word	0x80080000
 80033b8:	50040300 	.word	0x50040300
 80033bc:	c7520000 	.word	0xc7520000
 80033c0:	50040000 	.word	0x50040000
 80033c4:	50040200 	.word	0x50040200
 80033c8:	20000010 	.word	0x20000010
 80033cc:	053e2d63 	.word	0x053e2d63
 80033d0:	cb840000 	.word	0xcb840000
 80033d4:	80000001 	.word	0x80000001

080033d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff f8c5 	bl	8002578 <LL_ADC_IsEnabled>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d169      	bne.n	80034c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	4b36      	ldr	r3, [pc, #216]	@ (80034d4 <ADC_Enable+0xfc>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003406:	f043 0210 	orr.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e055      	b.n	80034ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff f894 	bl	8002550 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003428:	482b      	ldr	r0, [pc, #172]	@ (80034d8 <ADC_Enable+0x100>)
 800342a:	f7fe ff35 	bl	8002298 <LL_ADC_GetCommonPathInternalCh>
 800342e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003430:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003438:	4b28      	ldr	r3, [pc, #160]	@ (80034dc <ADC_Enable+0x104>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	099b      	lsrs	r3, r3, #6
 800343e:	4a28      	ldr	r2, [pc, #160]	@ (80034e0 <ADC_Enable+0x108>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	099b      	lsrs	r3, r3, #6
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003452:	e002      	b.n	800345a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	3b01      	subs	r3, #1
 8003458:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f9      	bne.n	8003454 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003460:	f7fe fec4 	bl	80021ec <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003466:	e028      	b.n	80034ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff f883 	bl	8002578 <LL_ADC_IsEnabled>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d104      	bne.n	8003482 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f867 	bl	8002550 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003482:	f7fe feb3 	bl	80021ec <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d914      	bls.n	80034ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d00d      	beq.n	80034ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a2:	f043 0210 	orr.w	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ae:	f043 0201 	orr.w	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e007      	b.n	80034ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d1cf      	bne.n	8003468 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	8000003f 	.word	0x8000003f
 80034d8:	50040300 	.word	0x50040300
 80034dc:	20000010 	.word	0x20000010
 80034e0:	053e2d63 	.word	0x053e2d63

080034e4 <LL_ADC_IsEnabled>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <LL_ADC_IsEnabled+0x18>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <LL_ADC_IsEnabled+0x1a>
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <LL_ADC_REG_IsConversionOngoing>:
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b04      	cmp	r3, #4
 800351c:	d101      	bne.n	8003522 <LL_ADC_REG_IsConversionOngoing+0x18>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b09f      	sub	sp, #124	@ 0x7c
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800354a:	2302      	movs	r3, #2
 800354c:	e093      	b.n	8003676 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003556:	2300      	movs	r3, #0
 8003558:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800355a:	2300      	movs	r3, #0
 800355c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a47      	ldr	r2, [pc, #284]	@ (8003680 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d102      	bne.n	800356e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003568:	4b46      	ldr	r3, [pc, #280]	@ (8003684 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	e001      	b.n	8003572 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e072      	b.n	8003676 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ffb9 	bl	800350a <LL_ADC_REG_IsConversionOngoing>
 8003598:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ffb3 	bl	800350a <LL_ADC_REG_IsConversionOngoing>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d154      	bne.n	8003654 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80035aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d151      	bne.n	8003654 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035b0:	4b35      	ldr	r3, [pc, #212]	@ (8003688 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80035b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d02c      	beq.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80035ce:	035b      	lsls	r3, r3, #13
 80035d0:	430b      	orrs	r3, r1
 80035d2:	431a      	orrs	r2, r3
 80035d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035d8:	4829      	ldr	r0, [pc, #164]	@ (8003680 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035da:	f7ff ff83 	bl	80034e4 <LL_ADC_IsEnabled>
 80035de:	4604      	mov	r4, r0
 80035e0:	4828      	ldr	r0, [pc, #160]	@ (8003684 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035e2:	f7ff ff7f 	bl	80034e4 <LL_ADC_IsEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	431c      	orrs	r4, r3
 80035ea:	4828      	ldr	r0, [pc, #160]	@ (800368c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80035ec:	f7ff ff7a 	bl	80034e4 <LL_ADC_IsEnabled>
 80035f0:	4603      	mov	r3, r0
 80035f2:	4323      	orrs	r3, r4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d137      	bne.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003600:	f023 030f 	bic.w	r3, r3, #15
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	6811      	ldr	r1, [r2, #0]
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	6892      	ldr	r2, [r2, #8]
 800360c:	430a      	orrs	r2, r1
 800360e:	431a      	orrs	r2, r3
 8003610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003612:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003614:	e028      	b.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800361e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003620:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003622:	4817      	ldr	r0, [pc, #92]	@ (8003680 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003624:	f7ff ff5e 	bl	80034e4 <LL_ADC_IsEnabled>
 8003628:	4604      	mov	r4, r0
 800362a:	4816      	ldr	r0, [pc, #88]	@ (8003684 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800362c:	f7ff ff5a 	bl	80034e4 <LL_ADC_IsEnabled>
 8003630:	4603      	mov	r3, r0
 8003632:	431c      	orrs	r4, r3
 8003634:	4815      	ldr	r0, [pc, #84]	@ (800368c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003636:	f7ff ff55 	bl	80034e4 <LL_ADC_IsEnabled>
 800363a:	4603      	mov	r3, r0
 800363c:	4323      	orrs	r3, r4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d112      	bne.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800364a:	f023 030f 	bic.w	r3, r3, #15
 800364e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003650:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003652:	e009      	b.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003666:	e000      	b.n	800366a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003668:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003672:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003676:	4618      	mov	r0, r3
 8003678:	377c      	adds	r7, #124	@ 0x7c
 800367a:	46bd      	mov	sp, r7
 800367c:	bd90      	pop	{r4, r7, pc}
 800367e:	bf00      	nop
 8003680:	50040000 	.word	0x50040000
 8003684:	50040100 	.word	0x50040100
 8003688:	50040300 	.word	0x50040300
 800368c:	50040200 	.word	0x50040200

08003690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a0:	4b0c      	ldr	r3, [pc, #48]	@ (80036d4 <__NVIC_SetPriorityGrouping+0x44>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036ac:	4013      	ands	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036c2:	4a04      	ldr	r2, [pc, #16]	@ (80036d4 <__NVIC_SetPriorityGrouping+0x44>)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	60d3      	str	r3, [r2, #12]
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036dc:	4b04      	ldr	r3, [pc, #16]	@ (80036f0 <__NVIC_GetPriorityGrouping+0x18>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	f003 0307 	and.w	r3, r3, #7
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	2b00      	cmp	r3, #0
 8003704:	db0b      	blt.n	800371e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	f003 021f 	and.w	r2, r3, #31
 800370c:	4907      	ldr	r1, [pc, #28]	@ (800372c <__NVIC_EnableIRQ+0x38>)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2001      	movs	r0, #1
 8003716:	fa00 f202 	lsl.w	r2, r0, r2
 800371a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	e000e100 	.word	0xe000e100

08003730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	6039      	str	r1, [r7, #0]
 800373a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	2b00      	cmp	r3, #0
 8003742:	db0a      	blt.n	800375a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	b2da      	uxtb	r2, r3
 8003748:	490c      	ldr	r1, [pc, #48]	@ (800377c <__NVIC_SetPriority+0x4c>)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	0112      	lsls	r2, r2, #4
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	440b      	add	r3, r1
 8003754:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003758:	e00a      	b.n	8003770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4908      	ldr	r1, [pc, #32]	@ (8003780 <__NVIC_SetPriority+0x50>)
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	3b04      	subs	r3, #4
 8003768:	0112      	lsls	r2, r2, #4
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	440b      	add	r3, r1
 800376e:	761a      	strb	r2, [r3, #24]
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000e100 	.word	0xe000e100
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003784:	b480      	push	{r7}
 8003786:	b089      	sub	sp, #36	@ 0x24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f1c3 0307 	rsb	r3, r3, #7
 800379e:	2b04      	cmp	r3, #4
 80037a0:	bf28      	it	cs
 80037a2:	2304      	movcs	r3, #4
 80037a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d902      	bls.n	80037b4 <NVIC_EncodePriority+0x30>
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3b03      	subs	r3, #3
 80037b2:	e000      	b.n	80037b6 <NVIC_EncodePriority+0x32>
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b8:	f04f 32ff 	mov.w	r2, #4294967295
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43da      	mvns	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	401a      	ands	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037cc:	f04f 31ff 	mov.w	r1, #4294967295
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	43d9      	mvns	r1, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	4313      	orrs	r3, r2
         );
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3724      	adds	r7, #36	@ 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ff4c 	bl	8003690 <__NVIC_SetPriorityGrouping>
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003812:	f7ff ff61 	bl	80036d8 <__NVIC_GetPriorityGrouping>
 8003816:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	6978      	ldr	r0, [r7, #20]
 800381e:	f7ff ffb1 	bl	8003784 <NVIC_EncodePriority>
 8003822:	4602      	mov	r2, r0
 8003824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff ff80 	bl	8003730 <__NVIC_SetPriority>
}
 8003830:	bf00      	nop
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff ff54 	bl	80036f4 <__NVIC_EnableIRQ>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003862:	e17f      	b.n	8003b64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	2101      	movs	r1, #1
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	4013      	ands	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8171 	beq.w	8003b5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d005      	beq.n	8003894 <HAL_GPIO_Init+0x40>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d130      	bne.n	80038f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	2203      	movs	r2, #3
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038ca:	2201      	movs	r2, #1
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	f003 0201 	and.w	r2, r3, #1
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d118      	bne.n	8003934 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003908:	2201      	movs	r2, #1
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	08db      	lsrs	r3, r3, #3
 800391e:	f003 0201 	and.w	r2, r3, #1
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	2b03      	cmp	r3, #3
 800393e:	d017      	beq.n	8003970 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	2203      	movs	r2, #3
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d123      	bne.n	80039c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	08da      	lsrs	r2, r3, #3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3208      	adds	r2, #8
 8003984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	220f      	movs	r2, #15
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	08da      	lsrs	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3208      	adds	r2, #8
 80039be:	6939      	ldr	r1, [r7, #16]
 80039c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	2203      	movs	r2, #3
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0203 	and.w	r2, r3, #3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80ac 	beq.w	8003b5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a06:	4b5f      	ldr	r3, [pc, #380]	@ (8003b84 <HAL_GPIO_Init+0x330>)
 8003a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0a:	4a5e      	ldr	r2, [pc, #376]	@ (8003b84 <HAL_GPIO_Init+0x330>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a12:	4b5c      	ldr	r3, [pc, #368]	@ (8003b84 <HAL_GPIO_Init+0x330>)
 8003a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a1e:	4a5a      	ldr	r2, [pc, #360]	@ (8003b88 <HAL_GPIO_Init+0x334>)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	3302      	adds	r3, #2
 8003a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	220f      	movs	r2, #15
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a48:	d025      	beq.n	8003a96 <HAL_GPIO_Init+0x242>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4f      	ldr	r2, [pc, #316]	@ (8003b8c <HAL_GPIO_Init+0x338>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01f      	beq.n	8003a92 <HAL_GPIO_Init+0x23e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a4e      	ldr	r2, [pc, #312]	@ (8003b90 <HAL_GPIO_Init+0x33c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d019      	beq.n	8003a8e <HAL_GPIO_Init+0x23a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4d      	ldr	r2, [pc, #308]	@ (8003b94 <HAL_GPIO_Init+0x340>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_GPIO_Init+0x236>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a4c      	ldr	r2, [pc, #304]	@ (8003b98 <HAL_GPIO_Init+0x344>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00d      	beq.n	8003a86 <HAL_GPIO_Init+0x232>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b9c <HAL_GPIO_Init+0x348>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <HAL_GPIO_Init+0x22e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a4a      	ldr	r2, [pc, #296]	@ (8003ba0 <HAL_GPIO_Init+0x34c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d101      	bne.n	8003a7e <HAL_GPIO_Init+0x22a>
 8003a7a:	2306      	movs	r3, #6
 8003a7c:	e00c      	b.n	8003a98 <HAL_GPIO_Init+0x244>
 8003a7e:	2307      	movs	r3, #7
 8003a80:	e00a      	b.n	8003a98 <HAL_GPIO_Init+0x244>
 8003a82:	2305      	movs	r3, #5
 8003a84:	e008      	b.n	8003a98 <HAL_GPIO_Init+0x244>
 8003a86:	2304      	movs	r3, #4
 8003a88:	e006      	b.n	8003a98 <HAL_GPIO_Init+0x244>
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e004      	b.n	8003a98 <HAL_GPIO_Init+0x244>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e002      	b.n	8003a98 <HAL_GPIO_Init+0x244>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_GPIO_Init+0x244>
 8003a96:	2300      	movs	r3, #0
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	f002 0203 	and.w	r2, r2, #3
 8003a9e:	0092      	lsls	r2, r2, #2
 8003aa0:	4093      	lsls	r3, r2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aa8:	4937      	ldr	r1, [pc, #220]	@ (8003b88 <HAL_GPIO_Init+0x334>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba4 <HAL_GPIO_Init+0x350>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ada:	4a32      	ldr	r2, [pc, #200]	@ (8003ba4 <HAL_GPIO_Init+0x350>)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ae0:	4b30      	ldr	r3, [pc, #192]	@ (8003ba4 <HAL_GPIO_Init+0x350>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b04:	4a27      	ldr	r2, [pc, #156]	@ (8003ba4 <HAL_GPIO_Init+0x350>)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ba4 <HAL_GPIO_Init+0x350>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba4 <HAL_GPIO_Init+0x350>)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <HAL_GPIO_Init+0x350>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4013      	ands	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b58:	4a12      	ldr	r2, [pc, #72]	@ (8003ba4 <HAL_GPIO_Init+0x350>)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	3301      	adds	r3, #1
 8003b62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f47f ae78 	bne.w	8003864 <HAL_GPIO_Init+0x10>
  }
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	48000400 	.word	0x48000400
 8003b90:	48000800 	.word	0x48000800
 8003b94:	48000c00 	.word	0x48000c00
 8003b98:	48001000 	.word	0x48001000
 8003b9c:	48001400 	.word	0x48001400
 8003ba0:	48001800 	.word	0x48001800
 8003ba4:	40010400 	.word	0x40010400

08003ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	887b      	ldrh	r3, [r7, #2]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
 8003bc4:	e001      	b.n	8003bca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
 8003be4:	4613      	mov	r3, r2
 8003be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003be8:	787b      	ldrb	r3, [r7, #1]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bee:	887a      	ldrh	r2, [r7, #2]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bf4:	e002      	b.n	8003bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bf6:	887a      	ldrh	r2, [r7, #2]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	041a      	lsls	r2, r3, #16
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	43d9      	mvns	r1, r3
 8003c26:	887b      	ldrh	r3, [r7, #2]
 8003c28:	400b      	ands	r3, r1
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	619a      	str	r2, [r3, #24]
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e08d      	b.n	8003d6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fe f83c 	bl	8001ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2224      	movs	r2, #36	@ 0x24
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	e006      	b.n	8003cc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003cc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d108      	bne.n	8003cde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cda:	605a      	str	r2, [r3, #4]
 8003cdc:	e007      	b.n	8003cee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69d9      	ldr	r1, [r3, #28]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1a      	ldr	r2, [r3, #32]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	460b      	mov	r3, r1
 8003d82:	817b      	strh	r3, [r7, #10]
 8003d84:	4613      	mov	r3, r2
 8003d86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	f040 80fd 	bne.w	8003f90 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_I2C_Master_Transmit+0x30>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e0f6      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x21e>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dac:	f7fe fa1e 	bl	80021ec <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2319      	movs	r3, #25
 8003db8:	2201      	movs	r2, #1
 8003dba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f914 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0e1      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2221      	movs	r2, #33	@ 0x21
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2210      	movs	r2, #16
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	893a      	ldrh	r2, [r7, #8]
 8003dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2bff      	cmp	r3, #255	@ 0xff
 8003dfe:	d906      	bls.n	8003e0e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	22ff      	movs	r2, #255	@ 0xff
 8003e04:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003e06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e007      	b.n	8003e1e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003e18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e1c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d024      	beq.n	8003e70 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	781a      	ldrb	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	8979      	ldrh	r1, [r7, #10]
 8003e62:	4b4e      	ldr	r3, [pc, #312]	@ (8003f9c <HAL_I2C_Master_Transmit+0x228>)
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fa83 	bl	8004374 <I2C_TransferConfig>
 8003e6e:	e066      	b.n	8003f3e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	8979      	ldrh	r1, [r7, #10]
 8003e78:	4b48      	ldr	r3, [pc, #288]	@ (8003f9c <HAL_I2C_Master_Transmit+0x228>)
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fa78 	bl	8004374 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e84:	e05b      	b.n	8003f3e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	6a39      	ldr	r1, [r7, #32]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f907 	bl	800409e <I2C_WaitOnTXISFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e07b      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	781a      	ldrb	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d034      	beq.n	8003f3e <HAL_I2C_Master_Transmit+0x1ca>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d130      	bne.n	8003f3e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2180      	movs	r1, #128	@ 0x80
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f880 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e04d      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2bff      	cmp	r3, #255	@ 0xff
 8003efe:	d90e      	bls.n	8003f1e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	22ff      	movs	r2, #255	@ 0xff
 8003f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	8979      	ldrh	r1, [r7, #10]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fa2c 	bl	8004374 <I2C_TransferConfig>
 8003f1c:	e00f      	b.n	8003f3e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	8979      	ldrh	r1, [r7, #10]
 8003f30:	2300      	movs	r3, #0
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fa1b 	bl	8004374 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d19e      	bne.n	8003e86 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	6a39      	ldr	r1, [r7, #32]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f8ed 	bl	800412c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e01a      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2220      	movs	r2, #32
 8003f62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa0 <HAL_I2C_Master_Transmit+0x22c>)
 8003f70:	400b      	ands	r3, r1
 8003f72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	80002000 	.word	0x80002000
 8003fa0:	fe00e800 	.word	0xfe00e800

08003fa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d103      	bne.n	8003fc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d007      	beq.n	8003fe0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	619a      	str	r2, [r3, #24]
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ffc:	e03b      	b.n	8004076 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f8d6 	bl	80041b4 <I2C_IsErrorOccurred>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e041      	b.n	8004096 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d02d      	beq.n	8004076 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7fe f8e7 	bl	80021ec <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <I2C_WaitOnFlagUntilTimeout+0x44>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d122      	bne.n	8004076 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	429a      	cmp	r2, r3
 800404c:	d113      	bne.n	8004076 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004052:	f043 0220 	orr.w	r2, r3, #32
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e00f      	b.n	8004096 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4013      	ands	r3, r2
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	429a      	cmp	r2, r3
 8004084:	bf0c      	ite	eq
 8004086:	2301      	moveq	r3, #1
 8004088:	2300      	movne	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	429a      	cmp	r2, r3
 8004092:	d0b4      	beq.n	8003ffe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040aa:	e033      	b.n	8004114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f87f 	bl	80041b4 <I2C_IsErrorOccurred>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e031      	b.n	8004124 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c6:	d025      	beq.n	8004114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c8:	f7fe f890 	bl	80021ec <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d302      	bcc.n	80040de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d11a      	bne.n	8004114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d013      	beq.n	8004114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f0:	f043 0220 	orr.w	r2, r3, #32
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e007      	b.n	8004124 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d1c4      	bne.n	80040ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004138:	e02f      	b.n	800419a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f838 	bl	80041b4 <I2C_IsErrorOccurred>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e02d      	b.n	80041aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414e:	f7fe f84d 	bl	80021ec <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	429a      	cmp	r2, r3
 800415c:	d302      	bcc.n	8004164 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d11a      	bne.n	800419a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b20      	cmp	r3, #32
 8004170:	d013      	beq.n	800419a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e007      	b.n	80041aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d1c8      	bne.n	800413a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	@ 0x28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d068      	beq.n	80042b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2210      	movs	r2, #16
 80041e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041e8:	e049      	b.n	800427e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d045      	beq.n	800427e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fd fffb 	bl	80021ec <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <I2C_IsErrorOccurred+0x54>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d13a      	bne.n	800427e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004212:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800421a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800422a:	d121      	bne.n	8004270 <I2C_IsErrorOccurred+0xbc>
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004232:	d01d      	beq.n	8004270 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	2b20      	cmp	r3, #32
 8004238:	d01a      	beq.n	8004270 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004248:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800424a:	f7fd ffcf 	bl	80021ec <HAL_GetTick>
 800424e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004250:	e00e      	b.n	8004270 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004252:	f7fd ffcb 	bl	80021ec <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b19      	cmp	r3, #25
 800425e:	d907      	bls.n	8004270 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	f043 0320 	orr.w	r3, r3, #32
 8004266:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800426e:	e006      	b.n	800427e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b20      	cmp	r3, #32
 800427c:	d1e9      	bne.n	8004252 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b20      	cmp	r3, #32
 800428a:	d003      	beq.n	8004294 <I2C_IsErrorOccurred+0xe0>
 800428c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0aa      	beq.n	80041ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004298:	2b00      	cmp	r3, #0
 800429a:	d103      	bne.n	80042a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2220      	movs	r2, #32
 80042a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	f043 0304 	orr.w	r3, r3, #4
 80042aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	f043 0308 	orr.w	r3, r3, #8
 80042ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00b      	beq.n	8004320 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	f043 0302 	orr.w	r3, r3, #2
 800430e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004318:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01c      	beq.n	8004362 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7ff fe3b 	bl	8003fa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <I2C_IsErrorOccurred+0x1bc>)
 800433a:	400b      	ands	r3, r1
 800433c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	431a      	orrs	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004362:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004366:	4618      	mov	r0, r3
 8004368:	3728      	adds	r7, #40	@ 0x28
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	fe00e800 	.word	0xfe00e800

08004374 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	817b      	strh	r3, [r7, #10]
 8004382:	4613      	mov	r3, r2
 8004384:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004386:	897b      	ldrh	r3, [r7, #10]
 8004388:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800438c:	7a7b      	ldrb	r3, [r7, #9]
 800438e:	041b      	lsls	r3, r3, #16
 8004390:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004394:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	4313      	orrs	r3, r2
 800439e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	0d5b      	lsrs	r3, r3, #21
 80043ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80043b2:	4b08      	ldr	r3, [pc, #32]	@ (80043d4 <I2C_TransferConfig+0x60>)
 80043b4:	430b      	orrs	r3, r1
 80043b6:	43db      	mvns	r3, r3
 80043b8:	ea02 0103 	and.w	r1, r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	03ff63ff 	.word	0x03ff63ff

080043d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d138      	bne.n	8004460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e032      	b.n	8004462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2224      	movs	r2, #36	@ 0x24
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0201 	bic.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800442a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800446e:	b480      	push	{r7}
 8004470:	b085      	sub	sp, #20
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b20      	cmp	r3, #32
 8004482:	d139      	bne.n	80044f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800448e:	2302      	movs	r3, #2
 8004490:	e033      	b.n	80044fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2224      	movs	r2, #36	@ 0x24
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e000      	b.n	80044fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800450c:	4b04      	ldr	r3, [pc, #16]	@ (8004520 <HAL_PWREx_GetVoltageRange+0x18>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40007000 	.word	0x40007000

08004524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004532:	d130      	bne.n	8004596 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004534:	4b23      	ldr	r3, [pc, #140]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800453c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004540:	d038      	beq.n	80045b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004542:	4b20      	ldr	r3, [pc, #128]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800454a:	4a1e      	ldr	r2, [pc, #120]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800454c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004550:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004552:	4b1d      	ldr	r3, [pc, #116]	@ (80045c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2232      	movs	r2, #50	@ 0x32
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	4a1b      	ldr	r2, [pc, #108]	@ (80045cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	0c9b      	lsrs	r3, r3, #18
 8004564:	3301      	adds	r3, #1
 8004566:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004568:	e002      	b.n	8004570 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3b01      	subs	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004570:	4b14      	ldr	r3, [pc, #80]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800457c:	d102      	bne.n	8004584 <HAL_PWREx_ControlVoltageScaling+0x60>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f2      	bne.n	800456a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004584:	4b0f      	ldr	r3, [pc, #60]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004590:	d110      	bne.n	80045b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e00f      	b.n	80045b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800459e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a2:	d007      	beq.n	80045b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045a4:	4b07      	ldr	r3, [pc, #28]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045ac:	4a05      	ldr	r2, [pc, #20]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40007000 	.word	0x40007000
 80045c8:	20000010 	.word	0x20000010
 80045cc:	431bde83 	.word	0x431bde83

080045d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e3ca      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045e2:	4b97      	ldr	r3, [pc, #604]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045ec:	4b94      	ldr	r3, [pc, #592]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 80e4 	beq.w	80047cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_RCC_OscConfig+0x4a>
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b0c      	cmp	r3, #12
 800460e:	f040 808b 	bne.w	8004728 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b01      	cmp	r3, #1
 8004616:	f040 8087 	bne.w	8004728 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800461a:	4b89      	ldr	r3, [pc, #548]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <HAL_RCC_OscConfig+0x62>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e3a2      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1a      	ldr	r2, [r3, #32]
 8004636:	4b82      	ldr	r3, [pc, #520]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d004      	beq.n	800464c <HAL_RCC_OscConfig+0x7c>
 8004642:	4b7f      	ldr	r3, [pc, #508]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800464a:	e005      	b.n	8004658 <HAL_RCC_OscConfig+0x88>
 800464c:	4b7c      	ldr	r3, [pc, #496]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 800464e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004658:	4293      	cmp	r3, r2
 800465a:	d223      	bcs.n	80046a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fd87 	bl	8005174 <RCC_SetFlashLatencyFromMSIRange>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e383      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004670:	4b73      	ldr	r3, [pc, #460]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a72      	ldr	r2, [pc, #456]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004676:	f043 0308 	orr.w	r3, r3, #8
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	4b70      	ldr	r3, [pc, #448]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	496d      	ldr	r1, [pc, #436]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800468e:	4b6c      	ldr	r3, [pc, #432]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	4968      	ldr	r1, [pc, #416]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	604b      	str	r3, [r1, #4]
 80046a2:	e025      	b.n	80046f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046a4:	4b66      	ldr	r3, [pc, #408]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a65      	ldr	r2, [pc, #404]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 80046aa:	f043 0308 	orr.w	r3, r3, #8
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	4b63      	ldr	r3, [pc, #396]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	4960      	ldr	r1, [pc, #384]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	021b      	lsls	r3, r3, #8
 80046d0:	495b      	ldr	r1, [pc, #364]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fd47 	bl	8005174 <RCC_SetFlashLatencyFromMSIRange>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e343      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046f0:	f000 fc4a 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4b52      	ldr	r3, [pc, #328]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	4950      	ldr	r1, [pc, #320]	@ (8004844 <HAL_RCC_OscConfig+0x274>)
 8004702:	5ccb      	ldrb	r3, [r1, r3]
 8004704:	f003 031f 	and.w	r3, r3, #31
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
 800470c:	4a4e      	ldr	r2, [pc, #312]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 800470e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004710:	4b4e      	ldr	r3, [pc, #312]	@ (800484c <HAL_RCC_OscConfig+0x27c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f7fd fbbb 	bl	8001e90 <HAL_InitTick>
 800471a:	4603      	mov	r3, r0
 800471c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d052      	beq.n	80047ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	e327      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d032      	beq.n	8004796 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004730:	4b43      	ldr	r3, [pc, #268]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a42      	ldr	r2, [pc, #264]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800473c:	f7fd fd56 	bl	80021ec <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004744:	f7fd fd52 	bl	80021ec <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e310      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004756:	4b3a      	ldr	r3, [pc, #232]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004762:	4b37      	ldr	r3, [pc, #220]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a36      	ldr	r2, [pc, #216]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004768:	f043 0308 	orr.w	r3, r3, #8
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	4b34      	ldr	r3, [pc, #208]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	4931      	ldr	r1, [pc, #196]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 800477c:	4313      	orrs	r3, r2
 800477e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004780:	4b2f      	ldr	r3, [pc, #188]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	492c      	ldr	r1, [pc, #176]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]
 8004794:	e01a      	b.n	80047cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004796:	4b2a      	ldr	r3, [pc, #168]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a29      	ldr	r2, [pc, #164]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047a2:	f7fd fd23 	bl	80021ec <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047aa:	f7fd fd1f 	bl	80021ec <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e2dd      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047bc:	4b20      	ldr	r3, [pc, #128]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f0      	bne.n	80047aa <HAL_RCC_OscConfig+0x1da>
 80047c8:	e000      	b.n	80047cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d074      	beq.n	80048c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d005      	beq.n	80047ea <HAL_RCC_OscConfig+0x21a>
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d10e      	bne.n	8004802 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d10b      	bne.n	8004802 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ea:	4b15      	ldr	r3, [pc, #84]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d064      	beq.n	80048c0 <HAL_RCC_OscConfig+0x2f0>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d160      	bne.n	80048c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e2ba      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800480a:	d106      	bne.n	800481a <HAL_RCC_OscConfig+0x24a>
 800480c:	4b0c      	ldr	r3, [pc, #48]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0b      	ldr	r2, [pc, #44]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	e026      	b.n	8004868 <HAL_RCC_OscConfig+0x298>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004822:	d115      	bne.n	8004850 <HAL_RCC_OscConfig+0x280>
 8004824:	4b06      	ldr	r3, [pc, #24]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a05      	ldr	r2, [pc, #20]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 800482a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	4b03      	ldr	r3, [pc, #12]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a02      	ldr	r2, [pc, #8]	@ (8004840 <HAL_RCC_OscConfig+0x270>)
 8004836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	e014      	b.n	8004868 <HAL_RCC_OscConfig+0x298>
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000
 8004844:	0800b194 	.word	0x0800b194
 8004848:	20000010 	.word	0x20000010
 800484c:	20000014 	.word	0x20000014
 8004850:	4ba0      	ldr	r3, [pc, #640]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a9f      	ldr	r2, [pc, #636]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	4b9d      	ldr	r3, [pc, #628]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a9c      	ldr	r2, [pc, #624]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d013      	beq.n	8004898 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fd fcbc 	bl	80021ec <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004878:	f7fd fcb8 	bl	80021ec <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	@ 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e276      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800488a:	4b92      	ldr	r3, [pc, #584]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x2a8>
 8004896:	e014      	b.n	80048c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fd fca8 	bl	80021ec <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a0:	f7fd fca4 	bl	80021ec <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	@ 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e262      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048b2:	4b88      	ldr	r3, [pc, #544]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x2d0>
 80048be:	e000      	b.n	80048c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d060      	beq.n	8004990 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d005      	beq.n	80048e0 <HAL_RCC_OscConfig+0x310>
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b0c      	cmp	r3, #12
 80048d8:	d119      	bne.n	800490e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d116      	bne.n	800490e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e0:	4b7c      	ldr	r3, [pc, #496]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_OscConfig+0x328>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e23f      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f8:	4b76      	ldr	r3, [pc, #472]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	4973      	ldr	r1, [pc, #460]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800490c:	e040      	b.n	8004990 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d023      	beq.n	800495e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004916:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a6e      	ldr	r2, [pc, #440]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 800491c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004922:	f7fd fc63 	bl	80021ec <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800492a:	f7fd fc5f 	bl	80021ec <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e21d      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800493c:	4b65      	ldr	r3, [pc, #404]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004948:	4b62      	ldr	r3, [pc, #392]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	495f      	ldr	r1, [pc, #380]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004958:	4313      	orrs	r3, r2
 800495a:	604b      	str	r3, [r1, #4]
 800495c:	e018      	b.n	8004990 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800495e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a5c      	ldr	r2, [pc, #368]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7fd fc3f 	bl	80021ec <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004972:	f7fd fc3b 	bl	80021ec <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e1f9      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004984:	4b53      	ldr	r3, [pc, #332]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1f0      	bne.n	8004972 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d03c      	beq.n	8004a16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01c      	beq.n	80049de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 80049a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049aa:	4a4a      	ldr	r2, [pc, #296]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fd fc1a 	bl	80021ec <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049bc:	f7fd fc16 	bl	80021ec <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e1d4      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049ce:	4b41      	ldr	r3, [pc, #260]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 80049d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ef      	beq.n	80049bc <HAL_RCC_OscConfig+0x3ec>
 80049dc:	e01b      	b.n	8004a16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049de:	4b3d      	ldr	r3, [pc, #244]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 80049e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049e4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 80049e6:	f023 0301 	bic.w	r3, r3, #1
 80049ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ee:	f7fd fbfd 	bl	80021ec <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f6:	f7fd fbf9 	bl	80021ec <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e1b7      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a08:	4b32      	ldr	r3, [pc, #200]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1ef      	bne.n	80049f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 80a6 	beq.w	8004b70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a24:	2300      	movs	r3, #0
 8004a26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a28:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10d      	bne.n	8004a50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a34:	4b27      	ldr	r3, [pc, #156]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a38:	4a26      	ldr	r2, [pc, #152]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a40:	4b24      	ldr	r3, [pc, #144]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a50:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <HAL_RCC_OscConfig+0x508>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d118      	bne.n	8004a8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad8 <HAL_RCC_OscConfig+0x508>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad8 <HAL_RCC_OscConfig+0x508>)
 8004a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a68:	f7fd fbc0 	bl	80021ec <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a70:	f7fd fbbc 	bl	80021ec <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e17a      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a82:	4b15      	ldr	r3, [pc, #84]	@ (8004ad8 <HAL_RCC_OscConfig+0x508>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d108      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x4d8>
 8004a96:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004aa6:	e029      	b.n	8004afc <HAL_RCC_OscConfig+0x52c>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b05      	cmp	r3, #5
 8004aae:	d115      	bne.n	8004adc <HAL_RCC_OscConfig+0x50c>
 8004ab0:	4b08      	ldr	r3, [pc, #32]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab6:	4a07      	ldr	r2, [pc, #28]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004ab8:	f043 0304 	orr.w	r3, r3, #4
 8004abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac6:	4a03      	ldr	r2, [pc, #12]	@ (8004ad4 <HAL_RCC_OscConfig+0x504>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ad0:	e014      	b.n	8004afc <HAL_RCC_OscConfig+0x52c>
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40007000 	.word	0x40007000
 8004adc:	4b9c      	ldr	r3, [pc, #624]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae2:	4a9b      	ldr	r2, [pc, #620]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004aec:	4b98      	ldr	r3, [pc, #608]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af2:	4a97      	ldr	r2, [pc, #604]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004af4:	f023 0304 	bic.w	r3, r3, #4
 8004af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d016      	beq.n	8004b32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fd fb72 	bl	80021ec <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0c:	f7fd fb6e 	bl	80021ec <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e12a      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b22:	4b8b      	ldr	r3, [pc, #556]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0ed      	beq.n	8004b0c <HAL_RCC_OscConfig+0x53c>
 8004b30:	e015      	b.n	8004b5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b32:	f7fd fb5b 	bl	80021ec <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b38:	e00a      	b.n	8004b50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3a:	f7fd fb57 	bl	80021ec <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e113      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b50:	4b7f      	ldr	r3, [pc, #508]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1ed      	bne.n	8004b3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b5e:	7ffb      	ldrb	r3, [r7, #31]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d105      	bne.n	8004b70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b64:	4b7a      	ldr	r3, [pc, #488]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b68:	4a79      	ldr	r2, [pc, #484]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b6e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80fe 	beq.w	8004d76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	f040 80d0 	bne.w	8004d24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b84:	4b72      	ldr	r3, [pc, #456]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f003 0203 	and.w	r2, r3, #3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d130      	bne.n	8004bfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d127      	bne.n	8004bfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d11f      	bne.n	8004bfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bc4:	2a07      	cmp	r2, #7
 8004bc6:	bf14      	ite	ne
 8004bc8:	2201      	movne	r2, #1
 8004bca:	2200      	moveq	r2, #0
 8004bcc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d113      	bne.n	8004bfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	3b01      	subs	r3, #1
 8004be0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d109      	bne.n	8004bfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	085b      	lsrs	r3, r3, #1
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d06e      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b0c      	cmp	r3, #12
 8004bfe:	d069      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c00:	4b53      	ldr	r3, [pc, #332]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c0c:	4b50      	ldr	r3, [pc, #320]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0ad      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c1c:	4b4c      	ldr	r3, [pc, #304]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a4b      	ldr	r2, [pc, #300]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c28:	f7fd fae0 	bl	80021ec <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c30:	f7fd fadc 	bl	80021ec <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e09a      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c42:	4b43      	ldr	r3, [pc, #268]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c4e:	4b40      	ldr	r3, [pc, #256]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	4b40      	ldr	r3, [pc, #256]	@ (8004d54 <HAL_RCC_OscConfig+0x784>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c5e:	3a01      	subs	r2, #1
 8004c60:	0112      	lsls	r2, r2, #4
 8004c62:	4311      	orrs	r1, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c68:	0212      	lsls	r2, r2, #8
 8004c6a:	4311      	orrs	r1, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c70:	0852      	lsrs	r2, r2, #1
 8004c72:	3a01      	subs	r2, #1
 8004c74:	0552      	lsls	r2, r2, #21
 8004c76:	4311      	orrs	r1, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004c7c:	0852      	lsrs	r2, r2, #1
 8004c7e:	3a01      	subs	r2, #1
 8004c80:	0652      	lsls	r2, r2, #25
 8004c82:	4311      	orrs	r1, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c88:	0912      	lsrs	r2, r2, #4
 8004c8a:	0452      	lsls	r2, r2, #17
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	4930      	ldr	r1, [pc, #192]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c94:	4b2e      	ldr	r3, [pc, #184]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a2d      	ldr	r2, [pc, #180]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004caa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cac:	f7fd fa9e 	bl	80021ec <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fd fa9a 	bl	80021ec <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e058      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc6:	4b22      	ldr	r3, [pc, #136]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cd2:	e050      	b.n	8004d76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e04f      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d148      	bne.n	8004d76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf0:	4b17      	ldr	r3, [pc, #92]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a16      	ldr	r2, [pc, #88]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cfc:	f7fd fa76 	bl	80021ec <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d04:	f7fd fa72 	bl	80021ec <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e030      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d16:	4b0e      	ldr	r3, [pc, #56]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0x734>
 8004d22:	e028      	b.n	8004d76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2b0c      	cmp	r3, #12
 8004d28:	d023      	beq.n	8004d72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d2a:	4b09      	ldr	r3, [pc, #36]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a08      	ldr	r2, [pc, #32]	@ (8004d50 <HAL_RCC_OscConfig+0x780>)
 8004d30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d36:	f7fd fa59 	bl	80021ec <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d3c:	e00c      	b.n	8004d58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3e:	f7fd fa55 	bl	80021ec <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d905      	bls.n	8004d58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e013      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
 8004d50:	40021000 	.word	0x40021000
 8004d54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d58:	4b09      	ldr	r3, [pc, #36]	@ (8004d80 <HAL_RCC_OscConfig+0x7b0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1ec      	bne.n	8004d3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d64:	4b06      	ldr	r3, [pc, #24]	@ (8004d80 <HAL_RCC_OscConfig+0x7b0>)
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	4905      	ldr	r1, [pc, #20]	@ (8004d80 <HAL_RCC_OscConfig+0x7b0>)
 8004d6a:	4b06      	ldr	r3, [pc, #24]	@ (8004d84 <HAL_RCC_OscConfig+0x7b4>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60cb      	str	r3, [r1, #12]
 8004d70:	e001      	b.n	8004d76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3720      	adds	r7, #32
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40021000 	.word	0x40021000
 8004d84:	feeefffc 	.word	0xfeeefffc

08004d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0e7      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d9c:	4b75      	ldr	r3, [pc, #468]	@ (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d910      	bls.n	8004dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004daa:	4b72      	ldr	r3, [pc, #456]	@ (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f023 0207 	bic.w	r2, r3, #7
 8004db2:	4970      	ldr	r1, [pc, #448]	@ (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b6e      	ldr	r3, [pc, #440]	@ (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0cf      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d010      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	4b66      	ldr	r3, [pc, #408]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d908      	bls.n	8004dfa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de8:	4b63      	ldr	r3, [pc, #396]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4960      	ldr	r1, [pc, #384]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d04c      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d121      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e0a6      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d107      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e26:	4b54      	ldr	r3, [pc, #336]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d115      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e09a      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d107      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d109      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e08e      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e086      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e5e:	4b46      	ldr	r3, [pc, #280]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f023 0203 	bic.w	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4943      	ldr	r1, [pc, #268]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e70:	f7fd f9bc 	bl	80021ec <HAL_GetTick>
 8004e74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e76:	e00a      	b.n	8004e8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e78:	f7fd f9b8 	bl	80021ec <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e06e      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 020c 	and.w	r2, r3, #12
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d1eb      	bne.n	8004e78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d010      	beq.n	8004ece <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	4b31      	ldr	r3, [pc, #196]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d208      	bcs.n	8004ece <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	492b      	ldr	r1, [pc, #172]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ece:	4b29      	ldr	r3, [pc, #164]	@ (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d210      	bcs.n	8004efe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004edc:	4b25      	ldr	r3, [pc, #148]	@ (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 0207 	bic.w	r2, r3, #7
 8004ee4:	4923      	ldr	r1, [pc, #140]	@ (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eec:	4b21      	ldr	r3, [pc, #132]	@ (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d001      	beq.n	8004efe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e036      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	4918      	ldr	r1, [pc, #96]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f28:	4b13      	ldr	r3, [pc, #76]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	4910      	ldr	r1, [pc, #64]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f3c:	f000 f824 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8004f40:	4602      	mov	r2, r0
 8004f42:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	091b      	lsrs	r3, r3, #4
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	490b      	ldr	r1, [pc, #44]	@ (8004f7c <HAL_RCC_ClockConfig+0x1f4>)
 8004f4e:	5ccb      	ldrb	r3, [r1, r3]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
 8004f58:	4a09      	ldr	r2, [pc, #36]	@ (8004f80 <HAL_RCC_ClockConfig+0x1f8>)
 8004f5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f5c:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <HAL_RCC_ClockConfig+0x1fc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fc ff95 	bl	8001e90 <HAL_InitTick>
 8004f66:	4603      	mov	r3, r0
 8004f68:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f6a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40022000 	.word	0x40022000
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	0800b194 	.word	0x0800b194
 8004f80:	20000010 	.word	0x20000010
 8004f84:	20000014 	.word	0x20000014

08004f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b089      	sub	sp, #36	@ 0x24
 8004f8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	2300      	movs	r3, #0
 8004f94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f96:	4b3e      	ldr	r3, [pc, #248]	@ (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_RCC_GetSysClockFreq+0x34>
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b0c      	cmp	r3, #12
 8004fb4:	d121      	bne.n	8004ffa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d11e      	bne.n	8004ffa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fbc:	4b34      	ldr	r3, [pc, #208]	@ (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d107      	bne.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fc8:	4b31      	ldr	r3, [pc, #196]	@ (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	e005      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8005094 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10d      	bne.n	8005010 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ff8:	e00a      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d102      	bne.n	8005006 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005000:	4b25      	ldr	r3, [pc, #148]	@ (8005098 <HAL_RCC_GetSysClockFreq+0x110>)
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	e004      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d101      	bne.n	8005010 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800500c:	4b23      	ldr	r3, [pc, #140]	@ (800509c <HAL_RCC_GetSysClockFreq+0x114>)
 800500e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b0c      	cmp	r3, #12
 8005014:	d134      	bne.n	8005080 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005016:	4b1e      	ldr	r3, [pc, #120]	@ (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d003      	beq.n	800502e <HAL_RCC_GetSysClockFreq+0xa6>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b03      	cmp	r3, #3
 800502a:	d003      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0xac>
 800502c:	e005      	b.n	800503a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800502e:	4b1a      	ldr	r3, [pc, #104]	@ (8005098 <HAL_RCC_GetSysClockFreq+0x110>)
 8005030:	617b      	str	r3, [r7, #20]
      break;
 8005032:	e005      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005034:	4b19      	ldr	r3, [pc, #100]	@ (800509c <HAL_RCC_GetSysClockFreq+0x114>)
 8005036:	617b      	str	r3, [r7, #20]
      break;
 8005038:	e002      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	617b      	str	r3, [r7, #20]
      break;
 800503e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005040:	4b13      	ldr	r3, [pc, #76]	@ (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	3301      	adds	r3, #1
 800504c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800504e:	4b10      	ldr	r3, [pc, #64]	@ (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	0a1b      	lsrs	r3, r3, #8
 8005054:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	fb03 f202 	mul.w	r2, r3, r2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	fbb2 f3f3 	udiv	r3, r2, r3
 8005064:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005066:	4b0a      	ldr	r3, [pc, #40]	@ (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	0e5b      	lsrs	r3, r3, #25
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	3301      	adds	r3, #1
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005080:	69bb      	ldr	r3, [r7, #24]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3724      	adds	r7, #36	@ 0x24
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000
 8005094:	0800b1ac 	.word	0x0800b1ac
 8005098:	00f42400 	.word	0x00f42400
 800509c:	007a1200 	.word	0x007a1200

080050a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050a4:	4b03      	ldr	r3, [pc, #12]	@ (80050b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050a6:	681b      	ldr	r3, [r3, #0]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20000010 	.word	0x20000010

080050b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050bc:	f7ff fff0 	bl	80050a0 <HAL_RCC_GetHCLKFreq>
 80050c0:	4602      	mov	r2, r0
 80050c2:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	4904      	ldr	r1, [pc, #16]	@ (80050e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40021000 	.word	0x40021000
 80050e0:	0800b1a4 	.word	0x0800b1a4

080050e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050e8:	f7ff ffda 	bl	80050a0 <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	0adb      	lsrs	r3, r3, #11
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	4904      	ldr	r1, [pc, #16]	@ (800510c <HAL_RCC_GetPCLK2Freq+0x28>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000
 800510c:	0800b1a4 	.word	0x0800b1a4

08005110 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	220f      	movs	r2, #15
 800511e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005120:	4b12      	ldr	r3, [pc, #72]	@ (800516c <HAL_RCC_GetClockConfig+0x5c>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0203 	and.w	r2, r3, #3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800512c:	4b0f      	ldr	r3, [pc, #60]	@ (800516c <HAL_RCC_GetClockConfig+0x5c>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005138:	4b0c      	ldr	r3, [pc, #48]	@ (800516c <HAL_RCC_GetClockConfig+0x5c>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005144:	4b09      	ldr	r3, [pc, #36]	@ (800516c <HAL_RCC_GetClockConfig+0x5c>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	08db      	lsrs	r3, r3, #3
 800514a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005152:	4b07      	ldr	r3, [pc, #28]	@ (8005170 <HAL_RCC_GetClockConfig+0x60>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0207 	and.w	r2, r3, #7
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	601a      	str	r2, [r3, #0]
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000
 8005170:	40022000 	.word	0x40022000

08005174 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800517c:	2300      	movs	r3, #0
 800517e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005180:	4b2a      	ldr	r3, [pc, #168]	@ (800522c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800518c:	f7ff f9bc 	bl	8004508 <HAL_PWREx_GetVoltageRange>
 8005190:	6178      	str	r0, [r7, #20]
 8005192:	e014      	b.n	80051be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005194:	4b25      	ldr	r3, [pc, #148]	@ (800522c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005198:	4a24      	ldr	r2, [pc, #144]	@ (800522c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800519a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800519e:	6593      	str	r3, [r2, #88]	@ 0x58
 80051a0:	4b22      	ldr	r3, [pc, #136]	@ (800522c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051ac:	f7ff f9ac 	bl	8004508 <HAL_PWREx_GetVoltageRange>
 80051b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051b2:	4b1e      	ldr	r3, [pc, #120]	@ (800522c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b6:	4a1d      	ldr	r2, [pc, #116]	@ (800522c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051c4:	d10b      	bne.n	80051de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b80      	cmp	r3, #128	@ 0x80
 80051ca:	d919      	bls.n	8005200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80051d0:	d902      	bls.n	80051d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051d2:	2302      	movs	r3, #2
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	e013      	b.n	8005200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051d8:	2301      	movs	r3, #1
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	e010      	b.n	8005200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b80      	cmp	r3, #128	@ 0x80
 80051e2:	d902      	bls.n	80051ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051e4:	2303      	movs	r3, #3
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	e00a      	b.n	8005200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b80      	cmp	r3, #128	@ 0x80
 80051ee:	d102      	bne.n	80051f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051f0:	2302      	movs	r3, #2
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	e004      	b.n	8005200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b70      	cmp	r3, #112	@ 0x70
 80051fa:	d101      	bne.n	8005200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051fc:	2301      	movs	r3, #1
 80051fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005200:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f023 0207 	bic.w	r2, r3, #7
 8005208:	4909      	ldr	r1, [pc, #36]	@ (8005230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005210:	4b07      	ldr	r3, [pc, #28]	@ (8005230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	429a      	cmp	r2, r3
 800521c:	d001      	beq.n	8005222 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000
 8005230:	40022000 	.word	0x40022000

08005234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800523c:	2300      	movs	r3, #0
 800523e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005240:	2300      	movs	r3, #0
 8005242:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800524c:	2b00      	cmp	r3, #0
 800524e:	d041      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005254:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005258:	d02a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800525a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800525e:	d824      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005260:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005264:	d008      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005266:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800526a:	d81e      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005270:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005274:	d010      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005276:	e018      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005278:	4b86      	ldr	r3, [pc, #536]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a85      	ldr	r2, [pc, #532]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800527e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005282:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005284:	e015      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3304      	adds	r3, #4
 800528a:	2100      	movs	r1, #0
 800528c:	4618      	mov	r0, r3
 800528e:	f000 fabb 	bl	8005808 <RCCEx_PLLSAI1_Config>
 8005292:	4603      	mov	r3, r0
 8005294:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005296:	e00c      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3320      	adds	r3, #32
 800529c:	2100      	movs	r1, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fba6 	bl	80059f0 <RCCEx_PLLSAI2_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052a8:	e003      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	74fb      	strb	r3, [r7, #19]
      break;
 80052ae:	e000      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80052b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b2:	7cfb      	ldrb	r3, [r7, #19]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10b      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052b8:	4b76      	ldr	r3, [pc, #472]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052c6:	4973      	ldr	r1, [pc, #460]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80052ce:	e001      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d0:	7cfb      	ldrb	r3, [r7, #19]
 80052d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d041      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052e8:	d02a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80052ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052ee:	d824      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052f4:	d008      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052fa:	d81e      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005304:	d010      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005306:	e018      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005308:	4b62      	ldr	r3, [pc, #392]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	4a61      	ldr	r2, [pc, #388]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800530e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005312:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005314:	e015      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3304      	adds	r3, #4
 800531a:	2100      	movs	r1, #0
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fa73 	bl	8005808 <RCCEx_PLLSAI1_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005326:	e00c      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3320      	adds	r3, #32
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fb5e 	bl	80059f0 <RCCEx_PLLSAI2_Config>
 8005334:	4603      	mov	r3, r0
 8005336:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005338:	e003      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	74fb      	strb	r3, [r7, #19]
      break;
 800533e:	e000      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005342:	7cfb      	ldrb	r3, [r7, #19]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10b      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005348:	4b52      	ldr	r3, [pc, #328]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800534e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005356:	494f      	ldr	r1, [pc, #316]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800535e:	e001      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80a0 	beq.w	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005372:	2300      	movs	r3, #0
 8005374:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005376:	4b47      	ldr	r3, [pc, #284]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005386:	2300      	movs	r3, #0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00d      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800538c:	4b41      	ldr	r3, [pc, #260]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005390:	4a40      	ldr	r2, [pc, #256]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005396:	6593      	str	r3, [r2, #88]	@ 0x58
 8005398:	4b3e      	ldr	r3, [pc, #248]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a4:	2301      	movs	r3, #1
 80053a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053b4:	f7fc ff1a 	bl	80021ec <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053ba:	e009      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053bc:	f7fc ff16 	bl	80021ec <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d902      	bls.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	74fb      	strb	r3, [r7, #19]
        break;
 80053ce:	e005      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053d0:	4b31      	ldr	r3, [pc, #196]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ef      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d15c      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01f      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d019      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005400:	4b24      	ldr	r3, [pc, #144]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800540a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800540c:	4b21      	ldr	r3, [pc, #132]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005412:	4a20      	ldr	r2, [pc, #128]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800541c:	4b1d      	ldr	r3, [pc, #116]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005422:	4a1c      	ldr	r2, [pc, #112]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800542c:	4a19      	ldr	r2, [pc, #100]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d016      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543e:	f7fc fed5 	bl	80021ec <HAL_GetTick>
 8005442:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005444:	e00b      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005446:	f7fc fed1 	bl	80021ec <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005454:	4293      	cmp	r3, r2
 8005456:	d902      	bls.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	74fb      	strb	r3, [r7, #19]
            break;
 800545c:	e006      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800545e:	4b0d      	ldr	r3, [pc, #52]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0ec      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800546c:	7cfb      	ldrb	r3, [r7, #19]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10c      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005472:	4b08      	ldr	r3, [pc, #32]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005478:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005482:	4904      	ldr	r1, [pc, #16]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800548a:	e009      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800548c:	7cfb      	ldrb	r3, [r7, #19]
 800548e:	74bb      	strb	r3, [r7, #18]
 8005490:	e006      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005492:	bf00      	nop
 8005494:	40021000 	.word	0x40021000
 8005498:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549c:	7cfb      	ldrb	r3, [r7, #19]
 800549e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054a0:	7c7b      	ldrb	r3, [r7, #17]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d105      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a6:	4b9e      	ldr	r3, [pc, #632]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054aa:	4a9d      	ldr	r2, [pc, #628]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054be:	4b98      	ldr	r3, [pc, #608]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c4:	f023 0203 	bic.w	r2, r3, #3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054cc:	4994      	ldr	r1, [pc, #592]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054e0:	4b8f      	ldr	r3, [pc, #572]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e6:	f023 020c 	bic.w	r2, r3, #12
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ee:	498c      	ldr	r1, [pc, #560]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005502:	4b87      	ldr	r3, [pc, #540]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005508:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	4983      	ldr	r1, [pc, #524]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005524:	4b7e      	ldr	r3, [pc, #504]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005532:	497b      	ldr	r1, [pc, #492]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005546:	4b76      	ldr	r3, [pc, #472]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005554:	4972      	ldr	r1, [pc, #456]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005568:	4b6d      	ldr	r3, [pc, #436]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005576:	496a      	ldr	r1, [pc, #424]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005578:	4313      	orrs	r3, r2
 800557a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800558a:	4b65      	ldr	r3, [pc, #404]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005590:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005598:	4961      	ldr	r1, [pc, #388]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ba:	4959      	ldr	r1, [pc, #356]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055ce:	4b54      	ldr	r3, [pc, #336]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055dc:	4950      	ldr	r1, [pc, #320]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055fe:	4948      	ldr	r1, [pc, #288]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005612:	4b43      	ldr	r3, [pc, #268]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005618:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005620:	493f      	ldr	r1, [pc, #252]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d028      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005634:	4b3a      	ldr	r3, [pc, #232]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005642:	4937      	ldr	r1, [pc, #220]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800564e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005652:	d106      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005654:	4b32      	ldr	r3, [pc, #200]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	4a31      	ldr	r2, [pc, #196]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800565e:	60d3      	str	r3, [r2, #12]
 8005660:	e011      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005666:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800566a:	d10c      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3304      	adds	r3, #4
 8005670:	2101      	movs	r1, #1
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f8c8 	bl	8005808 <RCCEx_PLLSAI1_Config>
 8005678:	4603      	mov	r3, r0
 800567a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800567c:	7cfb      	ldrb	r3, [r7, #19]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005682:	7cfb      	ldrb	r3, [r7, #19]
 8005684:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d028      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005692:	4b23      	ldr	r3, [pc, #140]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005698:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a0:	491f      	ldr	r1, [pc, #124]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056b0:	d106      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056bc:	60d3      	str	r3, [r2, #12]
 80056be:	e011      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3304      	adds	r3, #4
 80056ce:	2101      	movs	r1, #1
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 f899 	bl	8005808 <RCCEx_PLLSAI1_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056da:	7cfb      	ldrb	r3, [r7, #19]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d02b      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056fe:	4908      	ldr	r1, [pc, #32]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800570e:	d109      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005710:	4b03      	ldr	r3, [pc, #12]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4a02      	ldr	r2, [pc, #8]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800571a:	60d3      	str	r3, [r2, #12]
 800571c:	e014      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800571e:	bf00      	nop
 8005720:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005728:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800572c:	d10c      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3304      	adds	r3, #4
 8005732:	2101      	movs	r1, #1
 8005734:	4618      	mov	r0, r3
 8005736:	f000 f867 	bl	8005808 <RCCEx_PLLSAI1_Config>
 800573a:	4603      	mov	r3, r0
 800573c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800573e:	7cfb      	ldrb	r3, [r7, #19]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005744:	7cfb      	ldrb	r3, [r7, #19]
 8005746:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d02f      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005754:	4b2b      	ldr	r3, [pc, #172]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005762:	4928      	ldr	r1, [pc, #160]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800576e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005772:	d10d      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3304      	adds	r3, #4
 8005778:	2102      	movs	r1, #2
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f844 	bl	8005808 <RCCEx_PLLSAI1_Config>
 8005780:	4603      	mov	r3, r0
 8005782:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005784:	7cfb      	ldrb	r3, [r7, #19]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d014      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	74bb      	strb	r3, [r7, #18]
 800578e:	e011      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005794:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005798:	d10c      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3320      	adds	r3, #32
 800579e:	2102      	movs	r1, #2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 f925 	bl	80059f0 <RCCEx_PLLSAI2_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057aa:	7cfb      	ldrb	r3, [r7, #19]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80057b0:	7cfb      	ldrb	r3, [r7, #19]
 80057b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057c0:	4b10      	ldr	r3, [pc, #64]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057ce:	490d      	ldr	r1, [pc, #52]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057e2:	4b08      	ldr	r3, [pc, #32]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f2:	4904      	ldr	r1, [pc, #16]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80057fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40021000 	.word	0x40021000

08005808 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005816:	4b75      	ldr	r3, [pc, #468]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d018      	beq.n	8005854 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005822:	4b72      	ldr	r3, [pc, #456]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f003 0203 	and.w	r2, r3, #3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d10d      	bne.n	800584e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
       ||
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800583a:	4b6c      	ldr	r3, [pc, #432]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	091b      	lsrs	r3, r3, #4
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
       ||
 800584a:	429a      	cmp	r2, r3
 800584c:	d047      	beq.n	80058de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
 8005852:	e044      	b.n	80058de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b03      	cmp	r3, #3
 800585a:	d018      	beq.n	800588e <RCCEx_PLLSAI1_Config+0x86>
 800585c:	2b03      	cmp	r3, #3
 800585e:	d825      	bhi.n	80058ac <RCCEx_PLLSAI1_Config+0xa4>
 8005860:	2b01      	cmp	r3, #1
 8005862:	d002      	beq.n	800586a <RCCEx_PLLSAI1_Config+0x62>
 8005864:	2b02      	cmp	r3, #2
 8005866:	d009      	beq.n	800587c <RCCEx_PLLSAI1_Config+0x74>
 8005868:	e020      	b.n	80058ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800586a:	4b60      	ldr	r3, [pc, #384]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d11d      	bne.n	80058b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800587a:	e01a      	b.n	80058b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800587c:	4b5b      	ldr	r3, [pc, #364]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005884:	2b00      	cmp	r3, #0
 8005886:	d116      	bne.n	80058b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800588c:	e013      	b.n	80058b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800588e:	4b57      	ldr	r3, [pc, #348]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10f      	bne.n	80058ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800589a:	4b54      	ldr	r3, [pc, #336]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058aa:	e006      	b.n	80058ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	73fb      	strb	r3, [r7, #15]
      break;
 80058b0:	e004      	b.n	80058bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058b2:	bf00      	nop
 80058b4:	e002      	b.n	80058bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058b6:	bf00      	nop
 80058b8:	e000      	b.n	80058bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10d      	bne.n	80058de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058c2:	4b4a      	ldr	r3, [pc, #296]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6819      	ldr	r1, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	430b      	orrs	r3, r1
 80058d8:	4944      	ldr	r1, [pc, #272]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d17d      	bne.n	80059e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058e4:	4b41      	ldr	r3, [pc, #260]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a40      	ldr	r2, [pc, #256]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f0:	f7fc fc7c 	bl	80021ec <HAL_GetTick>
 80058f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058f6:	e009      	b.n	800590c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058f8:	f7fc fc78 	bl	80021ec <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d902      	bls.n	800590c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	73fb      	strb	r3, [r7, #15]
        break;
 800590a:	e005      	b.n	8005918 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800590c:	4b37      	ldr	r3, [pc, #220]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1ef      	bne.n	80058f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d160      	bne.n	80059e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d111      	bne.n	8005948 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005924:	4b31      	ldr	r3, [pc, #196]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800592c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6892      	ldr	r2, [r2, #8]
 8005934:	0211      	lsls	r1, r2, #8
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	68d2      	ldr	r2, [r2, #12]
 800593a:	0912      	lsrs	r2, r2, #4
 800593c:	0452      	lsls	r2, r2, #17
 800593e:	430a      	orrs	r2, r1
 8005940:	492a      	ldr	r1, [pc, #168]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005942:	4313      	orrs	r3, r2
 8005944:	610b      	str	r3, [r1, #16]
 8005946:	e027      	b.n	8005998 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d112      	bne.n	8005974 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800594e:	4b27      	ldr	r3, [pc, #156]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005956:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6892      	ldr	r2, [r2, #8]
 800595e:	0211      	lsls	r1, r2, #8
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6912      	ldr	r2, [r2, #16]
 8005964:	0852      	lsrs	r2, r2, #1
 8005966:	3a01      	subs	r2, #1
 8005968:	0552      	lsls	r2, r2, #21
 800596a:	430a      	orrs	r2, r1
 800596c:	491f      	ldr	r1, [pc, #124]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800596e:	4313      	orrs	r3, r2
 8005970:	610b      	str	r3, [r1, #16]
 8005972:	e011      	b.n	8005998 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005974:	4b1d      	ldr	r3, [pc, #116]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800597c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6892      	ldr	r2, [r2, #8]
 8005984:	0211      	lsls	r1, r2, #8
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6952      	ldr	r2, [r2, #20]
 800598a:	0852      	lsrs	r2, r2, #1
 800598c:	3a01      	subs	r2, #1
 800598e:	0652      	lsls	r2, r2, #25
 8005990:	430a      	orrs	r2, r1
 8005992:	4916      	ldr	r1, [pc, #88]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005994:	4313      	orrs	r3, r2
 8005996:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005998:	4b14      	ldr	r3, [pc, #80]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a13      	ldr	r2, [pc, #76]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800599e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fc fc22 	bl	80021ec <HAL_GetTick>
 80059a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059aa:	e009      	b.n	80059c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059ac:	f7fc fc1e 	bl	80021ec <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d902      	bls.n	80059c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	73fb      	strb	r3, [r7, #15]
          break;
 80059be:	e005      	b.n	80059cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059c0:	4b0a      	ldr	r3, [pc, #40]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0ef      	beq.n	80059ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059d2:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	4904      	ldr	r1, [pc, #16]	@ (80059ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40021000 	.word	0x40021000

080059f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059fe:	4b6a      	ldr	r3, [pc, #424]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d018      	beq.n	8005a3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a0a:	4b67      	ldr	r3, [pc, #412]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f003 0203 	and.w	r2, r3, #3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d10d      	bne.n	8005a36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a22:	4b61      	ldr	r3, [pc, #388]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
       ||
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d047      	beq.n	8005ac6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
 8005a3a:	e044      	b.n	8005ac6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d018      	beq.n	8005a76 <RCCEx_PLLSAI2_Config+0x86>
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d825      	bhi.n	8005a94 <RCCEx_PLLSAI2_Config+0xa4>
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d002      	beq.n	8005a52 <RCCEx_PLLSAI2_Config+0x62>
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d009      	beq.n	8005a64 <RCCEx_PLLSAI2_Config+0x74>
 8005a50:	e020      	b.n	8005a94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a52:	4b55      	ldr	r3, [pc, #340]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d11d      	bne.n	8005a9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a62:	e01a      	b.n	8005a9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a64:	4b50      	ldr	r3, [pc, #320]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d116      	bne.n	8005a9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a74:	e013      	b.n	8005a9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a76:	4b4c      	ldr	r3, [pc, #304]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10f      	bne.n	8005aa2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a82:	4b49      	ldr	r3, [pc, #292]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a92:	e006      	b.n	8005aa2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	73fb      	strb	r3, [r7, #15]
      break;
 8005a98:	e004      	b.n	8005aa4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a9a:	bf00      	nop
 8005a9c:	e002      	b.n	8005aa4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005aa2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10d      	bne.n	8005ac6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	4939      	ldr	r1, [pc, #228]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d167      	bne.n	8005b9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005acc:	4b36      	ldr	r3, [pc, #216]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a35      	ldr	r2, [pc, #212]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad8:	f7fc fb88 	bl	80021ec <HAL_GetTick>
 8005adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ade:	e009      	b.n	8005af4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ae0:	f7fc fb84 	bl	80021ec <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d902      	bls.n	8005af4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	73fb      	strb	r3, [r7, #15]
        break;
 8005af2:	e005      	b.n	8005b00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005af4:	4b2c      	ldr	r3, [pc, #176]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1ef      	bne.n	8005ae0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d14a      	bne.n	8005b9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d111      	bne.n	8005b30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b0c:	4b26      	ldr	r3, [pc, #152]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6892      	ldr	r2, [r2, #8]
 8005b1c:	0211      	lsls	r1, r2, #8
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	68d2      	ldr	r2, [r2, #12]
 8005b22:	0912      	lsrs	r2, r2, #4
 8005b24:	0452      	lsls	r2, r2, #17
 8005b26:	430a      	orrs	r2, r1
 8005b28:	491f      	ldr	r1, [pc, #124]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	614b      	str	r3, [r1, #20]
 8005b2e:	e011      	b.n	8005b54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6892      	ldr	r2, [r2, #8]
 8005b40:	0211      	lsls	r1, r2, #8
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6912      	ldr	r2, [r2, #16]
 8005b46:	0852      	lsrs	r2, r2, #1
 8005b48:	3a01      	subs	r2, #1
 8005b4a:	0652      	lsls	r2, r2, #25
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	4916      	ldr	r1, [pc, #88]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b54:	4b14      	ldr	r3, [pc, #80]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a13      	ldr	r2, [pc, #76]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b60:	f7fc fb44 	bl	80021ec <HAL_GetTick>
 8005b64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b66:	e009      	b.n	8005b7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b68:	f7fc fb40 	bl	80021ec <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d902      	bls.n	8005b7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	73fb      	strb	r3, [r7, #15]
          break;
 8005b7a:	e005      	b.n	8005b88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ef      	beq.n	8005b68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b90:	695a      	ldr	r2, [r3, #20]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	4904      	ldr	r1, [pc, #16]	@ (8005ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40021000 	.word	0x40021000

08005bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e049      	b.n	8005c52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fc f8e2 	bl	8001d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f000 fb06 	bl	80061fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d001      	beq.n	8005c74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e047      	b.n	8005d04 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a23      	ldr	r2, [pc, #140]	@ (8005d10 <HAL_TIM_Base_Start+0xb4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01d      	beq.n	8005cc2 <HAL_TIM_Base_Start+0x66>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c8e:	d018      	beq.n	8005cc2 <HAL_TIM_Base_Start+0x66>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1f      	ldr	r2, [pc, #124]	@ (8005d14 <HAL_TIM_Base_Start+0xb8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_TIM_Base_Start+0x66>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d18 <HAL_TIM_Base_Start+0xbc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_TIM_Base_Start+0x66>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d1c <HAL_TIM_Base_Start+0xc0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_TIM_Base_Start+0x66>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d20 <HAL_TIM_Base_Start+0xc4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIM_Base_Start+0x66>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a19      	ldr	r2, [pc, #100]	@ (8005d24 <HAL_TIM_Base_Start+0xc8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d115      	bne.n	8005cee <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	4b17      	ldr	r3, [pc, #92]	@ (8005d28 <HAL_TIM_Base_Start+0xcc>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b06      	cmp	r3, #6
 8005cd2:	d015      	beq.n	8005d00 <HAL_TIM_Base_Start+0xa4>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cda:	d011      	beq.n	8005d00 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	e008      	b.n	8005d00 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	e000      	b.n	8005d02 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40000400 	.word	0x40000400
 8005d18:	40000800 	.word	0x40000800
 8005d1c:	40000c00 	.word	0x40000c00
 8005d20:	40013400 	.word	0x40013400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	00010007 	.word	0x00010007

08005d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d001      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e04f      	b.n	8005de4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a23      	ldr	r2, [pc, #140]	@ (8005df0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d01d      	beq.n	8005da2 <HAL_TIM_Base_Start_IT+0x76>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d6e:	d018      	beq.n	8005da2 <HAL_TIM_Base_Start_IT+0x76>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1f      	ldr	r2, [pc, #124]	@ (8005df4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <HAL_TIM_Base_Start_IT+0x76>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005df8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00e      	beq.n	8005da2 <HAL_TIM_Base_Start_IT+0x76>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1c      	ldr	r2, [pc, #112]	@ (8005dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d009      	beq.n	8005da2 <HAL_TIM_Base_Start_IT+0x76>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1b      	ldr	r2, [pc, #108]	@ (8005e00 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_TIM_Base_Start_IT+0x76>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a19      	ldr	r2, [pc, #100]	@ (8005e04 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d115      	bne.n	8005dce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	4b17      	ldr	r3, [pc, #92]	@ (8005e08 <HAL_TIM_Base_Start_IT+0xdc>)
 8005daa:	4013      	ands	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b06      	cmp	r3, #6
 8005db2:	d015      	beq.n	8005de0 <HAL_TIM_Base_Start_IT+0xb4>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dba:	d011      	beq.n	8005de0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dcc:	e008      	b.n	8005de0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0201 	orr.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	e000      	b.n	8005de2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	40000c00 	.word	0x40000c00
 8005e00:	40013400 	.word	0x40013400
 8005e04:	40014000 	.word	0x40014000
 8005e08:	00010007 	.word	0x00010007

08005e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d020      	beq.n	8005e70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01b      	beq.n	8005e70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0202 	mvn.w	r2, #2
 8005e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f9b2 	bl	80061c0 <HAL_TIM_IC_CaptureCallback>
 8005e5c:	e005      	b.n	8005e6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f9a4 	bl	80061ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f9b5 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d020      	beq.n	8005ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01b      	beq.n	8005ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0204 	mvn.w	r2, #4
 8005e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f98c 	bl	80061c0 <HAL_TIM_IC_CaptureCallback>
 8005ea8:	e005      	b.n	8005eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f97e 	bl	80061ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f98f 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d020      	beq.n	8005f08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01b      	beq.n	8005f08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0208 	mvn.w	r2, #8
 8005ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2204      	movs	r2, #4
 8005ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f966 	bl	80061c0 <HAL_TIM_IC_CaptureCallback>
 8005ef4:	e005      	b.n	8005f02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f958 	bl	80061ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f969 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d020      	beq.n	8005f54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01b      	beq.n	8005f54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0210 	mvn.w	r2, #16
 8005f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f940 	bl	80061c0 <HAL_TIM_IC_CaptureCallback>
 8005f40:	e005      	b.n	8005f4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f932 	bl	80061ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f943 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00c      	beq.n	8005f78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0201 	mvn.w	r2, #1
 8005f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fb fe0c 	bl	8001b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d104      	bne.n	8005f8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00c      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fafd 	bl	80065a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00c      	beq.n	8005fca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 faf5 	bl	80065b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00c      	beq.n	8005fee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d007      	beq.n	8005fee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f8fd 	bl	80061e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00c      	beq.n	8006012 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f06f 0220 	mvn.w	r2, #32
 800600a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fabd 	bl	800658c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_TIM_ConfigClockSource+0x1c>
 8006032:	2302      	movs	r3, #2
 8006034:	e0b6      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x18a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006054:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006058:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006060:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006072:	d03e      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0xd8>
 8006074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006078:	f200 8087 	bhi.w	800618a <HAL_TIM_ConfigClockSource+0x170>
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006080:	f000 8086 	beq.w	8006190 <HAL_TIM_ConfigClockSource+0x176>
 8006084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006088:	d87f      	bhi.n	800618a <HAL_TIM_ConfigClockSource+0x170>
 800608a:	2b70      	cmp	r3, #112	@ 0x70
 800608c:	d01a      	beq.n	80060c4 <HAL_TIM_ConfigClockSource+0xaa>
 800608e:	2b70      	cmp	r3, #112	@ 0x70
 8006090:	d87b      	bhi.n	800618a <HAL_TIM_ConfigClockSource+0x170>
 8006092:	2b60      	cmp	r3, #96	@ 0x60
 8006094:	d050      	beq.n	8006138 <HAL_TIM_ConfigClockSource+0x11e>
 8006096:	2b60      	cmp	r3, #96	@ 0x60
 8006098:	d877      	bhi.n	800618a <HAL_TIM_ConfigClockSource+0x170>
 800609a:	2b50      	cmp	r3, #80	@ 0x50
 800609c:	d03c      	beq.n	8006118 <HAL_TIM_ConfigClockSource+0xfe>
 800609e:	2b50      	cmp	r3, #80	@ 0x50
 80060a0:	d873      	bhi.n	800618a <HAL_TIM_ConfigClockSource+0x170>
 80060a2:	2b40      	cmp	r3, #64	@ 0x40
 80060a4:	d058      	beq.n	8006158 <HAL_TIM_ConfigClockSource+0x13e>
 80060a6:	2b40      	cmp	r3, #64	@ 0x40
 80060a8:	d86f      	bhi.n	800618a <HAL_TIM_ConfigClockSource+0x170>
 80060aa:	2b30      	cmp	r3, #48	@ 0x30
 80060ac:	d064      	beq.n	8006178 <HAL_TIM_ConfigClockSource+0x15e>
 80060ae:	2b30      	cmp	r3, #48	@ 0x30
 80060b0:	d86b      	bhi.n	800618a <HAL_TIM_ConfigClockSource+0x170>
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d060      	beq.n	8006178 <HAL_TIM_ConfigClockSource+0x15e>
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d867      	bhi.n	800618a <HAL_TIM_ConfigClockSource+0x170>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d05c      	beq.n	8006178 <HAL_TIM_ConfigClockSource+0x15e>
 80060be:	2b10      	cmp	r3, #16
 80060c0:	d05a      	beq.n	8006178 <HAL_TIM_ConfigClockSource+0x15e>
 80060c2:	e062      	b.n	800618a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060d4:	f000 f9b2 	bl	800643c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	609a      	str	r2, [r3, #8]
      break;
 80060f0:	e04f      	b.n	8006192 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006102:	f000 f99b 	bl	800643c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006114:	609a      	str	r2, [r3, #8]
      break;
 8006116:	e03c      	b.n	8006192 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006124:	461a      	mov	r2, r3
 8006126:	f000 f90f 	bl	8006348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2150      	movs	r1, #80	@ 0x50
 8006130:	4618      	mov	r0, r3
 8006132:	f000 f968 	bl	8006406 <TIM_ITRx_SetConfig>
      break;
 8006136:	e02c      	b.n	8006192 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006144:	461a      	mov	r2, r3
 8006146:	f000 f92e 	bl	80063a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2160      	movs	r1, #96	@ 0x60
 8006150:	4618      	mov	r0, r3
 8006152:	f000 f958 	bl	8006406 <TIM_ITRx_SetConfig>
      break;
 8006156:	e01c      	b.n	8006192 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006164:	461a      	mov	r2, r3
 8006166:	f000 f8ef 	bl	8006348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2140      	movs	r1, #64	@ 0x40
 8006170:	4618      	mov	r0, r3
 8006172:	f000 f948 	bl	8006406 <TIM_ITRx_SetConfig>
      break;
 8006176:	e00c      	b.n	8006192 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f000 f93f 	bl	8006406 <TIM_ITRx_SetConfig>
      break;
 8006188:	e003      	b.n	8006192 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	73fb      	strb	r3, [r7, #15]
      break;
 800618e:	e000      	b.n	8006192 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006190:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a46      	ldr	r2, [pc, #280]	@ (8006328 <TIM_Base_SetConfig+0x12c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <TIM_Base_SetConfig+0x40>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800621a:	d00f      	beq.n	800623c <TIM_Base_SetConfig+0x40>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a43      	ldr	r2, [pc, #268]	@ (800632c <TIM_Base_SetConfig+0x130>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00b      	beq.n	800623c <TIM_Base_SetConfig+0x40>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a42      	ldr	r2, [pc, #264]	@ (8006330 <TIM_Base_SetConfig+0x134>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d007      	beq.n	800623c <TIM_Base_SetConfig+0x40>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a41      	ldr	r2, [pc, #260]	@ (8006334 <TIM_Base_SetConfig+0x138>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a40      	ldr	r2, [pc, #256]	@ (8006338 <TIM_Base_SetConfig+0x13c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d108      	bne.n	800624e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a35      	ldr	r2, [pc, #212]	@ (8006328 <TIM_Base_SetConfig+0x12c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d01f      	beq.n	8006296 <TIM_Base_SetConfig+0x9a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800625c:	d01b      	beq.n	8006296 <TIM_Base_SetConfig+0x9a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a32      	ldr	r2, [pc, #200]	@ (800632c <TIM_Base_SetConfig+0x130>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d017      	beq.n	8006296 <TIM_Base_SetConfig+0x9a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a31      	ldr	r2, [pc, #196]	@ (8006330 <TIM_Base_SetConfig+0x134>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <TIM_Base_SetConfig+0x9a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a30      	ldr	r2, [pc, #192]	@ (8006334 <TIM_Base_SetConfig+0x138>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00f      	beq.n	8006296 <TIM_Base_SetConfig+0x9a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2f      	ldr	r2, [pc, #188]	@ (8006338 <TIM_Base_SetConfig+0x13c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00b      	beq.n	8006296 <TIM_Base_SetConfig+0x9a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a2e      	ldr	r2, [pc, #184]	@ (800633c <TIM_Base_SetConfig+0x140>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d007      	beq.n	8006296 <TIM_Base_SetConfig+0x9a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a2d      	ldr	r2, [pc, #180]	@ (8006340 <TIM_Base_SetConfig+0x144>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_Base_SetConfig+0x9a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a2c      	ldr	r2, [pc, #176]	@ (8006344 <TIM_Base_SetConfig+0x148>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d108      	bne.n	80062a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800629c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a16      	ldr	r2, [pc, #88]	@ (8006328 <TIM_Base_SetConfig+0x12c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00f      	beq.n	80062f4 <TIM_Base_SetConfig+0xf8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a18      	ldr	r2, [pc, #96]	@ (8006338 <TIM_Base_SetConfig+0x13c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00b      	beq.n	80062f4 <TIM_Base_SetConfig+0xf8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a17      	ldr	r2, [pc, #92]	@ (800633c <TIM_Base_SetConfig+0x140>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d007      	beq.n	80062f4 <TIM_Base_SetConfig+0xf8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a16      	ldr	r2, [pc, #88]	@ (8006340 <TIM_Base_SetConfig+0x144>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d003      	beq.n	80062f4 <TIM_Base_SetConfig+0xf8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a15      	ldr	r2, [pc, #84]	@ (8006344 <TIM_Base_SetConfig+0x148>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d103      	bne.n	80062fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b01      	cmp	r3, #1
 800630c:	d105      	bne.n	800631a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f023 0201 	bic.w	r2, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	611a      	str	r2, [r3, #16]
  }
}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	40012c00 	.word	0x40012c00
 800632c:	40000400 	.word	0x40000400
 8006330:	40000800 	.word	0x40000800
 8006334:	40000c00 	.word	0x40000c00
 8006338:	40013400 	.word	0x40013400
 800633c:	40014000 	.word	0x40014000
 8006340:	40014400 	.word	0x40014400
 8006344:	40014800 	.word	0x40014800

08006348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	f023 0201 	bic.w	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f023 030a 	bic.w	r3, r3, #10
 8006384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b087      	sub	sp, #28
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f023 0210 	bic.w	r2, r3, #16
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	031b      	lsls	r3, r3, #12
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006406:	b480      	push	{r7}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800641c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	f043 0307 	orr.w	r3, r3, #7
 8006428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	609a      	str	r2, [r3, #8]
}
 8006430:	bf00      	nop
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	021a      	lsls	r2, r3, #8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	431a      	orrs	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4313      	orrs	r3, r2
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	609a      	str	r2, [r3, #8]
}
 8006470:	bf00      	nop
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006490:	2302      	movs	r3, #2
 8006492:	e068      	b.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a2d      	ldr	r2, [pc, #180]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d108      	bne.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d01d      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006506:	d018      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1b      	ldr	r2, [pc, #108]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d013      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1a      	ldr	r2, [pc, #104]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00e      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a18      	ldr	r2, [pc, #96]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d009      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a13      	ldr	r2, [pc, #76]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d004      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a14      	ldr	r2, [pc, #80]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d10c      	bne.n	8006554 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	4313      	orrs	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40012c00 	.word	0x40012c00
 8006578:	40013400 	.word	0x40013400
 800657c:	40000400 	.word	0x40000400
 8006580:	40000800 	.word	0x40000800
 8006584:	40000c00 	.word	0x40000c00
 8006588:	40014000 	.word	0x40014000

0800658c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e040      	b.n	800665c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fb fbf4 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2224      	movs	r2, #36	@ 0x24
 80065f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0201 	bic.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fb6a 	bl	8006ce8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f8af 	bl	8006778 <UART_SetConfig>
 800661a:	4603      	mov	r3, r0
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e01b      	b.n	800665c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fbe9 	bl	8006e2c <UART_CheckIdleState>
 800665a:	4603      	mov	r3, r0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	@ 0x28
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006678:	2b20      	cmp	r3, #32
 800667a:	d177      	bne.n	800676c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <HAL_UART_Transmit+0x24>
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e070      	b.n	800676e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2221      	movs	r2, #33	@ 0x21
 8006698:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800669a:	f7fb fda7 	bl	80021ec <HAL_GetTick>
 800669e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	88fa      	ldrh	r2, [r7, #6]
 80066ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066b8:	d108      	bne.n	80066cc <HAL_UART_Transmit+0x68>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d104      	bne.n	80066cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	e003      	b.n	80066d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066d4:	e02f      	b.n	8006736 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2200      	movs	r2, #0
 80066de:	2180      	movs	r1, #128	@ 0x80
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 fc4b 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d004      	beq.n	80066f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2220      	movs	r2, #32
 80066f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e03b      	b.n	800676e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	881a      	ldrh	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006708:	b292      	uxth	r2, r2
 800670a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	3302      	adds	r3, #2
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	e007      	b.n	8006724 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	781a      	ldrb	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	3301      	adds	r3, #1
 8006722:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1c9      	bne.n	80066d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2200      	movs	r2, #0
 800674a:	2140      	movs	r1, #64	@ 0x40
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 fc15 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d004      	beq.n	8006762 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e005      	b.n	800676e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2220      	movs	r2, #32
 8006766:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	e000      	b.n	800676e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800676c:	2302      	movs	r3, #2
  }
}
 800676e:	4618      	mov	r0, r3
 8006770:	3720      	adds	r7, #32
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800677c:	b08a      	sub	sp, #40	@ 0x28
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	431a      	orrs	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	431a      	orrs	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	4313      	orrs	r3, r2
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4ba4      	ldr	r3, [pc, #656]	@ (8006a38 <UART_SetConfig+0x2c0>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	6812      	ldr	r2, [r2, #0]
 80067ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067b0:	430b      	orrs	r3, r1
 80067b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a99      	ldr	r2, [pc, #612]	@ (8006a3c <UART_SetConfig+0x2c4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e0:	4313      	orrs	r3, r2
 80067e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f4:	430a      	orrs	r2, r1
 80067f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a90      	ldr	r2, [pc, #576]	@ (8006a40 <UART_SetConfig+0x2c8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d126      	bne.n	8006850 <UART_SetConfig+0xd8>
 8006802:	4b90      	ldr	r3, [pc, #576]	@ (8006a44 <UART_SetConfig+0x2cc>)
 8006804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006808:	f003 0303 	and.w	r3, r3, #3
 800680c:	2b03      	cmp	r3, #3
 800680e:	d81b      	bhi.n	8006848 <UART_SetConfig+0xd0>
 8006810:	a201      	add	r2, pc, #4	@ (adr r2, 8006818 <UART_SetConfig+0xa0>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	08006829 	.word	0x08006829
 800681c:	08006839 	.word	0x08006839
 8006820:	08006831 	.word	0x08006831
 8006824:	08006841 	.word	0x08006841
 8006828:	2301      	movs	r3, #1
 800682a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800682e:	e116      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006830:	2302      	movs	r3, #2
 8006832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006836:	e112      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006838:	2304      	movs	r3, #4
 800683a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800683e:	e10e      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006840:	2308      	movs	r3, #8
 8006842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006846:	e10a      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006848:	2310      	movs	r3, #16
 800684a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800684e:	e106      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a7c      	ldr	r2, [pc, #496]	@ (8006a48 <UART_SetConfig+0x2d0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d138      	bne.n	80068cc <UART_SetConfig+0x154>
 800685a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a44 <UART_SetConfig+0x2cc>)
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006860:	f003 030c 	and.w	r3, r3, #12
 8006864:	2b0c      	cmp	r3, #12
 8006866:	d82d      	bhi.n	80068c4 <UART_SetConfig+0x14c>
 8006868:	a201      	add	r2, pc, #4	@ (adr r2, 8006870 <UART_SetConfig+0xf8>)
 800686a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686e:	bf00      	nop
 8006870:	080068a5 	.word	0x080068a5
 8006874:	080068c5 	.word	0x080068c5
 8006878:	080068c5 	.word	0x080068c5
 800687c:	080068c5 	.word	0x080068c5
 8006880:	080068b5 	.word	0x080068b5
 8006884:	080068c5 	.word	0x080068c5
 8006888:	080068c5 	.word	0x080068c5
 800688c:	080068c5 	.word	0x080068c5
 8006890:	080068ad 	.word	0x080068ad
 8006894:	080068c5 	.word	0x080068c5
 8006898:	080068c5 	.word	0x080068c5
 800689c:	080068c5 	.word	0x080068c5
 80068a0:	080068bd 	.word	0x080068bd
 80068a4:	2300      	movs	r3, #0
 80068a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068aa:	e0d8      	b.n	8006a5e <UART_SetConfig+0x2e6>
 80068ac:	2302      	movs	r3, #2
 80068ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068b2:	e0d4      	b.n	8006a5e <UART_SetConfig+0x2e6>
 80068b4:	2304      	movs	r3, #4
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ba:	e0d0      	b.n	8006a5e <UART_SetConfig+0x2e6>
 80068bc:	2308      	movs	r3, #8
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068c2:	e0cc      	b.n	8006a5e <UART_SetConfig+0x2e6>
 80068c4:	2310      	movs	r3, #16
 80068c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ca:	e0c8      	b.n	8006a5e <UART_SetConfig+0x2e6>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a5e      	ldr	r2, [pc, #376]	@ (8006a4c <UART_SetConfig+0x2d4>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d125      	bne.n	8006922 <UART_SetConfig+0x1aa>
 80068d6:	4b5b      	ldr	r3, [pc, #364]	@ (8006a44 <UART_SetConfig+0x2cc>)
 80068d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80068e0:	2b30      	cmp	r3, #48	@ 0x30
 80068e2:	d016      	beq.n	8006912 <UART_SetConfig+0x19a>
 80068e4:	2b30      	cmp	r3, #48	@ 0x30
 80068e6:	d818      	bhi.n	800691a <UART_SetConfig+0x1a2>
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d00a      	beq.n	8006902 <UART_SetConfig+0x18a>
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d814      	bhi.n	800691a <UART_SetConfig+0x1a2>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <UART_SetConfig+0x182>
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d008      	beq.n	800690a <UART_SetConfig+0x192>
 80068f8:	e00f      	b.n	800691a <UART_SetConfig+0x1a2>
 80068fa:	2300      	movs	r3, #0
 80068fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006900:	e0ad      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006902:	2302      	movs	r3, #2
 8006904:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006908:	e0a9      	b.n	8006a5e <UART_SetConfig+0x2e6>
 800690a:	2304      	movs	r3, #4
 800690c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006910:	e0a5      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006912:	2308      	movs	r3, #8
 8006914:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006918:	e0a1      	b.n	8006a5e <UART_SetConfig+0x2e6>
 800691a:	2310      	movs	r3, #16
 800691c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006920:	e09d      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a4a      	ldr	r2, [pc, #296]	@ (8006a50 <UART_SetConfig+0x2d8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d125      	bne.n	8006978 <UART_SetConfig+0x200>
 800692c:	4b45      	ldr	r3, [pc, #276]	@ (8006a44 <UART_SetConfig+0x2cc>)
 800692e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006932:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006936:	2bc0      	cmp	r3, #192	@ 0xc0
 8006938:	d016      	beq.n	8006968 <UART_SetConfig+0x1f0>
 800693a:	2bc0      	cmp	r3, #192	@ 0xc0
 800693c:	d818      	bhi.n	8006970 <UART_SetConfig+0x1f8>
 800693e:	2b80      	cmp	r3, #128	@ 0x80
 8006940:	d00a      	beq.n	8006958 <UART_SetConfig+0x1e0>
 8006942:	2b80      	cmp	r3, #128	@ 0x80
 8006944:	d814      	bhi.n	8006970 <UART_SetConfig+0x1f8>
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <UART_SetConfig+0x1d8>
 800694a:	2b40      	cmp	r3, #64	@ 0x40
 800694c:	d008      	beq.n	8006960 <UART_SetConfig+0x1e8>
 800694e:	e00f      	b.n	8006970 <UART_SetConfig+0x1f8>
 8006950:	2300      	movs	r3, #0
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006956:	e082      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006958:	2302      	movs	r3, #2
 800695a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800695e:	e07e      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006960:	2304      	movs	r3, #4
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006966:	e07a      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006968:	2308      	movs	r3, #8
 800696a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800696e:	e076      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006970:	2310      	movs	r3, #16
 8006972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006976:	e072      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a35      	ldr	r2, [pc, #212]	@ (8006a54 <UART_SetConfig+0x2dc>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d12a      	bne.n	80069d8 <UART_SetConfig+0x260>
 8006982:	4b30      	ldr	r3, [pc, #192]	@ (8006a44 <UART_SetConfig+0x2cc>)
 8006984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006988:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800698c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006990:	d01a      	beq.n	80069c8 <UART_SetConfig+0x250>
 8006992:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006996:	d81b      	bhi.n	80069d0 <UART_SetConfig+0x258>
 8006998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800699c:	d00c      	beq.n	80069b8 <UART_SetConfig+0x240>
 800699e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069a2:	d815      	bhi.n	80069d0 <UART_SetConfig+0x258>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <UART_SetConfig+0x238>
 80069a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ac:	d008      	beq.n	80069c0 <UART_SetConfig+0x248>
 80069ae:	e00f      	b.n	80069d0 <UART_SetConfig+0x258>
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069b6:	e052      	b.n	8006a5e <UART_SetConfig+0x2e6>
 80069b8:	2302      	movs	r3, #2
 80069ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069be:	e04e      	b.n	8006a5e <UART_SetConfig+0x2e6>
 80069c0:	2304      	movs	r3, #4
 80069c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069c6:	e04a      	b.n	8006a5e <UART_SetConfig+0x2e6>
 80069c8:	2308      	movs	r3, #8
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ce:	e046      	b.n	8006a5e <UART_SetConfig+0x2e6>
 80069d0:	2310      	movs	r3, #16
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069d6:	e042      	b.n	8006a5e <UART_SetConfig+0x2e6>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a17      	ldr	r2, [pc, #92]	@ (8006a3c <UART_SetConfig+0x2c4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d13a      	bne.n	8006a58 <UART_SetConfig+0x2e0>
 80069e2:	4b18      	ldr	r3, [pc, #96]	@ (8006a44 <UART_SetConfig+0x2cc>)
 80069e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069f0:	d01a      	beq.n	8006a28 <UART_SetConfig+0x2b0>
 80069f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069f6:	d81b      	bhi.n	8006a30 <UART_SetConfig+0x2b8>
 80069f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069fc:	d00c      	beq.n	8006a18 <UART_SetConfig+0x2a0>
 80069fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a02:	d815      	bhi.n	8006a30 <UART_SetConfig+0x2b8>
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <UART_SetConfig+0x298>
 8006a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a0c:	d008      	beq.n	8006a20 <UART_SetConfig+0x2a8>
 8006a0e:	e00f      	b.n	8006a30 <UART_SetConfig+0x2b8>
 8006a10:	2300      	movs	r3, #0
 8006a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a16:	e022      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a1e:	e01e      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006a20:	2304      	movs	r3, #4
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a26:	e01a      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006a28:	2308      	movs	r3, #8
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a2e:	e016      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006a30:	2310      	movs	r3, #16
 8006a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a36:	e012      	b.n	8006a5e <UART_SetConfig+0x2e6>
 8006a38:	efff69f3 	.word	0xefff69f3
 8006a3c:	40008000 	.word	0x40008000
 8006a40:	40013800 	.word	0x40013800
 8006a44:	40021000 	.word	0x40021000
 8006a48:	40004400 	.word	0x40004400
 8006a4c:	40004800 	.word	0x40004800
 8006a50:	40004c00 	.word	0x40004c00
 8006a54:	40005000 	.word	0x40005000
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a9f      	ldr	r2, [pc, #636]	@ (8006ce0 <UART_SetConfig+0x568>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d17a      	bne.n	8006b5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d824      	bhi.n	8006aba <UART_SetConfig+0x342>
 8006a70:	a201      	add	r2, pc, #4	@ (adr r2, 8006a78 <UART_SetConfig+0x300>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006a9d 	.word	0x08006a9d
 8006a7c:	08006abb 	.word	0x08006abb
 8006a80:	08006aa5 	.word	0x08006aa5
 8006a84:	08006abb 	.word	0x08006abb
 8006a88:	08006aab 	.word	0x08006aab
 8006a8c:	08006abb 	.word	0x08006abb
 8006a90:	08006abb 	.word	0x08006abb
 8006a94:	08006abb 	.word	0x08006abb
 8006a98:	08006ab3 	.word	0x08006ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a9c:	f7fe fb0c 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8006aa0:	61f8      	str	r0, [r7, #28]
        break;
 8006aa2:	e010      	b.n	8006ac6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aa4:	4b8f      	ldr	r3, [pc, #572]	@ (8006ce4 <UART_SetConfig+0x56c>)
 8006aa6:	61fb      	str	r3, [r7, #28]
        break;
 8006aa8:	e00d      	b.n	8006ac6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aaa:	f7fe fa6d 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8006aae:	61f8      	str	r0, [r7, #28]
        break;
 8006ab0:	e009      	b.n	8006ac6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ab6:	61fb      	str	r3, [r7, #28]
        break;
 8006ab8:	e005      	b.n	8006ac6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ac4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 80fb 	beq.w	8006cc4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4413      	add	r3, r2
 8006ad8:	69fa      	ldr	r2, [r7, #28]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d305      	bcc.n	8006aea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d903      	bls.n	8006af2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006af0:	e0e8      	b.n	8006cc4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	2200      	movs	r2, #0
 8006af6:	461c      	mov	r4, r3
 8006af8:	4615      	mov	r5, r2
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	022b      	lsls	r3, r5, #8
 8006b04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b08:	0222      	lsls	r2, r4, #8
 8006b0a:	68f9      	ldr	r1, [r7, #12]
 8006b0c:	6849      	ldr	r1, [r1, #4]
 8006b0e:	0849      	lsrs	r1, r1, #1
 8006b10:	2000      	movs	r0, #0
 8006b12:	4688      	mov	r8, r1
 8006b14:	4681      	mov	r9, r0
 8006b16:	eb12 0a08 	adds.w	sl, r2, r8
 8006b1a:	eb43 0b09 	adc.w	fp, r3, r9
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b2c:	4650      	mov	r0, sl
 8006b2e:	4659      	mov	r1, fp
 8006b30:	f7fa f85a 	bl	8000be8 <__aeabi_uldivmod>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4613      	mov	r3, r2
 8006b3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b42:	d308      	bcc.n	8006b56 <UART_SetConfig+0x3de>
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b4a:	d204      	bcs.n	8006b56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	60da      	str	r2, [r3, #12]
 8006b54:	e0b6      	b.n	8006cc4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b5c:	e0b2      	b.n	8006cc4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b66:	d15e      	bne.n	8006c26 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006b68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d828      	bhi.n	8006bc2 <UART_SetConfig+0x44a>
 8006b70:	a201      	add	r2, pc, #4	@ (adr r2, 8006b78 <UART_SetConfig+0x400>)
 8006b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b76:	bf00      	nop
 8006b78:	08006b9d 	.word	0x08006b9d
 8006b7c:	08006ba5 	.word	0x08006ba5
 8006b80:	08006bad 	.word	0x08006bad
 8006b84:	08006bc3 	.word	0x08006bc3
 8006b88:	08006bb3 	.word	0x08006bb3
 8006b8c:	08006bc3 	.word	0x08006bc3
 8006b90:	08006bc3 	.word	0x08006bc3
 8006b94:	08006bc3 	.word	0x08006bc3
 8006b98:	08006bbb 	.word	0x08006bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b9c:	f7fe fa8c 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8006ba0:	61f8      	str	r0, [r7, #28]
        break;
 8006ba2:	e014      	b.n	8006bce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ba4:	f7fe fa9e 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8006ba8:	61f8      	str	r0, [r7, #28]
        break;
 8006baa:	e010      	b.n	8006bce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bac:	4b4d      	ldr	r3, [pc, #308]	@ (8006ce4 <UART_SetConfig+0x56c>)
 8006bae:	61fb      	str	r3, [r7, #28]
        break;
 8006bb0:	e00d      	b.n	8006bce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bb2:	f7fe f9e9 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8006bb6:	61f8      	str	r0, [r7, #28]
        break;
 8006bb8:	e009      	b.n	8006bce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bbe:	61fb      	str	r3, [r7, #28]
        break;
 8006bc0:	e005      	b.n	8006bce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006bcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d077      	beq.n	8006cc4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	005a      	lsls	r2, r3, #1
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	441a      	add	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b0f      	cmp	r3, #15
 8006bee:	d916      	bls.n	8006c1e <UART_SetConfig+0x4a6>
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf6:	d212      	bcs.n	8006c1e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f023 030f 	bic.w	r3, r3, #15
 8006c00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	085b      	lsrs	r3, r3, #1
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	8afb      	ldrh	r3, [r7, #22]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	8afa      	ldrh	r2, [r7, #22]
 8006c1a:	60da      	str	r2, [r3, #12]
 8006c1c:	e052      	b.n	8006cc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c24:	e04e      	b.n	8006cc4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d827      	bhi.n	8006c7e <UART_SetConfig+0x506>
 8006c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c34 <UART_SetConfig+0x4bc>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c61 	.word	0x08006c61
 8006c3c:	08006c69 	.word	0x08006c69
 8006c40:	08006c7f 	.word	0x08006c7f
 8006c44:	08006c6f 	.word	0x08006c6f
 8006c48:	08006c7f 	.word	0x08006c7f
 8006c4c:	08006c7f 	.word	0x08006c7f
 8006c50:	08006c7f 	.word	0x08006c7f
 8006c54:	08006c77 	.word	0x08006c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c58:	f7fe fa2e 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8006c5c:	61f8      	str	r0, [r7, #28]
        break;
 8006c5e:	e014      	b.n	8006c8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c60:	f7fe fa40 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8006c64:	61f8      	str	r0, [r7, #28]
        break;
 8006c66:	e010      	b.n	8006c8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c68:	4b1e      	ldr	r3, [pc, #120]	@ (8006ce4 <UART_SetConfig+0x56c>)
 8006c6a:	61fb      	str	r3, [r7, #28]
        break;
 8006c6c:	e00d      	b.n	8006c8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c6e:	f7fe f98b 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8006c72:	61f8      	str	r0, [r7, #28]
        break;
 8006c74:	e009      	b.n	8006c8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c7a:	61fb      	str	r3, [r7, #28]
        break;
 8006c7c:	e005      	b.n	8006c8a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c88:	bf00      	nop
    }

    if (pclk != 0U)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d019      	beq.n	8006cc4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	085a      	lsrs	r2, r3, #1
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	441a      	add	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	2b0f      	cmp	r3, #15
 8006ca8:	d909      	bls.n	8006cbe <UART_SetConfig+0x546>
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cb0:	d205      	bcs.n	8006cbe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60da      	str	r2, [r3, #12]
 8006cbc:	e002      	b.n	8006cc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006cd0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3728      	adds	r7, #40	@ 0x28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cde:	bf00      	nop
 8006ce0:	40008000 	.word	0x40008000
 8006ce4:	00f42400 	.word	0x00f42400

08006ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00a      	beq.n	8006d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7c:	f003 0310 	and.w	r3, r3, #16
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00a      	beq.n	8006d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01a      	beq.n	8006dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006de6:	d10a      	bne.n	8006dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	605a      	str	r2, [r3, #4]
  }
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b098      	sub	sp, #96	@ 0x60
 8006e30:	af02      	add	r7, sp, #8
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e3c:	f7fb f9d6 	bl	80021ec <HAL_GetTick>
 8006e40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d12e      	bne.n	8006eae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f88c 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d021      	beq.n	8006eae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e6      	bne.n	8006e6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e062      	b.n	8006f74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d149      	bne.n	8006f50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ebc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f856 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d03c      	beq.n	8006f50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ef6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e6      	bne.n	8006ed6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f28:	61fa      	str	r2, [r7, #28]
 8006f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	69b9      	ldr	r1, [r7, #24]
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	617b      	str	r3, [r7, #20]
   return(result);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e5      	bne.n	8006f08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e011      	b.n	8006f74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3758      	adds	r7, #88	@ 0x58
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8c:	e04f      	b.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f94:	d04b      	beq.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f96:	f7fb f929 	bl	80021ec <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d302      	bcc.n	8006fac <UART_WaitOnFlagUntilTimeout+0x30>
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e04e      	b.n	800704e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d037      	beq.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b80      	cmp	r3, #128	@ 0x80
 8006fc2:	d034      	beq.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b40      	cmp	r3, #64	@ 0x40
 8006fc8:	d031      	beq.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d110      	bne.n	8006ffa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f838 	bl	8007056 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e029      	b.n	800704e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007008:	d111      	bne.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 f81e 	bl	8007056 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e00f      	b.n	800704e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4013      	ands	r3, r2
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	429a      	cmp	r2, r3
 800703c:	bf0c      	ite	eq
 800703e:	2301      	moveq	r3, #1
 8007040:	2300      	movne	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	429a      	cmp	r2, r3
 800704a:	d0a0      	beq.n	8006f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007056:	b480      	push	{r7}
 8007058:	b095      	sub	sp, #84	@ 0x54
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800706c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800707c:	643b      	str	r3, [r7, #64]	@ 0x40
 800707e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800708a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e6      	bne.n	800705e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3308      	adds	r3, #8
 8007096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	61fb      	str	r3, [r7, #28]
   return(result);
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e5      	bne.n	8007090 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d118      	bne.n	80070fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f023 0310 	bic.w	r3, r3, #16
 80070e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	6979      	ldr	r1, [r7, #20]
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	613b      	str	r3, [r7, #16]
   return(result);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e6      	bne.n	80070cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2220      	movs	r2, #32
 8007102:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007112:	bf00      	nop
 8007114:	3754      	adds	r7, #84	@ 0x54
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	4603      	mov	r3, r0
 8007126:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800712c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007130:	2b84      	cmp	r3, #132	@ 0x84
 8007132:	d005      	beq.n	8007140 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007134:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	3303      	adds	r3, #3
 800713e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007140:	68fb      	ldr	r3, [r7, #12]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007152:	f000 fafd 	bl	8007750 <vTaskStartScheduler>
  
  return osOK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	bd80      	pop	{r7, pc}

0800715c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800715c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800715e:	b089      	sub	sp, #36	@ 0x24
 8007160:	af04      	add	r7, sp, #16
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d020      	beq.n	80071b0 <osThreadCreate+0x54>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01c      	beq.n	80071b0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685c      	ldr	r4, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691e      	ldr	r6, [r3, #16]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff ffc8 	bl	800711e <makeFreeRtosPriority>
 800718e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007198:	9202      	str	r2, [sp, #8]
 800719a:	9301      	str	r3, [sp, #4]
 800719c:	9100      	str	r1, [sp, #0]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	4632      	mov	r2, r6
 80071a2:	4629      	mov	r1, r5
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 f8ed 	bl	8007384 <xTaskCreateStatic>
 80071aa:	4603      	mov	r3, r0
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	e01c      	b.n	80071ea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685c      	ldr	r4, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071bc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff ffaa 	bl	800711e <makeFreeRtosPriority>
 80071ca:	4602      	mov	r2, r0
 80071cc:	f107 030c 	add.w	r3, r7, #12
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	9200      	str	r2, [sp, #0]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	4632      	mov	r2, r6
 80071d8:	4629      	mov	r1, r5
 80071da:	4620      	mov	r0, r4
 80071dc:	f000 f932 	bl	8007444 <xTaskCreate>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d001      	beq.n	80071ea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	e000      	b.n	80071ec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80071ea:	68fb      	ldr	r3, [r7, #12]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <osDelay+0x16>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	e000      	b.n	800720c <osDelay+0x18>
 800720a:	2301      	movs	r3, #1
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fa69 	bl	80076e4 <vTaskDelay>
  
  return osOK;
 8007212:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f103 0208 	add.w	r2, r3, #8
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f04f 32ff 	mov.w	r2, #4294967295
 8007234:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f103 0208 	add.w	r2, r3, #8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f103 0208 	add.w	r2, r3, #8
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007276:	b480      	push	{r7}
 8007278:	b085      	sub	sp, #20
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	601a      	str	r2, [r3, #0]
}
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d4:	d103      	bne.n	80072de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	e00c      	b.n	80072f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3308      	adds	r3, #8
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	e002      	b.n	80072ec <vListInsert+0x2e>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d2f6      	bcs.n	80072e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	601a      	str	r2, [r3, #0]
}
 8007324:	bf00      	nop
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6892      	ldr	r2, [r2, #8]
 8007346:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6852      	ldr	r2, [r2, #4]
 8007350:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	429a      	cmp	r2, r3
 800735a:	d103      	bne.n	8007364 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	1e5a      	subs	r2, r3, #1
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08e      	sub	sp, #56	@ 0x38
 8007388:	af04      	add	r7, sp, #16
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10b      	bne.n	80073b0 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073aa:	bf00      	nop
 80073ac:	bf00      	nop
 80073ae:	e7fd      	b.n	80073ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10b      	bne.n	80073ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	61fb      	str	r3, [r7, #28]
}
 80073c8:	bf00      	nop
 80073ca:	bf00      	nop
 80073cc:	e7fd      	b.n	80073ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073ce:	23a0      	movs	r3, #160	@ 0xa0
 80073d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80073d6:	d00b      	beq.n	80073f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	61bb      	str	r3, [r7, #24]
}
 80073ea:	bf00      	nop
 80073ec:	bf00      	nop
 80073ee:	e7fd      	b.n	80073ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01e      	beq.n	8007436 <xTaskCreateStatic+0xb2>
 80073f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01b      	beq.n	8007436 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007400:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007404:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007406:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	2202      	movs	r2, #2
 800740c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007410:	2300      	movs	r3, #0
 8007412:	9303      	str	r3, [sp, #12]
 8007414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007416:	9302      	str	r3, [sp, #8]
 8007418:	f107 0314 	add.w	r3, r7, #20
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f851 	bl	80074d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800742e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007430:	f000 f8ee 	bl	8007610 <prvAddNewTaskToReadyList>
 8007434:	e001      	b.n	800743a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007436:	2300      	movs	r3, #0
 8007438:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800743a:	697b      	ldr	r3, [r7, #20]
	}
 800743c:	4618      	mov	r0, r3
 800743e:	3728      	adds	r7, #40	@ 0x28
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08c      	sub	sp, #48	@ 0x30
 8007448:	af04      	add	r7, sp, #16
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	4613      	mov	r3, r2
 8007452:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007454:	88fb      	ldrh	r3, [r7, #6]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fefd 	bl	8008258 <pvPortMalloc>
 800745e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00e      	beq.n	8007484 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007466:	20a0      	movs	r0, #160	@ 0xa0
 8007468:	f000 fef6 	bl	8008258 <pvPortMalloc>
 800746c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	631a      	str	r2, [r3, #48]	@ 0x30
 800747a:	e005      	b.n	8007488 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800747c:	6978      	ldr	r0, [r7, #20]
 800747e:	f000 ffb9 	bl	80083f4 <vPortFree>
 8007482:	e001      	b.n	8007488 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007484:	2300      	movs	r3, #0
 8007486:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d017      	beq.n	80074be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007496:	88fa      	ldrh	r2, [r7, #6]
 8007498:	2300      	movs	r3, #0
 800749a:	9303      	str	r3, [sp, #12]
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	9302      	str	r3, [sp, #8]
 80074a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f80f 	bl	80074d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074b2:	69f8      	ldr	r0, [r7, #28]
 80074b4:	f000 f8ac 	bl	8007610 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074b8:	2301      	movs	r3, #1
 80074ba:	61bb      	str	r3, [r7, #24]
 80074bc:	e002      	b.n	80074c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074be:	f04f 33ff 	mov.w	r3, #4294967295
 80074c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074c4:	69bb      	ldr	r3, [r7, #24]
	}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074e8:	3b01      	subs	r3, #1
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	f023 0307 	bic.w	r3, r3, #7
 80074f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00b      	beq.n	800751a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	617b      	str	r3, [r7, #20]
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	e7fd      	b.n	8007516 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01f      	beq.n	8007560 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007520:	2300      	movs	r3, #0
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	e012      	b.n	800754c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	4413      	add	r3, r2
 800752c:	7819      	ldrb	r1, [r3, #0]
 800752e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	3334      	adds	r3, #52	@ 0x34
 8007536:	460a      	mov	r2, r1
 8007538:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	4413      	add	r3, r2
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d006      	beq.n	8007554 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	3301      	adds	r3, #1
 800754a:	61fb      	str	r3, [r7, #28]
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	2b0f      	cmp	r3, #15
 8007550:	d9e9      	bls.n	8007526 <prvInitialiseNewTask+0x56>
 8007552:	e000      	b.n	8007556 <prvInitialiseNewTask+0x86>
			{
				break;
 8007554:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800755e:	e003      	b.n	8007568 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756a:	2b06      	cmp	r3, #6
 800756c:	d901      	bls.n	8007572 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800756e:	2306      	movs	r3, #6
 8007570:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007576:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800757c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800757e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007580:	2200      	movs	r2, #0
 8007582:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007586:	3304      	adds	r3, #4
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff fe67 	bl	800725c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	3318      	adds	r3, #24
 8007592:	4618      	mov	r0, r3
 8007594:	f7ff fe62 	bl	800725c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800759c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800759e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a0:	f1c3 0207 	rsb	r2, r3, #7
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	334c      	adds	r3, #76	@ 0x4c
 80075c2:	224c      	movs	r2, #76	@ 0x4c
 80075c4:	2100      	movs	r1, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 fda3 	bl	8009112 <memset>
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	4a0d      	ldr	r2, [pc, #52]	@ (8007604 <prvInitialiseNewTask+0x134>)
 80075d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80075d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007608 <prvInitialiseNewTask+0x138>)
 80075d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80075d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075da:	4a0c      	ldr	r2, [pc, #48]	@ (800760c <prvInitialiseNewTask+0x13c>)
 80075dc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	68f9      	ldr	r1, [r7, #12]
 80075e2:	69b8      	ldr	r0, [r7, #24]
 80075e4:	f000 fc2a 	bl	8007e3c <pxPortInitialiseStack>
 80075e8:	4602      	mov	r2, r0
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075fa:	bf00      	nop
 80075fc:	3720      	adds	r7, #32
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	200047f4 	.word	0x200047f4
 8007608:	2000485c 	.word	0x2000485c
 800760c:	200048c4 	.word	0x200048c4

08007610 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007618:	f000 fd3e 	bl	8008098 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800761c:	4b2a      	ldr	r3, [pc, #168]	@ (80076c8 <prvAddNewTaskToReadyList+0xb8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3301      	adds	r3, #1
 8007622:	4a29      	ldr	r2, [pc, #164]	@ (80076c8 <prvAddNewTaskToReadyList+0xb8>)
 8007624:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007626:	4b29      	ldr	r3, [pc, #164]	@ (80076cc <prvAddNewTaskToReadyList+0xbc>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d109      	bne.n	8007642 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800762e:	4a27      	ldr	r2, [pc, #156]	@ (80076cc <prvAddNewTaskToReadyList+0xbc>)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007634:	4b24      	ldr	r3, [pc, #144]	@ (80076c8 <prvAddNewTaskToReadyList+0xb8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d110      	bne.n	800765e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800763c:	f000 fad4 	bl	8007be8 <prvInitialiseTaskLists>
 8007640:	e00d      	b.n	800765e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007642:	4b23      	ldr	r3, [pc, #140]	@ (80076d0 <prvAddNewTaskToReadyList+0xc0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d109      	bne.n	800765e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800764a:	4b20      	ldr	r3, [pc, #128]	@ (80076cc <prvAddNewTaskToReadyList+0xbc>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007654:	429a      	cmp	r2, r3
 8007656:	d802      	bhi.n	800765e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007658:	4a1c      	ldr	r2, [pc, #112]	@ (80076cc <prvAddNewTaskToReadyList+0xbc>)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800765e:	4b1d      	ldr	r3, [pc, #116]	@ (80076d4 <prvAddNewTaskToReadyList+0xc4>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3301      	adds	r3, #1
 8007664:	4a1b      	ldr	r2, [pc, #108]	@ (80076d4 <prvAddNewTaskToReadyList+0xc4>)
 8007666:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766c:	2201      	movs	r2, #1
 800766e:	409a      	lsls	r2, r3
 8007670:	4b19      	ldr	r3, [pc, #100]	@ (80076d8 <prvAddNewTaskToReadyList+0xc8>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4313      	orrs	r3, r2
 8007676:	4a18      	ldr	r2, [pc, #96]	@ (80076d8 <prvAddNewTaskToReadyList+0xc8>)
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4a15      	ldr	r2, [pc, #84]	@ (80076dc <prvAddNewTaskToReadyList+0xcc>)
 8007688:	441a      	add	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3304      	adds	r3, #4
 800768e:	4619      	mov	r1, r3
 8007690:	4610      	mov	r0, r2
 8007692:	f7ff fdf0 	bl	8007276 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007696:	f000 fd31 	bl	80080fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800769a:	4b0d      	ldr	r3, [pc, #52]	@ (80076d0 <prvAddNewTaskToReadyList+0xc0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00e      	beq.n	80076c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076a2:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <prvAddNewTaskToReadyList+0xbc>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d207      	bcs.n	80076c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076b0:	4b0b      	ldr	r3, [pc, #44]	@ (80076e0 <prvAddNewTaskToReadyList+0xd0>)
 80076b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	200007a0 	.word	0x200007a0
 80076cc:	200006a0 	.word	0x200006a0
 80076d0:	200007ac 	.word	0x200007ac
 80076d4:	200007bc 	.word	0x200007bc
 80076d8:	200007a8 	.word	0x200007a8
 80076dc:	200006a4 	.word	0x200006a4
 80076e0:	e000ed04 	.word	0xe000ed04

080076e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d018      	beq.n	8007728 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076f6:	4b14      	ldr	r3, [pc, #80]	@ (8007748 <vTaskDelay+0x64>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <vTaskDelay+0x32>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	60bb      	str	r3, [r7, #8]
}
 8007710:	bf00      	nop
 8007712:	bf00      	nop
 8007714:	e7fd      	b.n	8007712 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007716:	f000 f885 	bl	8007824 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800771a:	2100      	movs	r1, #0
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fb27 	bl	8007d70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007722:	f000 f88d 	bl	8007840 <xTaskResumeAll>
 8007726:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d107      	bne.n	800773e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800772e:	4b07      	ldr	r3, [pc, #28]	@ (800774c <vTaskDelay+0x68>)
 8007730:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	200007c8 	.word	0x200007c8
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	@ 0x28
 8007754:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007756:	2300      	movs	r3, #0
 8007758:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800775a:	2300      	movs	r3, #0
 800775c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800775e:	463a      	mov	r2, r7
 8007760:	1d39      	adds	r1, r7, #4
 8007762:	f107 0308 	add.w	r3, r7, #8
 8007766:	4618      	mov	r0, r3
 8007768:	f7f9 fbb6 	bl	8000ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	9202      	str	r2, [sp, #8]
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	2300      	movs	r3, #0
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	2300      	movs	r3, #0
 800777c:	460a      	mov	r2, r1
 800777e:	4921      	ldr	r1, [pc, #132]	@ (8007804 <vTaskStartScheduler+0xb4>)
 8007780:	4821      	ldr	r0, [pc, #132]	@ (8007808 <vTaskStartScheduler+0xb8>)
 8007782:	f7ff fdff 	bl	8007384 <xTaskCreateStatic>
 8007786:	4603      	mov	r3, r0
 8007788:	4a20      	ldr	r2, [pc, #128]	@ (800780c <vTaskStartScheduler+0xbc>)
 800778a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800778c:	4b1f      	ldr	r3, [pc, #124]	@ (800780c <vTaskStartScheduler+0xbc>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007794:	2301      	movs	r3, #1
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	e001      	b.n	800779e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d11b      	bne.n	80077dc <vTaskStartScheduler+0x8c>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	613b      	str	r3, [r7, #16]
}
 80077b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077b8:	4b15      	ldr	r3, [pc, #84]	@ (8007810 <vTaskStartScheduler+0xc0>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	334c      	adds	r3, #76	@ 0x4c
 80077be:	4a15      	ldr	r2, [pc, #84]	@ (8007814 <vTaskStartScheduler+0xc4>)
 80077c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077c2:	4b15      	ldr	r3, [pc, #84]	@ (8007818 <vTaskStartScheduler+0xc8>)
 80077c4:	f04f 32ff 	mov.w	r2, #4294967295
 80077c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077ca:	4b14      	ldr	r3, [pc, #80]	@ (800781c <vTaskStartScheduler+0xcc>)
 80077cc:	2201      	movs	r2, #1
 80077ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077d0:	4b13      	ldr	r3, [pc, #76]	@ (8007820 <vTaskStartScheduler+0xd0>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077d6:	f000 fbbb 	bl	8007f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077da:	e00f      	b.n	80077fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e2:	d10b      	bne.n	80077fc <vTaskStartScheduler+0xac>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	60fb      	str	r3, [r7, #12]
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	e7fd      	b.n	80077f8 <vTaskStartScheduler+0xa8>
}
 80077fc:	bf00      	nop
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	0800b18c 	.word	0x0800b18c
 8007808:	08007bb9 	.word	0x08007bb9
 800780c:	200007c4 	.word	0x200007c4
 8007810:	200006a0 	.word	0x200006a0
 8007814:	2000002c 	.word	0x2000002c
 8007818:	200007c0 	.word	0x200007c0
 800781c:	200007ac 	.word	0x200007ac
 8007820:	200007a4 	.word	0x200007a4

08007824 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007828:	4b04      	ldr	r3, [pc, #16]	@ (800783c <vTaskSuspendAll+0x18>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	4a03      	ldr	r2, [pc, #12]	@ (800783c <vTaskSuspendAll+0x18>)
 8007830:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007832:	bf00      	nop
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	200007c8 	.word	0x200007c8

08007840 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007846:	2300      	movs	r3, #0
 8007848:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800784a:	2300      	movs	r3, #0
 800784c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800784e:	4b42      	ldr	r3, [pc, #264]	@ (8007958 <xTaskResumeAll+0x118>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10b      	bne.n	800786e <xTaskResumeAll+0x2e>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	603b      	str	r3, [r7, #0]
}
 8007868:	bf00      	nop
 800786a:	bf00      	nop
 800786c:	e7fd      	b.n	800786a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800786e:	f000 fc13 	bl	8008098 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007872:	4b39      	ldr	r3, [pc, #228]	@ (8007958 <xTaskResumeAll+0x118>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3b01      	subs	r3, #1
 8007878:	4a37      	ldr	r2, [pc, #220]	@ (8007958 <xTaskResumeAll+0x118>)
 800787a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800787c:	4b36      	ldr	r3, [pc, #216]	@ (8007958 <xTaskResumeAll+0x118>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d161      	bne.n	8007948 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007884:	4b35      	ldr	r3, [pc, #212]	@ (800795c <xTaskResumeAll+0x11c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d05d      	beq.n	8007948 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800788c:	e02e      	b.n	80078ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788e:	4b34      	ldr	r3, [pc, #208]	@ (8007960 <xTaskResumeAll+0x120>)
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3318      	adds	r3, #24
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fd48 	bl	8007330 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3304      	adds	r3, #4
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff fd43 	bl	8007330 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ae:	2201      	movs	r2, #1
 80078b0:	409a      	lsls	r2, r3
 80078b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007964 <xTaskResumeAll+0x124>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007964 <xTaskResumeAll+0x124>)
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c0:	4613      	mov	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4a27      	ldr	r2, [pc, #156]	@ (8007968 <xTaskResumeAll+0x128>)
 80078ca:	441a      	add	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3304      	adds	r3, #4
 80078d0:	4619      	mov	r1, r3
 80078d2:	4610      	mov	r0, r2
 80078d4:	f7ff fccf 	bl	8007276 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078dc:	4b23      	ldr	r3, [pc, #140]	@ (800796c <xTaskResumeAll+0x12c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d302      	bcc.n	80078ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80078e6:	4b22      	ldr	r3, [pc, #136]	@ (8007970 <xTaskResumeAll+0x130>)
 80078e8:	2201      	movs	r2, #1
 80078ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ec:	4b1c      	ldr	r3, [pc, #112]	@ (8007960 <xTaskResumeAll+0x120>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1cc      	bne.n	800788e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078fa:	f000 fa19 	bl	8007d30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80078fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007974 <xTaskResumeAll+0x134>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d010      	beq.n	800792c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800790a:	f000 f837 	bl	800797c <xTaskIncrementTick>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007914:	4b16      	ldr	r3, [pc, #88]	@ (8007970 <xTaskResumeAll+0x130>)
 8007916:	2201      	movs	r2, #1
 8007918:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3b01      	subs	r3, #1
 800791e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1f1      	bne.n	800790a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007926:	4b13      	ldr	r3, [pc, #76]	@ (8007974 <xTaskResumeAll+0x134>)
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800792c:	4b10      	ldr	r3, [pc, #64]	@ (8007970 <xTaskResumeAll+0x130>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d009      	beq.n	8007948 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007934:	2301      	movs	r3, #1
 8007936:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007938:	4b0f      	ldr	r3, [pc, #60]	@ (8007978 <xTaskResumeAll+0x138>)
 800793a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007948:	f000 fbd8 	bl	80080fc <vPortExitCritical>

	return xAlreadyYielded;
 800794c:	68bb      	ldr	r3, [r7, #8]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	200007c8 	.word	0x200007c8
 800795c:	200007a0 	.word	0x200007a0
 8007960:	20000760 	.word	0x20000760
 8007964:	200007a8 	.word	0x200007a8
 8007968:	200006a4 	.word	0x200006a4
 800796c:	200006a0 	.word	0x200006a0
 8007970:	200007b4 	.word	0x200007b4
 8007974:	200007b0 	.word	0x200007b0
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007986:	4b4f      	ldr	r3, [pc, #316]	@ (8007ac4 <xTaskIncrementTick+0x148>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f040 808f 	bne.w	8007aae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007990:	4b4d      	ldr	r3, [pc, #308]	@ (8007ac8 <xTaskIncrementTick+0x14c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3301      	adds	r3, #1
 8007996:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007998:	4a4b      	ldr	r2, [pc, #300]	@ (8007ac8 <xTaskIncrementTick+0x14c>)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d121      	bne.n	80079e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80079a4:	4b49      	ldr	r3, [pc, #292]	@ (8007acc <xTaskIncrementTick+0x150>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00b      	beq.n	80079c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	603b      	str	r3, [r7, #0]
}
 80079c0:	bf00      	nop
 80079c2:	bf00      	nop
 80079c4:	e7fd      	b.n	80079c2 <xTaskIncrementTick+0x46>
 80079c6:	4b41      	ldr	r3, [pc, #260]	@ (8007acc <xTaskIncrementTick+0x150>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	4b40      	ldr	r3, [pc, #256]	@ (8007ad0 <xTaskIncrementTick+0x154>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a3e      	ldr	r2, [pc, #248]	@ (8007acc <xTaskIncrementTick+0x150>)
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	4a3e      	ldr	r2, [pc, #248]	@ (8007ad0 <xTaskIncrementTick+0x154>)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	4b3e      	ldr	r3, [pc, #248]	@ (8007ad4 <xTaskIncrementTick+0x158>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3301      	adds	r3, #1
 80079e0:	4a3c      	ldr	r2, [pc, #240]	@ (8007ad4 <xTaskIncrementTick+0x158>)
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	f000 f9a4 	bl	8007d30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079e8:	4b3b      	ldr	r3, [pc, #236]	@ (8007ad8 <xTaskIncrementTick+0x15c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d348      	bcc.n	8007a84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079f2:	4b36      	ldr	r3, [pc, #216]	@ (8007acc <xTaskIncrementTick+0x150>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d104      	bne.n	8007a06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079fc:	4b36      	ldr	r3, [pc, #216]	@ (8007ad8 <xTaskIncrementTick+0x15c>)
 80079fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007a02:	601a      	str	r2, [r3, #0]
					break;
 8007a04:	e03e      	b.n	8007a84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a06:	4b31      	ldr	r3, [pc, #196]	@ (8007acc <xTaskIncrementTick+0x150>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d203      	bcs.n	8007a26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8007ad8 <xTaskIncrementTick+0x15c>)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a24:	e02e      	b.n	8007a84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff fc80 	bl	8007330 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	3318      	adds	r3, #24
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff fc77 	bl	8007330 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a46:	2201      	movs	r2, #1
 8007a48:	409a      	lsls	r2, r3
 8007a4a:	4b24      	ldr	r3, [pc, #144]	@ (8007adc <xTaskIncrementTick+0x160>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	4a22      	ldr	r2, [pc, #136]	@ (8007adc <xTaskIncrementTick+0x160>)
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae0 <xTaskIncrementTick+0x164>)
 8007a62:	441a      	add	r2, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	3304      	adds	r3, #4
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	f7ff fc03 	bl	8007276 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a74:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae4 <xTaskIncrementTick+0x168>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d3b9      	bcc.n	80079f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a82:	e7b6      	b.n	80079f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a84:	4b17      	ldr	r3, [pc, #92]	@ (8007ae4 <xTaskIncrementTick+0x168>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a8a:	4915      	ldr	r1, [pc, #84]	@ (8007ae0 <xTaskIncrementTick+0x164>)
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	440b      	add	r3, r1
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d901      	bls.n	8007aa0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007aa0:	4b11      	ldr	r3, [pc, #68]	@ (8007ae8 <xTaskIncrementTick+0x16c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	e004      	b.n	8007ab8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007aae:	4b0f      	ldr	r3, [pc, #60]	@ (8007aec <xTaskIncrementTick+0x170>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8007aec <xTaskIncrementTick+0x170>)
 8007ab6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ab8:	697b      	ldr	r3, [r7, #20]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	200007c8 	.word	0x200007c8
 8007ac8:	200007a4 	.word	0x200007a4
 8007acc:	20000758 	.word	0x20000758
 8007ad0:	2000075c 	.word	0x2000075c
 8007ad4:	200007b8 	.word	0x200007b8
 8007ad8:	200007c0 	.word	0x200007c0
 8007adc:	200007a8 	.word	0x200007a8
 8007ae0:	200006a4 	.word	0x200006a4
 8007ae4:	200006a0 	.word	0x200006a0
 8007ae8:	200007b4 	.word	0x200007b4
 8007aec:	200007b0 	.word	0x200007b0

08007af0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007af6:	4b2a      	ldr	r3, [pc, #168]	@ (8007ba0 <vTaskSwitchContext+0xb0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007afe:	4b29      	ldr	r3, [pc, #164]	@ (8007ba4 <vTaskSwitchContext+0xb4>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b04:	e045      	b.n	8007b92 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007b06:	4b27      	ldr	r3, [pc, #156]	@ (8007ba4 <vTaskSwitchContext+0xb4>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b0c:	4b26      	ldr	r3, [pc, #152]	@ (8007ba8 <vTaskSwitchContext+0xb8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	fab3 f383 	clz	r3, r3
 8007b18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b1a:	7afb      	ldrb	r3, [r7, #11]
 8007b1c:	f1c3 031f 	rsb	r3, r3, #31
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	4922      	ldr	r1, [pc, #136]	@ (8007bac <vTaskSwitchContext+0xbc>)
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4613      	mov	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	440b      	add	r3, r1
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10b      	bne.n	8007b4e <vTaskSwitchContext+0x5e>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	607b      	str	r3, [r7, #4]
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <vTaskSwitchContext+0x5a>
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4a14      	ldr	r2, [pc, #80]	@ (8007bac <vTaskSwitchContext+0xbc>)
 8007b5a:	4413      	add	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	605a      	str	r2, [r3, #4]
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d104      	bne.n	8007b7e <vTaskSwitchContext+0x8e>
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	605a      	str	r2, [r3, #4]
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	4a0a      	ldr	r2, [pc, #40]	@ (8007bb0 <vTaskSwitchContext+0xc0>)
 8007b86:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b88:	4b09      	ldr	r3, [pc, #36]	@ (8007bb0 <vTaskSwitchContext+0xc0>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	334c      	adds	r3, #76	@ 0x4c
 8007b8e:	4a09      	ldr	r2, [pc, #36]	@ (8007bb4 <vTaskSwitchContext+0xc4>)
 8007b90:	6013      	str	r3, [r2, #0]
}
 8007b92:	bf00      	nop
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	200007c8 	.word	0x200007c8
 8007ba4:	200007b4 	.word	0x200007b4
 8007ba8:	200007a8 	.word	0x200007a8
 8007bac:	200006a4 	.word	0x200006a4
 8007bb0:	200006a0 	.word	0x200006a0
 8007bb4:	2000002c 	.word	0x2000002c

08007bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bc0:	f000 f852 	bl	8007c68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bc4:	4b06      	ldr	r3, [pc, #24]	@ (8007be0 <prvIdleTask+0x28>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d9f9      	bls.n	8007bc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bcc:	4b05      	ldr	r3, [pc, #20]	@ (8007be4 <prvIdleTask+0x2c>)
 8007bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bdc:	e7f0      	b.n	8007bc0 <prvIdleTask+0x8>
 8007bde:	bf00      	nop
 8007be0:	200006a4 	.word	0x200006a4
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bee:	2300      	movs	r3, #0
 8007bf0:	607b      	str	r3, [r7, #4]
 8007bf2:	e00c      	b.n	8007c0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4a12      	ldr	r2, [pc, #72]	@ (8007c48 <prvInitialiseTaskLists+0x60>)
 8007c00:	4413      	add	r3, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff fb0a 	bl	800721c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	607b      	str	r3, [r7, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b06      	cmp	r3, #6
 8007c12:	d9ef      	bls.n	8007bf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c14:	480d      	ldr	r0, [pc, #52]	@ (8007c4c <prvInitialiseTaskLists+0x64>)
 8007c16:	f7ff fb01 	bl	800721c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c1a:	480d      	ldr	r0, [pc, #52]	@ (8007c50 <prvInitialiseTaskLists+0x68>)
 8007c1c:	f7ff fafe 	bl	800721c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c20:	480c      	ldr	r0, [pc, #48]	@ (8007c54 <prvInitialiseTaskLists+0x6c>)
 8007c22:	f7ff fafb 	bl	800721c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c26:	480c      	ldr	r0, [pc, #48]	@ (8007c58 <prvInitialiseTaskLists+0x70>)
 8007c28:	f7ff faf8 	bl	800721c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c2c:	480b      	ldr	r0, [pc, #44]	@ (8007c5c <prvInitialiseTaskLists+0x74>)
 8007c2e:	f7ff faf5 	bl	800721c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c32:	4b0b      	ldr	r3, [pc, #44]	@ (8007c60 <prvInitialiseTaskLists+0x78>)
 8007c34:	4a05      	ldr	r2, [pc, #20]	@ (8007c4c <prvInitialiseTaskLists+0x64>)
 8007c36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c38:	4b0a      	ldr	r3, [pc, #40]	@ (8007c64 <prvInitialiseTaskLists+0x7c>)
 8007c3a:	4a05      	ldr	r2, [pc, #20]	@ (8007c50 <prvInitialiseTaskLists+0x68>)
 8007c3c:	601a      	str	r2, [r3, #0]
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	200006a4 	.word	0x200006a4
 8007c4c:	20000730 	.word	0x20000730
 8007c50:	20000744 	.word	0x20000744
 8007c54:	20000760 	.word	0x20000760
 8007c58:	20000774 	.word	0x20000774
 8007c5c:	2000078c 	.word	0x2000078c
 8007c60:	20000758 	.word	0x20000758
 8007c64:	2000075c 	.word	0x2000075c

08007c68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c6e:	e019      	b.n	8007ca4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c70:	f000 fa12 	bl	8008098 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c74:	4b10      	ldr	r3, [pc, #64]	@ (8007cb8 <prvCheckTasksWaitingTermination+0x50>)
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff fb55 	bl	8007330 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c86:	4b0d      	ldr	r3, [pc, #52]	@ (8007cbc <prvCheckTasksWaitingTermination+0x54>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8007cbc <prvCheckTasksWaitingTermination+0x54>)
 8007c8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c90:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc0 <prvCheckTasksWaitingTermination+0x58>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	4a0a      	ldr	r2, [pc, #40]	@ (8007cc0 <prvCheckTasksWaitingTermination+0x58>)
 8007c98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c9a:	f000 fa2f 	bl	80080fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f810 	bl	8007cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ca4:	4b06      	ldr	r3, [pc, #24]	@ (8007cc0 <prvCheckTasksWaitingTermination+0x58>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e1      	bne.n	8007c70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20000774 	.word	0x20000774
 8007cbc:	200007a0 	.word	0x200007a0
 8007cc0:	20000788 	.word	0x20000788

08007cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	334c      	adds	r3, #76	@ 0x4c
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 fa3b 	bl	800914c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d108      	bne.n	8007cf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fb85 	bl	80083f4 <vPortFree>
				vPortFree( pxTCB );
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fb82 	bl	80083f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007cf0:	e019      	b.n	8007d26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d103      	bne.n	8007d04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fb79 	bl	80083f4 <vPortFree>
	}
 8007d02:	e010      	b.n	8007d26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d00b      	beq.n	8007d26 <prvDeleteTCB+0x62>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	60fb      	str	r3, [r7, #12]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <prvDeleteTCB+0x5e>
	}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d36:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <prvResetNextTaskUnblockTime+0x38>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d104      	bne.n	8007d4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d40:	4b0a      	ldr	r3, [pc, #40]	@ (8007d6c <prvResetNextTaskUnblockTime+0x3c>)
 8007d42:	f04f 32ff 	mov.w	r2, #4294967295
 8007d46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d48:	e008      	b.n	8007d5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d4a:	4b07      	ldr	r3, [pc, #28]	@ (8007d68 <prvResetNextTaskUnblockTime+0x38>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	4a04      	ldr	r2, [pc, #16]	@ (8007d6c <prvResetNextTaskUnblockTime+0x3c>)
 8007d5a:	6013      	str	r3, [r2, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	20000758 	.word	0x20000758
 8007d6c:	200007c0 	.word	0x200007c0

08007d70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d7a:	4b29      	ldr	r3, [pc, #164]	@ (8007e20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d80:	4b28      	ldr	r3, [pc, #160]	@ (8007e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3304      	adds	r3, #4
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fad2 	bl	8007330 <uxListRemove>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10b      	bne.n	8007daa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d92:	4b24      	ldr	r3, [pc, #144]	@ (8007e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d98:	2201      	movs	r2, #1
 8007d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9e:	43da      	mvns	r2, r3
 8007da0:	4b21      	ldr	r3, [pc, #132]	@ (8007e28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4013      	ands	r3, r2
 8007da6:	4a20      	ldr	r2, [pc, #128]	@ (8007e28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007da8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db0:	d10a      	bne.n	8007dc8 <prvAddCurrentTaskToDelayedList+0x58>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d007      	beq.n	8007dc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007db8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	481a      	ldr	r0, [pc, #104]	@ (8007e2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007dc2:	f7ff fa58 	bl	8007276 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dc6:	e026      	b.n	8007e16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4413      	add	r3, r2
 8007dce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dd0:	4b14      	ldr	r3, [pc, #80]	@ (8007e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d209      	bcs.n	8007df4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007de0:	4b13      	ldr	r3, [pc, #76]	@ (8007e30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	4b0f      	ldr	r3, [pc, #60]	@ (8007e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3304      	adds	r3, #4
 8007dea:	4619      	mov	r1, r3
 8007dec:	4610      	mov	r0, r2
 8007dee:	f7ff fa66 	bl	80072be <vListInsert>
}
 8007df2:	e010      	b.n	8007e16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007df4:	4b0f      	ldr	r3, [pc, #60]	@ (8007e34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	4b0a      	ldr	r3, [pc, #40]	@ (8007e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4610      	mov	r0, r2
 8007e02:	f7ff fa5c 	bl	80072be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e06:	4b0c      	ldr	r3, [pc, #48]	@ (8007e38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d202      	bcs.n	8007e16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e10:	4a09      	ldr	r2, [pc, #36]	@ (8007e38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	6013      	str	r3, [r2, #0]
}
 8007e16:	bf00      	nop
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	200007a4 	.word	0x200007a4
 8007e24:	200006a0 	.word	0x200006a0
 8007e28:	200007a8 	.word	0x200007a8
 8007e2c:	2000078c 	.word	0x2000078c
 8007e30:	2000075c 	.word	0x2000075c
 8007e34:	20000758 	.word	0x20000758
 8007e38:	200007c0 	.word	0x200007c0

08007e3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3b04      	subs	r3, #4
 8007e4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3b04      	subs	r3, #4
 8007e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f023 0201 	bic.w	r2, r3, #1
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3b04      	subs	r3, #4
 8007e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea0 <pxPortInitialiseStack+0x64>)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3b14      	subs	r3, #20
 8007e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3b04      	subs	r3, #4
 8007e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f06f 0202 	mvn.w	r2, #2
 8007e8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3b20      	subs	r3, #32
 8007e90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e92:	68fb      	ldr	r3, [r7, #12]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	08007ea5 	.word	0x08007ea5

08007ea4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eae:	4b13      	ldr	r3, [pc, #76]	@ (8007efc <prvTaskExitError+0x58>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb6:	d00b      	beq.n	8007ed0 <prvTaskExitError+0x2c>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	60fb      	str	r3, [r7, #12]
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	e7fd      	b.n	8007ecc <prvTaskExitError+0x28>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	60bb      	str	r3, [r7, #8]
}
 8007ee2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ee4:	bf00      	nop
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d0fc      	beq.n	8007ee6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eec:	bf00      	nop
 8007eee:	bf00      	nop
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	2000001c 	.word	0x2000001c

08007f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f00:	4b07      	ldr	r3, [pc, #28]	@ (8007f20 <pxCurrentTCBConst2>)
 8007f02:	6819      	ldr	r1, [r3, #0]
 8007f04:	6808      	ldr	r0, [r1, #0]
 8007f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0a:	f380 8809 	msr	PSP, r0
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f04f 0000 	mov.w	r0, #0
 8007f16:	f380 8811 	msr	BASEPRI, r0
 8007f1a:	4770      	bx	lr
 8007f1c:	f3af 8000 	nop.w

08007f20 <pxCurrentTCBConst2>:
 8007f20:	200006a0 	.word	0x200006a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop

08007f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f28:	4808      	ldr	r0, [pc, #32]	@ (8007f4c <prvPortStartFirstTask+0x24>)
 8007f2a:	6800      	ldr	r0, [r0, #0]
 8007f2c:	6800      	ldr	r0, [r0, #0]
 8007f2e:	f380 8808 	msr	MSP, r0
 8007f32:	f04f 0000 	mov.w	r0, #0
 8007f36:	f380 8814 	msr	CONTROL, r0
 8007f3a:	b662      	cpsie	i
 8007f3c:	b661      	cpsie	f
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	df00      	svc	0
 8007f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f4a:	bf00      	nop
 8007f4c:	e000ed08 	.word	0xe000ed08

08007f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f56:	4b47      	ldr	r3, [pc, #284]	@ (8008074 <xPortStartScheduler+0x124>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a47      	ldr	r2, [pc, #284]	@ (8008078 <xPortStartScheduler+0x128>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d10b      	bne.n	8007f78 <xPortStartScheduler+0x28>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	613b      	str	r3, [r7, #16]
}
 8007f72:	bf00      	nop
 8007f74:	bf00      	nop
 8007f76:	e7fd      	b.n	8007f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f78:	4b3e      	ldr	r3, [pc, #248]	@ (8008074 <xPortStartScheduler+0x124>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800807c <xPortStartScheduler+0x12c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d10b      	bne.n	8007f9a <xPortStartScheduler+0x4a>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60fb      	str	r3, [r7, #12]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f9a:	4b39      	ldr	r3, [pc, #228]	@ (8008080 <xPortStartScheduler+0x130>)
 8007f9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	22ff      	movs	r2, #255	@ 0xff
 8007faa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	4b31      	ldr	r3, [pc, #196]	@ (8008084 <xPortStartScheduler+0x134>)
 8007fc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fc2:	4b31      	ldr	r3, [pc, #196]	@ (8008088 <xPortStartScheduler+0x138>)
 8007fc4:	2207      	movs	r2, #7
 8007fc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fc8:	e009      	b.n	8007fde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007fca:	4b2f      	ldr	r3, [pc, #188]	@ (8008088 <xPortStartScheduler+0x138>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8008088 <xPortStartScheduler+0x138>)
 8007fd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	005b      	lsls	r3, r3, #1
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fde:	78fb      	ldrb	r3, [r7, #3]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe6:	2b80      	cmp	r3, #128	@ 0x80
 8007fe8:	d0ef      	beq.n	8007fca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fea:	4b27      	ldr	r3, [pc, #156]	@ (8008088 <xPortStartScheduler+0x138>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f1c3 0307 	rsb	r3, r3, #7
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d00b      	beq.n	800800e <xPortStartScheduler+0xbe>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	60bb      	str	r3, [r7, #8]
}
 8008008:	bf00      	nop
 800800a:	bf00      	nop
 800800c:	e7fd      	b.n	800800a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800800e:	4b1e      	ldr	r3, [pc, #120]	@ (8008088 <xPortStartScheduler+0x138>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	021b      	lsls	r3, r3, #8
 8008014:	4a1c      	ldr	r2, [pc, #112]	@ (8008088 <xPortStartScheduler+0x138>)
 8008016:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008018:	4b1b      	ldr	r3, [pc, #108]	@ (8008088 <xPortStartScheduler+0x138>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008020:	4a19      	ldr	r2, [pc, #100]	@ (8008088 <xPortStartScheduler+0x138>)
 8008022:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	b2da      	uxtb	r2, r3
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800802c:	4b17      	ldr	r3, [pc, #92]	@ (800808c <xPortStartScheduler+0x13c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a16      	ldr	r2, [pc, #88]	@ (800808c <xPortStartScheduler+0x13c>)
 8008032:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008036:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008038:	4b14      	ldr	r3, [pc, #80]	@ (800808c <xPortStartScheduler+0x13c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a13      	ldr	r2, [pc, #76]	@ (800808c <xPortStartScheduler+0x13c>)
 800803e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008042:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008044:	f000 f8da 	bl	80081fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008048:	4b11      	ldr	r3, [pc, #68]	@ (8008090 <xPortStartScheduler+0x140>)
 800804a:	2200      	movs	r2, #0
 800804c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800804e:	f000 f8f9 	bl	8008244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008052:	4b10      	ldr	r3, [pc, #64]	@ (8008094 <xPortStartScheduler+0x144>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a0f      	ldr	r2, [pc, #60]	@ (8008094 <xPortStartScheduler+0x144>)
 8008058:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800805c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800805e:	f7ff ff63 	bl	8007f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008062:	f7ff fd45 	bl	8007af0 <vTaskSwitchContext>
	prvTaskExitError();
 8008066:	f7ff ff1d 	bl	8007ea4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	e000ed00 	.word	0xe000ed00
 8008078:	410fc271 	.word	0x410fc271
 800807c:	410fc270 	.word	0x410fc270
 8008080:	e000e400 	.word	0xe000e400
 8008084:	200007cc 	.word	0x200007cc
 8008088:	200007d0 	.word	0x200007d0
 800808c:	e000ed20 	.word	0xe000ed20
 8008090:	2000001c 	.word	0x2000001c
 8008094:	e000ef34 	.word	0xe000ef34

08008098 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	607b      	str	r3, [r7, #4]
}
 80080b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080b2:	4b10      	ldr	r3, [pc, #64]	@ (80080f4 <vPortEnterCritical+0x5c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3301      	adds	r3, #1
 80080b8:	4a0e      	ldr	r2, [pc, #56]	@ (80080f4 <vPortEnterCritical+0x5c>)
 80080ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080bc:	4b0d      	ldr	r3, [pc, #52]	@ (80080f4 <vPortEnterCritical+0x5c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d110      	bne.n	80080e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080c4:	4b0c      	ldr	r3, [pc, #48]	@ (80080f8 <vPortEnterCritical+0x60>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00b      	beq.n	80080e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	603b      	str	r3, [r7, #0]
}
 80080e0:	bf00      	nop
 80080e2:	bf00      	nop
 80080e4:	e7fd      	b.n	80080e2 <vPortEnterCritical+0x4a>
	}
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	2000001c 	.word	0x2000001c
 80080f8:	e000ed04 	.word	0xe000ed04

080080fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008102:	4b12      	ldr	r3, [pc, #72]	@ (800814c <vPortExitCritical+0x50>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10b      	bne.n	8008122 <vPortExitCritical+0x26>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	607b      	str	r3, [r7, #4]
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	e7fd      	b.n	800811e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008122:	4b0a      	ldr	r3, [pc, #40]	@ (800814c <vPortExitCritical+0x50>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3b01      	subs	r3, #1
 8008128:	4a08      	ldr	r2, [pc, #32]	@ (800814c <vPortExitCritical+0x50>)
 800812a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800812c:	4b07      	ldr	r3, [pc, #28]	@ (800814c <vPortExitCritical+0x50>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d105      	bne.n	8008140 <vPortExitCritical+0x44>
 8008134:	2300      	movs	r3, #0
 8008136:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800813e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	2000001c 	.word	0x2000001c

08008150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008150:	f3ef 8009 	mrs	r0, PSP
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	4b15      	ldr	r3, [pc, #84]	@ (80081b0 <pxCurrentTCBConst>)
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	f01e 0f10 	tst.w	lr, #16
 8008160:	bf08      	it	eq
 8008162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816a:	6010      	str	r0, [r2, #0]
 800816c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008170:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008174:	f380 8811 	msr	BASEPRI, r0
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f7ff fcb6 	bl	8007af0 <vTaskSwitchContext>
 8008184:	f04f 0000 	mov.w	r0, #0
 8008188:	f380 8811 	msr	BASEPRI, r0
 800818c:	bc09      	pop	{r0, r3}
 800818e:	6819      	ldr	r1, [r3, #0]
 8008190:	6808      	ldr	r0, [r1, #0]
 8008192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008196:	f01e 0f10 	tst.w	lr, #16
 800819a:	bf08      	it	eq
 800819c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081a0:	f380 8809 	msr	PSP, r0
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	f3af 8000 	nop.w

080081b0 <pxCurrentTCBConst>:
 80081b0:	200006a0 	.word	0x200006a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop

080081b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	607b      	str	r3, [r7, #4]
}
 80081d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081d2:	f7ff fbd3 	bl	800797c <xTaskIncrementTick>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081dc:	4b06      	ldr	r3, [pc, #24]	@ (80081f8 <SysTick_Handler+0x40>)
 80081de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	2300      	movs	r3, #0
 80081e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	f383 8811 	msr	BASEPRI, r3
}
 80081ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008200:	4b0b      	ldr	r3, [pc, #44]	@ (8008230 <vPortSetupTimerInterrupt+0x34>)
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008206:	4b0b      	ldr	r3, [pc, #44]	@ (8008234 <vPortSetupTimerInterrupt+0x38>)
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800820c:	4b0a      	ldr	r3, [pc, #40]	@ (8008238 <vPortSetupTimerInterrupt+0x3c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a0a      	ldr	r2, [pc, #40]	@ (800823c <vPortSetupTimerInterrupt+0x40>)
 8008212:	fba2 2303 	umull	r2, r3, r2, r3
 8008216:	099b      	lsrs	r3, r3, #6
 8008218:	4a09      	ldr	r2, [pc, #36]	@ (8008240 <vPortSetupTimerInterrupt+0x44>)
 800821a:	3b01      	subs	r3, #1
 800821c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800821e:	4b04      	ldr	r3, [pc, #16]	@ (8008230 <vPortSetupTimerInterrupt+0x34>)
 8008220:	2207      	movs	r2, #7
 8008222:	601a      	str	r2, [r3, #0]
}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	e000e010 	.word	0xe000e010
 8008234:	e000e018 	.word	0xe000e018
 8008238:	20000010 	.word	0x20000010
 800823c:	10624dd3 	.word	0x10624dd3
 8008240:	e000e014 	.word	0xe000e014

08008244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008244:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008254 <vPortEnableVFP+0x10>
 8008248:	6801      	ldr	r1, [r0, #0]
 800824a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800824e:	6001      	str	r1, [r0, #0]
 8008250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008252:	bf00      	nop
 8008254:	e000ed88 	.word	0xe000ed88

08008258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08a      	sub	sp, #40	@ 0x28
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008260:	2300      	movs	r3, #0
 8008262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008264:	f7ff fade 	bl	8007824 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008268:	4b5c      	ldr	r3, [pc, #368]	@ (80083dc <pvPortMalloc+0x184>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008270:	f000 f924 	bl	80084bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008274:	4b5a      	ldr	r3, [pc, #360]	@ (80083e0 <pvPortMalloc+0x188>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4013      	ands	r3, r2
 800827c:	2b00      	cmp	r3, #0
 800827e:	f040 8095 	bne.w	80083ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01e      	beq.n	80082c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008288:	2208      	movs	r2, #8
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4413      	add	r3, r2
 800828e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	2b00      	cmp	r3, #0
 8008298:	d015      	beq.n	80082c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f023 0307 	bic.w	r3, r3, #7
 80082a0:	3308      	adds	r3, #8
 80082a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <pvPortMalloc+0x6e>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	617b      	str	r3, [r7, #20]
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	e7fd      	b.n	80082c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d06f      	beq.n	80083ac <pvPortMalloc+0x154>
 80082cc:	4b45      	ldr	r3, [pc, #276]	@ (80083e4 <pvPortMalloc+0x18c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d86a      	bhi.n	80083ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082d6:	4b44      	ldr	r3, [pc, #272]	@ (80083e8 <pvPortMalloc+0x190>)
 80082d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082da:	4b43      	ldr	r3, [pc, #268]	@ (80083e8 <pvPortMalloc+0x190>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082e0:	e004      	b.n	80082ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d903      	bls.n	80082fe <pvPortMalloc+0xa6>
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1f1      	bne.n	80082e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082fe:	4b37      	ldr	r3, [pc, #220]	@ (80083dc <pvPortMalloc+0x184>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008304:	429a      	cmp	r2, r3
 8008306:	d051      	beq.n	80083ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2208      	movs	r2, #8
 800830e:	4413      	add	r3, r2
 8008310:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	1ad2      	subs	r2, r2, r3
 8008322:	2308      	movs	r3, #8
 8008324:	005b      	lsls	r3, r3, #1
 8008326:	429a      	cmp	r2, r3
 8008328:	d920      	bls.n	800836c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800832a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4413      	add	r3, r2
 8008330:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <pvPortMalloc+0xfc>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	613b      	str	r3, [r7, #16]
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	e7fd      	b.n	8008350 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	1ad2      	subs	r2, r2, r3
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008366:	69b8      	ldr	r0, [r7, #24]
 8008368:	f000 f90a 	bl	8008580 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800836c:	4b1d      	ldr	r3, [pc, #116]	@ (80083e4 <pvPortMalloc+0x18c>)
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	4a1b      	ldr	r2, [pc, #108]	@ (80083e4 <pvPortMalloc+0x18c>)
 8008378:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800837a:	4b1a      	ldr	r3, [pc, #104]	@ (80083e4 <pvPortMalloc+0x18c>)
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	4b1b      	ldr	r3, [pc, #108]	@ (80083ec <pvPortMalloc+0x194>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	429a      	cmp	r2, r3
 8008384:	d203      	bcs.n	800838e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008386:	4b17      	ldr	r3, [pc, #92]	@ (80083e4 <pvPortMalloc+0x18c>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a18      	ldr	r2, [pc, #96]	@ (80083ec <pvPortMalloc+0x194>)
 800838c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	4b13      	ldr	r3, [pc, #76]	@ (80083e0 <pvPortMalloc+0x188>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	431a      	orrs	r2, r3
 8008398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800839c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839e:	2200      	movs	r2, #0
 80083a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083a2:	4b13      	ldr	r3, [pc, #76]	@ (80083f0 <pvPortMalloc+0x198>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3301      	adds	r3, #1
 80083a8:	4a11      	ldr	r2, [pc, #68]	@ (80083f0 <pvPortMalloc+0x198>)
 80083aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083ac:	f7ff fa48 	bl	8007840 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	f003 0307 	and.w	r3, r3, #7
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <pvPortMalloc+0x17a>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	60fb      	str	r3, [r7, #12]
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	e7fd      	b.n	80083ce <pvPortMalloc+0x176>
	return pvReturn;
 80083d2:	69fb      	ldr	r3, [r7, #28]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3728      	adds	r7, #40	@ 0x28
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	200047dc 	.word	0x200047dc
 80083e0:	200047f0 	.word	0x200047f0
 80083e4:	200047e0 	.word	0x200047e0
 80083e8:	200047d4 	.word	0x200047d4
 80083ec:	200047e4 	.word	0x200047e4
 80083f0:	200047e8 	.word	0x200047e8

080083f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d04f      	beq.n	80084a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008406:	2308      	movs	r3, #8
 8008408:	425b      	negs	r3, r3
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4413      	add	r3, r2
 800840e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	4b25      	ldr	r3, [pc, #148]	@ (80084b0 <vPortFree+0xbc>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4013      	ands	r3, r2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10b      	bne.n	800843a <vPortFree+0x46>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	60fb      	str	r3, [r7, #12]
}
 8008434:	bf00      	nop
 8008436:	bf00      	nop
 8008438:	e7fd      	b.n	8008436 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <vPortFree+0x66>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	60bb      	str	r3, [r7, #8]
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
 8008458:	e7fd      	b.n	8008456 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	4b14      	ldr	r3, [pc, #80]	@ (80084b0 <vPortFree+0xbc>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4013      	ands	r3, r2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01e      	beq.n	80084a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d11a      	bne.n	80084a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	4b0e      	ldr	r3, [pc, #56]	@ (80084b0 <vPortFree+0xbc>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	43db      	mvns	r3, r3
 800847a:	401a      	ands	r2, r3
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008480:	f7ff f9d0 	bl	8007824 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	4b0a      	ldr	r3, [pc, #40]	@ (80084b4 <vPortFree+0xc0>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4413      	add	r3, r2
 800848e:	4a09      	ldr	r2, [pc, #36]	@ (80084b4 <vPortFree+0xc0>)
 8008490:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008492:	6938      	ldr	r0, [r7, #16]
 8008494:	f000 f874 	bl	8008580 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008498:	4b07      	ldr	r3, [pc, #28]	@ (80084b8 <vPortFree+0xc4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3301      	adds	r3, #1
 800849e:	4a06      	ldr	r2, [pc, #24]	@ (80084b8 <vPortFree+0xc4>)
 80084a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084a2:	f7ff f9cd 	bl	8007840 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084a6:	bf00      	nop
 80084a8:	3718      	adds	r7, #24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	200047f0 	.word	0x200047f0
 80084b4:	200047e0 	.word	0x200047e0
 80084b8:	200047ec 	.word	0x200047ec

080084bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80084c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084c8:	4b27      	ldr	r3, [pc, #156]	@ (8008568 <prvHeapInit+0xac>)
 80084ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f003 0307 	and.w	r3, r3, #7
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00c      	beq.n	80084f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3307      	adds	r3, #7
 80084da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f023 0307 	bic.w	r3, r3, #7
 80084e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008568 <prvHeapInit+0xac>)
 80084ec:	4413      	add	r3, r2
 80084ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084f4:	4a1d      	ldr	r2, [pc, #116]	@ (800856c <prvHeapInit+0xb0>)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084fa:	4b1c      	ldr	r3, [pc, #112]	@ (800856c <prvHeapInit+0xb0>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	4413      	add	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008508:	2208      	movs	r2, #8
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0307 	bic.w	r3, r3, #7
 8008516:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4a15      	ldr	r2, [pc, #84]	@ (8008570 <prvHeapInit+0xb4>)
 800851c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800851e:	4b14      	ldr	r3, [pc, #80]	@ (8008570 <prvHeapInit+0xb4>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2200      	movs	r2, #0
 8008524:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008526:	4b12      	ldr	r3, [pc, #72]	@ (8008570 <prvHeapInit+0xb4>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	1ad2      	subs	r2, r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800853c:	4b0c      	ldr	r3, [pc, #48]	@ (8008570 <prvHeapInit+0xb4>)
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	4a0a      	ldr	r2, [pc, #40]	@ (8008574 <prvHeapInit+0xb8>)
 800854a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	4a09      	ldr	r2, [pc, #36]	@ (8008578 <prvHeapInit+0xbc>)
 8008552:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008554:	4b09      	ldr	r3, [pc, #36]	@ (800857c <prvHeapInit+0xc0>)
 8008556:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800855a:	601a      	str	r2, [r3, #0]
}
 800855c:	bf00      	nop
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	200007d4 	.word	0x200007d4
 800856c:	200047d4 	.word	0x200047d4
 8008570:	200047dc 	.word	0x200047dc
 8008574:	200047e4 	.word	0x200047e4
 8008578:	200047e0 	.word	0x200047e0
 800857c:	200047f0 	.word	0x200047f0

08008580 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008588:	4b28      	ldr	r3, [pc, #160]	@ (800862c <prvInsertBlockIntoFreeList+0xac>)
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	e002      	b.n	8008594 <prvInsertBlockIntoFreeList+0x14>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	429a      	cmp	r2, r3
 800859c:	d8f7      	bhi.n	800858e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	4413      	add	r3, r2
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d108      	bne.n	80085c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	441a      	add	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	441a      	add	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d118      	bne.n	8008608 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	4b15      	ldr	r3, [pc, #84]	@ (8008630 <prvInsertBlockIntoFreeList+0xb0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d00d      	beq.n	80085fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	441a      	add	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	e008      	b.n	8008610 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008630 <prvInsertBlockIntoFreeList+0xb0>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	e003      	b.n	8008610 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	429a      	cmp	r2, r3
 8008616:	d002      	beq.n	800861e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800861e:	bf00      	nop
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	200047d4 	.word	0x200047d4
 8008630:	200047dc 	.word	0x200047dc

08008634 <__cvt>:
 8008634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008638:	ec57 6b10 	vmov	r6, r7, d0
 800863c:	2f00      	cmp	r7, #0
 800863e:	460c      	mov	r4, r1
 8008640:	4619      	mov	r1, r3
 8008642:	463b      	mov	r3, r7
 8008644:	bfbb      	ittet	lt
 8008646:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800864a:	461f      	movlt	r7, r3
 800864c:	2300      	movge	r3, #0
 800864e:	232d      	movlt	r3, #45	@ 0x2d
 8008650:	700b      	strb	r3, [r1, #0]
 8008652:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008654:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008658:	4691      	mov	r9, r2
 800865a:	f023 0820 	bic.w	r8, r3, #32
 800865e:	bfbc      	itt	lt
 8008660:	4632      	movlt	r2, r6
 8008662:	4616      	movlt	r6, r2
 8008664:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008668:	d005      	beq.n	8008676 <__cvt+0x42>
 800866a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800866e:	d100      	bne.n	8008672 <__cvt+0x3e>
 8008670:	3401      	adds	r4, #1
 8008672:	2102      	movs	r1, #2
 8008674:	e000      	b.n	8008678 <__cvt+0x44>
 8008676:	2103      	movs	r1, #3
 8008678:	ab03      	add	r3, sp, #12
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	ab02      	add	r3, sp, #8
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	ec47 6b10 	vmov	d0, r6, r7
 8008684:	4653      	mov	r3, sl
 8008686:	4622      	mov	r2, r4
 8008688:	f000 feb2 	bl	80093f0 <_dtoa_r>
 800868c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008690:	4605      	mov	r5, r0
 8008692:	d119      	bne.n	80086c8 <__cvt+0x94>
 8008694:	f019 0f01 	tst.w	r9, #1
 8008698:	d00e      	beq.n	80086b8 <__cvt+0x84>
 800869a:	eb00 0904 	add.w	r9, r0, r4
 800869e:	2200      	movs	r2, #0
 80086a0:	2300      	movs	r3, #0
 80086a2:	4630      	mov	r0, r6
 80086a4:	4639      	mov	r1, r7
 80086a6:	f7f8 fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80086aa:	b108      	cbz	r0, 80086b0 <__cvt+0x7c>
 80086ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80086b0:	2230      	movs	r2, #48	@ 0x30
 80086b2:	9b03      	ldr	r3, [sp, #12]
 80086b4:	454b      	cmp	r3, r9
 80086b6:	d31e      	bcc.n	80086f6 <__cvt+0xc2>
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086bc:	1b5b      	subs	r3, r3, r5
 80086be:	4628      	mov	r0, r5
 80086c0:	6013      	str	r3, [r2, #0]
 80086c2:	b004      	add	sp, #16
 80086c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80086cc:	eb00 0904 	add.w	r9, r0, r4
 80086d0:	d1e5      	bne.n	800869e <__cvt+0x6a>
 80086d2:	7803      	ldrb	r3, [r0, #0]
 80086d4:	2b30      	cmp	r3, #48	@ 0x30
 80086d6:	d10a      	bne.n	80086ee <__cvt+0xba>
 80086d8:	2200      	movs	r2, #0
 80086da:	2300      	movs	r3, #0
 80086dc:	4630      	mov	r0, r6
 80086de:	4639      	mov	r1, r7
 80086e0:	f7f8 f9f2 	bl	8000ac8 <__aeabi_dcmpeq>
 80086e4:	b918      	cbnz	r0, 80086ee <__cvt+0xba>
 80086e6:	f1c4 0401 	rsb	r4, r4, #1
 80086ea:	f8ca 4000 	str.w	r4, [sl]
 80086ee:	f8da 3000 	ldr.w	r3, [sl]
 80086f2:	4499      	add	r9, r3
 80086f4:	e7d3      	b.n	800869e <__cvt+0x6a>
 80086f6:	1c59      	adds	r1, r3, #1
 80086f8:	9103      	str	r1, [sp, #12]
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	e7d9      	b.n	80086b2 <__cvt+0x7e>

080086fe <__exponent>:
 80086fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008700:	2900      	cmp	r1, #0
 8008702:	bfba      	itte	lt
 8008704:	4249      	neglt	r1, r1
 8008706:	232d      	movlt	r3, #45	@ 0x2d
 8008708:	232b      	movge	r3, #43	@ 0x2b
 800870a:	2909      	cmp	r1, #9
 800870c:	7002      	strb	r2, [r0, #0]
 800870e:	7043      	strb	r3, [r0, #1]
 8008710:	dd29      	ble.n	8008766 <__exponent+0x68>
 8008712:	f10d 0307 	add.w	r3, sp, #7
 8008716:	461d      	mov	r5, r3
 8008718:	270a      	movs	r7, #10
 800871a:	461a      	mov	r2, r3
 800871c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008720:	fb07 1416 	mls	r4, r7, r6, r1
 8008724:	3430      	adds	r4, #48	@ 0x30
 8008726:	f802 4c01 	strb.w	r4, [r2, #-1]
 800872a:	460c      	mov	r4, r1
 800872c:	2c63      	cmp	r4, #99	@ 0x63
 800872e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008732:	4631      	mov	r1, r6
 8008734:	dcf1      	bgt.n	800871a <__exponent+0x1c>
 8008736:	3130      	adds	r1, #48	@ 0x30
 8008738:	1e94      	subs	r4, r2, #2
 800873a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800873e:	1c41      	adds	r1, r0, #1
 8008740:	4623      	mov	r3, r4
 8008742:	42ab      	cmp	r3, r5
 8008744:	d30a      	bcc.n	800875c <__exponent+0x5e>
 8008746:	f10d 0309 	add.w	r3, sp, #9
 800874a:	1a9b      	subs	r3, r3, r2
 800874c:	42ac      	cmp	r4, r5
 800874e:	bf88      	it	hi
 8008750:	2300      	movhi	r3, #0
 8008752:	3302      	adds	r3, #2
 8008754:	4403      	add	r3, r0
 8008756:	1a18      	subs	r0, r3, r0
 8008758:	b003      	add	sp, #12
 800875a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008760:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008764:	e7ed      	b.n	8008742 <__exponent+0x44>
 8008766:	2330      	movs	r3, #48	@ 0x30
 8008768:	3130      	adds	r1, #48	@ 0x30
 800876a:	7083      	strb	r3, [r0, #2]
 800876c:	70c1      	strb	r1, [r0, #3]
 800876e:	1d03      	adds	r3, r0, #4
 8008770:	e7f1      	b.n	8008756 <__exponent+0x58>
	...

08008774 <_printf_float>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	b08d      	sub	sp, #52	@ 0x34
 800877a:	460c      	mov	r4, r1
 800877c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008780:	4616      	mov	r6, r2
 8008782:	461f      	mov	r7, r3
 8008784:	4605      	mov	r5, r0
 8008786:	f000 fccd 	bl	8009124 <_localeconv_r>
 800878a:	6803      	ldr	r3, [r0, #0]
 800878c:	9304      	str	r3, [sp, #16]
 800878e:	4618      	mov	r0, r3
 8008790:	f7f7 fd6e 	bl	8000270 <strlen>
 8008794:	2300      	movs	r3, #0
 8008796:	930a      	str	r3, [sp, #40]	@ 0x28
 8008798:	f8d8 3000 	ldr.w	r3, [r8]
 800879c:	9005      	str	r0, [sp, #20]
 800879e:	3307      	adds	r3, #7
 80087a0:	f023 0307 	bic.w	r3, r3, #7
 80087a4:	f103 0208 	add.w	r2, r3, #8
 80087a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80087ac:	f8d4 b000 	ldr.w	fp, [r4]
 80087b0:	f8c8 2000 	str.w	r2, [r8]
 80087b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80087bc:	9307      	str	r3, [sp, #28]
 80087be:	f8cd 8018 	str.w	r8, [sp, #24]
 80087c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80087c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087ca:	4b9c      	ldr	r3, [pc, #624]	@ (8008a3c <_printf_float+0x2c8>)
 80087cc:	f04f 32ff 	mov.w	r2, #4294967295
 80087d0:	f7f8 f9ac 	bl	8000b2c <__aeabi_dcmpun>
 80087d4:	bb70      	cbnz	r0, 8008834 <_printf_float+0xc0>
 80087d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087da:	4b98      	ldr	r3, [pc, #608]	@ (8008a3c <_printf_float+0x2c8>)
 80087dc:	f04f 32ff 	mov.w	r2, #4294967295
 80087e0:	f7f8 f986 	bl	8000af0 <__aeabi_dcmple>
 80087e4:	bb30      	cbnz	r0, 8008834 <_printf_float+0xc0>
 80087e6:	2200      	movs	r2, #0
 80087e8:	2300      	movs	r3, #0
 80087ea:	4640      	mov	r0, r8
 80087ec:	4649      	mov	r1, r9
 80087ee:	f7f8 f975 	bl	8000adc <__aeabi_dcmplt>
 80087f2:	b110      	cbz	r0, 80087fa <_printf_float+0x86>
 80087f4:	232d      	movs	r3, #45	@ 0x2d
 80087f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087fa:	4a91      	ldr	r2, [pc, #580]	@ (8008a40 <_printf_float+0x2cc>)
 80087fc:	4b91      	ldr	r3, [pc, #580]	@ (8008a44 <_printf_float+0x2d0>)
 80087fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008802:	bf94      	ite	ls
 8008804:	4690      	movls	r8, r2
 8008806:	4698      	movhi	r8, r3
 8008808:	2303      	movs	r3, #3
 800880a:	6123      	str	r3, [r4, #16]
 800880c:	f02b 0304 	bic.w	r3, fp, #4
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	f04f 0900 	mov.w	r9, #0
 8008816:	9700      	str	r7, [sp, #0]
 8008818:	4633      	mov	r3, r6
 800881a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800881c:	4621      	mov	r1, r4
 800881e:	4628      	mov	r0, r5
 8008820:	f000 f9d2 	bl	8008bc8 <_printf_common>
 8008824:	3001      	adds	r0, #1
 8008826:	f040 808d 	bne.w	8008944 <_printf_float+0x1d0>
 800882a:	f04f 30ff 	mov.w	r0, #4294967295
 800882e:	b00d      	add	sp, #52	@ 0x34
 8008830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008834:	4642      	mov	r2, r8
 8008836:	464b      	mov	r3, r9
 8008838:	4640      	mov	r0, r8
 800883a:	4649      	mov	r1, r9
 800883c:	f7f8 f976 	bl	8000b2c <__aeabi_dcmpun>
 8008840:	b140      	cbz	r0, 8008854 <_printf_float+0xe0>
 8008842:	464b      	mov	r3, r9
 8008844:	2b00      	cmp	r3, #0
 8008846:	bfbc      	itt	lt
 8008848:	232d      	movlt	r3, #45	@ 0x2d
 800884a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800884e:	4a7e      	ldr	r2, [pc, #504]	@ (8008a48 <_printf_float+0x2d4>)
 8008850:	4b7e      	ldr	r3, [pc, #504]	@ (8008a4c <_printf_float+0x2d8>)
 8008852:	e7d4      	b.n	80087fe <_printf_float+0x8a>
 8008854:	6863      	ldr	r3, [r4, #4]
 8008856:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800885a:	9206      	str	r2, [sp, #24]
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	d13b      	bne.n	80088d8 <_printf_float+0x164>
 8008860:	2306      	movs	r3, #6
 8008862:	6063      	str	r3, [r4, #4]
 8008864:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008868:	2300      	movs	r3, #0
 800886a:	6022      	str	r2, [r4, #0]
 800886c:	9303      	str	r3, [sp, #12]
 800886e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008870:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008874:	ab09      	add	r3, sp, #36	@ 0x24
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	6861      	ldr	r1, [r4, #4]
 800887a:	ec49 8b10 	vmov	d0, r8, r9
 800887e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008882:	4628      	mov	r0, r5
 8008884:	f7ff fed6 	bl	8008634 <__cvt>
 8008888:	9b06      	ldr	r3, [sp, #24]
 800888a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800888c:	2b47      	cmp	r3, #71	@ 0x47
 800888e:	4680      	mov	r8, r0
 8008890:	d129      	bne.n	80088e6 <_printf_float+0x172>
 8008892:	1cc8      	adds	r0, r1, #3
 8008894:	db02      	blt.n	800889c <_printf_float+0x128>
 8008896:	6863      	ldr	r3, [r4, #4]
 8008898:	4299      	cmp	r1, r3
 800889a:	dd41      	ble.n	8008920 <_printf_float+0x1ac>
 800889c:	f1aa 0a02 	sub.w	sl, sl, #2
 80088a0:	fa5f fa8a 	uxtb.w	sl, sl
 80088a4:	3901      	subs	r1, #1
 80088a6:	4652      	mov	r2, sl
 80088a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80088ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80088ae:	f7ff ff26 	bl	80086fe <__exponent>
 80088b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088b4:	1813      	adds	r3, r2, r0
 80088b6:	2a01      	cmp	r2, #1
 80088b8:	4681      	mov	r9, r0
 80088ba:	6123      	str	r3, [r4, #16]
 80088bc:	dc02      	bgt.n	80088c4 <_printf_float+0x150>
 80088be:	6822      	ldr	r2, [r4, #0]
 80088c0:	07d2      	lsls	r2, r2, #31
 80088c2:	d501      	bpl.n	80088c8 <_printf_float+0x154>
 80088c4:	3301      	adds	r3, #1
 80088c6:	6123      	str	r3, [r4, #16]
 80088c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0a2      	beq.n	8008816 <_printf_float+0xa2>
 80088d0:	232d      	movs	r3, #45	@ 0x2d
 80088d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088d6:	e79e      	b.n	8008816 <_printf_float+0xa2>
 80088d8:	9a06      	ldr	r2, [sp, #24]
 80088da:	2a47      	cmp	r2, #71	@ 0x47
 80088dc:	d1c2      	bne.n	8008864 <_printf_float+0xf0>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1c0      	bne.n	8008864 <_printf_float+0xf0>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e7bd      	b.n	8008862 <_printf_float+0xee>
 80088e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80088ea:	d9db      	bls.n	80088a4 <_printf_float+0x130>
 80088ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80088f0:	d118      	bne.n	8008924 <_printf_float+0x1b0>
 80088f2:	2900      	cmp	r1, #0
 80088f4:	6863      	ldr	r3, [r4, #4]
 80088f6:	dd0b      	ble.n	8008910 <_printf_float+0x19c>
 80088f8:	6121      	str	r1, [r4, #16]
 80088fa:	b913      	cbnz	r3, 8008902 <_printf_float+0x18e>
 80088fc:	6822      	ldr	r2, [r4, #0]
 80088fe:	07d0      	lsls	r0, r2, #31
 8008900:	d502      	bpl.n	8008908 <_printf_float+0x194>
 8008902:	3301      	adds	r3, #1
 8008904:	440b      	add	r3, r1
 8008906:	6123      	str	r3, [r4, #16]
 8008908:	65a1      	str	r1, [r4, #88]	@ 0x58
 800890a:	f04f 0900 	mov.w	r9, #0
 800890e:	e7db      	b.n	80088c8 <_printf_float+0x154>
 8008910:	b913      	cbnz	r3, 8008918 <_printf_float+0x1a4>
 8008912:	6822      	ldr	r2, [r4, #0]
 8008914:	07d2      	lsls	r2, r2, #31
 8008916:	d501      	bpl.n	800891c <_printf_float+0x1a8>
 8008918:	3302      	adds	r3, #2
 800891a:	e7f4      	b.n	8008906 <_printf_float+0x192>
 800891c:	2301      	movs	r3, #1
 800891e:	e7f2      	b.n	8008906 <_printf_float+0x192>
 8008920:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008926:	4299      	cmp	r1, r3
 8008928:	db05      	blt.n	8008936 <_printf_float+0x1c2>
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	6121      	str	r1, [r4, #16]
 800892e:	07d8      	lsls	r0, r3, #31
 8008930:	d5ea      	bpl.n	8008908 <_printf_float+0x194>
 8008932:	1c4b      	adds	r3, r1, #1
 8008934:	e7e7      	b.n	8008906 <_printf_float+0x192>
 8008936:	2900      	cmp	r1, #0
 8008938:	bfd4      	ite	le
 800893a:	f1c1 0202 	rsble	r2, r1, #2
 800893e:	2201      	movgt	r2, #1
 8008940:	4413      	add	r3, r2
 8008942:	e7e0      	b.n	8008906 <_printf_float+0x192>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	055a      	lsls	r2, r3, #21
 8008948:	d407      	bmi.n	800895a <_printf_float+0x1e6>
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	4642      	mov	r2, r8
 800894e:	4631      	mov	r1, r6
 8008950:	4628      	mov	r0, r5
 8008952:	47b8      	blx	r7
 8008954:	3001      	adds	r0, #1
 8008956:	d12b      	bne.n	80089b0 <_printf_float+0x23c>
 8008958:	e767      	b.n	800882a <_printf_float+0xb6>
 800895a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800895e:	f240 80dd 	bls.w	8008b1c <_printf_float+0x3a8>
 8008962:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008966:	2200      	movs	r2, #0
 8008968:	2300      	movs	r3, #0
 800896a:	f7f8 f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800896e:	2800      	cmp	r0, #0
 8008970:	d033      	beq.n	80089da <_printf_float+0x266>
 8008972:	4a37      	ldr	r2, [pc, #220]	@ (8008a50 <_printf_float+0x2dc>)
 8008974:	2301      	movs	r3, #1
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	f43f af54 	beq.w	800882a <_printf_float+0xb6>
 8008982:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008986:	4543      	cmp	r3, r8
 8008988:	db02      	blt.n	8008990 <_printf_float+0x21c>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	07d8      	lsls	r0, r3, #31
 800898e:	d50f      	bpl.n	80089b0 <_printf_float+0x23c>
 8008990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008994:	4631      	mov	r1, r6
 8008996:	4628      	mov	r0, r5
 8008998:	47b8      	blx	r7
 800899a:	3001      	adds	r0, #1
 800899c:	f43f af45 	beq.w	800882a <_printf_float+0xb6>
 80089a0:	f04f 0900 	mov.w	r9, #0
 80089a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80089a8:	f104 0a1a 	add.w	sl, r4, #26
 80089ac:	45c8      	cmp	r8, r9
 80089ae:	dc09      	bgt.n	80089c4 <_printf_float+0x250>
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	079b      	lsls	r3, r3, #30
 80089b4:	f100 8103 	bmi.w	8008bbe <_printf_float+0x44a>
 80089b8:	68e0      	ldr	r0, [r4, #12]
 80089ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089bc:	4298      	cmp	r0, r3
 80089be:	bfb8      	it	lt
 80089c0:	4618      	movlt	r0, r3
 80089c2:	e734      	b.n	800882e <_printf_float+0xba>
 80089c4:	2301      	movs	r3, #1
 80089c6:	4652      	mov	r2, sl
 80089c8:	4631      	mov	r1, r6
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	f43f af2b 	beq.w	800882a <_printf_float+0xb6>
 80089d4:	f109 0901 	add.w	r9, r9, #1
 80089d8:	e7e8      	b.n	80089ac <_printf_float+0x238>
 80089da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089dc:	2b00      	cmp	r3, #0
 80089de:	dc39      	bgt.n	8008a54 <_printf_float+0x2e0>
 80089e0:	4a1b      	ldr	r2, [pc, #108]	@ (8008a50 <_printf_float+0x2dc>)
 80089e2:	2301      	movs	r3, #1
 80089e4:	4631      	mov	r1, r6
 80089e6:	4628      	mov	r0, r5
 80089e8:	47b8      	blx	r7
 80089ea:	3001      	adds	r0, #1
 80089ec:	f43f af1d 	beq.w	800882a <_printf_float+0xb6>
 80089f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80089f4:	ea59 0303 	orrs.w	r3, r9, r3
 80089f8:	d102      	bne.n	8008a00 <_printf_float+0x28c>
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	07d9      	lsls	r1, r3, #31
 80089fe:	d5d7      	bpl.n	80089b0 <_printf_float+0x23c>
 8008a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a04:	4631      	mov	r1, r6
 8008a06:	4628      	mov	r0, r5
 8008a08:	47b8      	blx	r7
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	f43f af0d 	beq.w	800882a <_printf_float+0xb6>
 8008a10:	f04f 0a00 	mov.w	sl, #0
 8008a14:	f104 0b1a 	add.w	fp, r4, #26
 8008a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a1a:	425b      	negs	r3, r3
 8008a1c:	4553      	cmp	r3, sl
 8008a1e:	dc01      	bgt.n	8008a24 <_printf_float+0x2b0>
 8008a20:	464b      	mov	r3, r9
 8008a22:	e793      	b.n	800894c <_printf_float+0x1d8>
 8008a24:	2301      	movs	r3, #1
 8008a26:	465a      	mov	r2, fp
 8008a28:	4631      	mov	r1, r6
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	47b8      	blx	r7
 8008a2e:	3001      	adds	r0, #1
 8008a30:	f43f aefb 	beq.w	800882a <_printf_float+0xb6>
 8008a34:	f10a 0a01 	add.w	sl, sl, #1
 8008a38:	e7ee      	b.n	8008a18 <_printf_float+0x2a4>
 8008a3a:	bf00      	nop
 8008a3c:	7fefffff 	.word	0x7fefffff
 8008a40:	0800b1dc 	.word	0x0800b1dc
 8008a44:	0800b1e0 	.word	0x0800b1e0
 8008a48:	0800b1e4 	.word	0x0800b1e4
 8008a4c:	0800b1e8 	.word	0x0800b1e8
 8008a50:	0800b1ec 	.word	0x0800b1ec
 8008a54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008a5a:	4553      	cmp	r3, sl
 8008a5c:	bfa8      	it	ge
 8008a5e:	4653      	movge	r3, sl
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	4699      	mov	r9, r3
 8008a64:	dc36      	bgt.n	8008ad4 <_printf_float+0x360>
 8008a66:	f04f 0b00 	mov.w	fp, #0
 8008a6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a6e:	f104 021a 	add.w	r2, r4, #26
 8008a72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a74:	9306      	str	r3, [sp, #24]
 8008a76:	eba3 0309 	sub.w	r3, r3, r9
 8008a7a:	455b      	cmp	r3, fp
 8008a7c:	dc31      	bgt.n	8008ae2 <_printf_float+0x36e>
 8008a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a80:	459a      	cmp	sl, r3
 8008a82:	dc3a      	bgt.n	8008afa <_printf_float+0x386>
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	07da      	lsls	r2, r3, #31
 8008a88:	d437      	bmi.n	8008afa <_printf_float+0x386>
 8008a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a8c:	ebaa 0903 	sub.w	r9, sl, r3
 8008a90:	9b06      	ldr	r3, [sp, #24]
 8008a92:	ebaa 0303 	sub.w	r3, sl, r3
 8008a96:	4599      	cmp	r9, r3
 8008a98:	bfa8      	it	ge
 8008a9a:	4699      	movge	r9, r3
 8008a9c:	f1b9 0f00 	cmp.w	r9, #0
 8008aa0:	dc33      	bgt.n	8008b0a <_printf_float+0x396>
 8008aa2:	f04f 0800 	mov.w	r8, #0
 8008aa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008aaa:	f104 0b1a 	add.w	fp, r4, #26
 8008aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ab0:	ebaa 0303 	sub.w	r3, sl, r3
 8008ab4:	eba3 0309 	sub.w	r3, r3, r9
 8008ab8:	4543      	cmp	r3, r8
 8008aba:	f77f af79 	ble.w	80089b0 <_printf_float+0x23c>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	465a      	mov	r2, fp
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	f43f aeae 	beq.w	800882a <_printf_float+0xb6>
 8008ace:	f108 0801 	add.w	r8, r8, #1
 8008ad2:	e7ec      	b.n	8008aae <_printf_float+0x33a>
 8008ad4:	4642      	mov	r2, r8
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4628      	mov	r0, r5
 8008ada:	47b8      	blx	r7
 8008adc:	3001      	adds	r0, #1
 8008ade:	d1c2      	bne.n	8008a66 <_printf_float+0x2f2>
 8008ae0:	e6a3      	b.n	800882a <_printf_float+0xb6>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	9206      	str	r2, [sp, #24]
 8008aea:	47b8      	blx	r7
 8008aec:	3001      	adds	r0, #1
 8008aee:	f43f ae9c 	beq.w	800882a <_printf_float+0xb6>
 8008af2:	9a06      	ldr	r2, [sp, #24]
 8008af4:	f10b 0b01 	add.w	fp, fp, #1
 8008af8:	e7bb      	b.n	8008a72 <_printf_float+0x2fe>
 8008afa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008afe:	4631      	mov	r1, r6
 8008b00:	4628      	mov	r0, r5
 8008b02:	47b8      	blx	r7
 8008b04:	3001      	adds	r0, #1
 8008b06:	d1c0      	bne.n	8008a8a <_printf_float+0x316>
 8008b08:	e68f      	b.n	800882a <_printf_float+0xb6>
 8008b0a:	9a06      	ldr	r2, [sp, #24]
 8008b0c:	464b      	mov	r3, r9
 8008b0e:	4442      	add	r2, r8
 8008b10:	4631      	mov	r1, r6
 8008b12:	4628      	mov	r0, r5
 8008b14:	47b8      	blx	r7
 8008b16:	3001      	adds	r0, #1
 8008b18:	d1c3      	bne.n	8008aa2 <_printf_float+0x32e>
 8008b1a:	e686      	b.n	800882a <_printf_float+0xb6>
 8008b1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b20:	f1ba 0f01 	cmp.w	sl, #1
 8008b24:	dc01      	bgt.n	8008b2a <_printf_float+0x3b6>
 8008b26:	07db      	lsls	r3, r3, #31
 8008b28:	d536      	bpl.n	8008b98 <_printf_float+0x424>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	4642      	mov	r2, r8
 8008b2e:	4631      	mov	r1, r6
 8008b30:	4628      	mov	r0, r5
 8008b32:	47b8      	blx	r7
 8008b34:	3001      	adds	r0, #1
 8008b36:	f43f ae78 	beq.w	800882a <_printf_float+0xb6>
 8008b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b8      	blx	r7
 8008b44:	3001      	adds	r0, #1
 8008b46:	f43f ae70 	beq.w	800882a <_printf_float+0xb6>
 8008b4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2300      	movs	r3, #0
 8008b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b56:	f7f7 ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b5a:	b9c0      	cbnz	r0, 8008b8e <_printf_float+0x41a>
 8008b5c:	4653      	mov	r3, sl
 8008b5e:	f108 0201 	add.w	r2, r8, #1
 8008b62:	4631      	mov	r1, r6
 8008b64:	4628      	mov	r0, r5
 8008b66:	47b8      	blx	r7
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d10c      	bne.n	8008b86 <_printf_float+0x412>
 8008b6c:	e65d      	b.n	800882a <_printf_float+0xb6>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	465a      	mov	r2, fp
 8008b72:	4631      	mov	r1, r6
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b8      	blx	r7
 8008b78:	3001      	adds	r0, #1
 8008b7a:	f43f ae56 	beq.w	800882a <_printf_float+0xb6>
 8008b7e:	f108 0801 	add.w	r8, r8, #1
 8008b82:	45d0      	cmp	r8, sl
 8008b84:	dbf3      	blt.n	8008b6e <_printf_float+0x3fa>
 8008b86:	464b      	mov	r3, r9
 8008b88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008b8c:	e6df      	b.n	800894e <_printf_float+0x1da>
 8008b8e:	f04f 0800 	mov.w	r8, #0
 8008b92:	f104 0b1a 	add.w	fp, r4, #26
 8008b96:	e7f4      	b.n	8008b82 <_printf_float+0x40e>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	4642      	mov	r2, r8
 8008b9c:	e7e1      	b.n	8008b62 <_printf_float+0x3ee>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	464a      	mov	r2, r9
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	47b8      	blx	r7
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f43f ae3e 	beq.w	800882a <_printf_float+0xb6>
 8008bae:	f108 0801 	add.w	r8, r8, #1
 8008bb2:	68e3      	ldr	r3, [r4, #12]
 8008bb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008bb6:	1a5b      	subs	r3, r3, r1
 8008bb8:	4543      	cmp	r3, r8
 8008bba:	dcf0      	bgt.n	8008b9e <_printf_float+0x42a>
 8008bbc:	e6fc      	b.n	80089b8 <_printf_float+0x244>
 8008bbe:	f04f 0800 	mov.w	r8, #0
 8008bc2:	f104 0919 	add.w	r9, r4, #25
 8008bc6:	e7f4      	b.n	8008bb2 <_printf_float+0x43e>

08008bc8 <_printf_common>:
 8008bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bcc:	4616      	mov	r6, r2
 8008bce:	4698      	mov	r8, r3
 8008bd0:	688a      	ldr	r2, [r1, #8]
 8008bd2:	690b      	ldr	r3, [r1, #16]
 8008bd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	bfb8      	it	lt
 8008bdc:	4613      	movlt	r3, r2
 8008bde:	6033      	str	r3, [r6, #0]
 8008be0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008be4:	4607      	mov	r7, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	b10a      	cbz	r2, 8008bee <_printf_common+0x26>
 8008bea:	3301      	adds	r3, #1
 8008bec:	6033      	str	r3, [r6, #0]
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	0699      	lsls	r1, r3, #26
 8008bf2:	bf42      	ittt	mi
 8008bf4:	6833      	ldrmi	r3, [r6, #0]
 8008bf6:	3302      	addmi	r3, #2
 8008bf8:	6033      	strmi	r3, [r6, #0]
 8008bfa:	6825      	ldr	r5, [r4, #0]
 8008bfc:	f015 0506 	ands.w	r5, r5, #6
 8008c00:	d106      	bne.n	8008c10 <_printf_common+0x48>
 8008c02:	f104 0a19 	add.w	sl, r4, #25
 8008c06:	68e3      	ldr	r3, [r4, #12]
 8008c08:	6832      	ldr	r2, [r6, #0]
 8008c0a:	1a9b      	subs	r3, r3, r2
 8008c0c:	42ab      	cmp	r3, r5
 8008c0e:	dc26      	bgt.n	8008c5e <_printf_common+0x96>
 8008c10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c14:	6822      	ldr	r2, [r4, #0]
 8008c16:	3b00      	subs	r3, #0
 8008c18:	bf18      	it	ne
 8008c1a:	2301      	movne	r3, #1
 8008c1c:	0692      	lsls	r2, r2, #26
 8008c1e:	d42b      	bmi.n	8008c78 <_printf_common+0xb0>
 8008c20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c24:	4641      	mov	r1, r8
 8008c26:	4638      	mov	r0, r7
 8008c28:	47c8      	blx	r9
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	d01e      	beq.n	8008c6c <_printf_common+0xa4>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	6922      	ldr	r2, [r4, #16]
 8008c32:	f003 0306 	and.w	r3, r3, #6
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	bf02      	ittt	eq
 8008c3a:	68e5      	ldreq	r5, [r4, #12]
 8008c3c:	6833      	ldreq	r3, [r6, #0]
 8008c3e:	1aed      	subeq	r5, r5, r3
 8008c40:	68a3      	ldr	r3, [r4, #8]
 8008c42:	bf0c      	ite	eq
 8008c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c48:	2500      	movne	r5, #0
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	bfc4      	itt	gt
 8008c4e:	1a9b      	subgt	r3, r3, r2
 8008c50:	18ed      	addgt	r5, r5, r3
 8008c52:	2600      	movs	r6, #0
 8008c54:	341a      	adds	r4, #26
 8008c56:	42b5      	cmp	r5, r6
 8008c58:	d11a      	bne.n	8008c90 <_printf_common+0xc8>
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	e008      	b.n	8008c70 <_printf_common+0xa8>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	4652      	mov	r2, sl
 8008c62:	4641      	mov	r1, r8
 8008c64:	4638      	mov	r0, r7
 8008c66:	47c8      	blx	r9
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d103      	bne.n	8008c74 <_printf_common+0xac>
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c74:	3501      	adds	r5, #1
 8008c76:	e7c6      	b.n	8008c06 <_printf_common+0x3e>
 8008c78:	18e1      	adds	r1, r4, r3
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	2030      	movs	r0, #48	@ 0x30
 8008c7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c82:	4422      	add	r2, r4
 8008c84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c8c:	3302      	adds	r3, #2
 8008c8e:	e7c7      	b.n	8008c20 <_printf_common+0x58>
 8008c90:	2301      	movs	r3, #1
 8008c92:	4622      	mov	r2, r4
 8008c94:	4641      	mov	r1, r8
 8008c96:	4638      	mov	r0, r7
 8008c98:	47c8      	blx	r9
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	d0e6      	beq.n	8008c6c <_printf_common+0xa4>
 8008c9e:	3601      	adds	r6, #1
 8008ca0:	e7d9      	b.n	8008c56 <_printf_common+0x8e>
	...

08008ca4 <_printf_i>:
 8008ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	7e0f      	ldrb	r7, [r1, #24]
 8008caa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cac:	2f78      	cmp	r7, #120	@ 0x78
 8008cae:	4691      	mov	r9, r2
 8008cb0:	4680      	mov	r8, r0
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	469a      	mov	sl, r3
 8008cb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008cba:	d807      	bhi.n	8008ccc <_printf_i+0x28>
 8008cbc:	2f62      	cmp	r7, #98	@ 0x62
 8008cbe:	d80a      	bhi.n	8008cd6 <_printf_i+0x32>
 8008cc0:	2f00      	cmp	r7, #0
 8008cc2:	f000 80d2 	beq.w	8008e6a <_printf_i+0x1c6>
 8008cc6:	2f58      	cmp	r7, #88	@ 0x58
 8008cc8:	f000 80b9 	beq.w	8008e3e <_printf_i+0x19a>
 8008ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008cd4:	e03a      	b.n	8008d4c <_printf_i+0xa8>
 8008cd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008cda:	2b15      	cmp	r3, #21
 8008cdc:	d8f6      	bhi.n	8008ccc <_printf_i+0x28>
 8008cde:	a101      	add	r1, pc, #4	@ (adr r1, 8008ce4 <_printf_i+0x40>)
 8008ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ce4:	08008d3d 	.word	0x08008d3d
 8008ce8:	08008d51 	.word	0x08008d51
 8008cec:	08008ccd 	.word	0x08008ccd
 8008cf0:	08008ccd 	.word	0x08008ccd
 8008cf4:	08008ccd 	.word	0x08008ccd
 8008cf8:	08008ccd 	.word	0x08008ccd
 8008cfc:	08008d51 	.word	0x08008d51
 8008d00:	08008ccd 	.word	0x08008ccd
 8008d04:	08008ccd 	.word	0x08008ccd
 8008d08:	08008ccd 	.word	0x08008ccd
 8008d0c:	08008ccd 	.word	0x08008ccd
 8008d10:	08008e51 	.word	0x08008e51
 8008d14:	08008d7b 	.word	0x08008d7b
 8008d18:	08008e0b 	.word	0x08008e0b
 8008d1c:	08008ccd 	.word	0x08008ccd
 8008d20:	08008ccd 	.word	0x08008ccd
 8008d24:	08008e73 	.word	0x08008e73
 8008d28:	08008ccd 	.word	0x08008ccd
 8008d2c:	08008d7b 	.word	0x08008d7b
 8008d30:	08008ccd 	.word	0x08008ccd
 8008d34:	08008ccd 	.word	0x08008ccd
 8008d38:	08008e13 	.word	0x08008e13
 8008d3c:	6833      	ldr	r3, [r6, #0]
 8008d3e:	1d1a      	adds	r2, r3, #4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6032      	str	r2, [r6, #0]
 8008d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e09d      	b.n	8008e8c <_printf_i+0x1e8>
 8008d50:	6833      	ldr	r3, [r6, #0]
 8008d52:	6820      	ldr	r0, [r4, #0]
 8008d54:	1d19      	adds	r1, r3, #4
 8008d56:	6031      	str	r1, [r6, #0]
 8008d58:	0606      	lsls	r6, r0, #24
 8008d5a:	d501      	bpl.n	8008d60 <_printf_i+0xbc>
 8008d5c:	681d      	ldr	r5, [r3, #0]
 8008d5e:	e003      	b.n	8008d68 <_printf_i+0xc4>
 8008d60:	0645      	lsls	r5, r0, #25
 8008d62:	d5fb      	bpl.n	8008d5c <_printf_i+0xb8>
 8008d64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d68:	2d00      	cmp	r5, #0
 8008d6a:	da03      	bge.n	8008d74 <_printf_i+0xd0>
 8008d6c:	232d      	movs	r3, #45	@ 0x2d
 8008d6e:	426d      	negs	r5, r5
 8008d70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d74:	4859      	ldr	r0, [pc, #356]	@ (8008edc <_printf_i+0x238>)
 8008d76:	230a      	movs	r3, #10
 8008d78:	e011      	b.n	8008d9e <_printf_i+0xfa>
 8008d7a:	6821      	ldr	r1, [r4, #0]
 8008d7c:	6833      	ldr	r3, [r6, #0]
 8008d7e:	0608      	lsls	r0, r1, #24
 8008d80:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d84:	d402      	bmi.n	8008d8c <_printf_i+0xe8>
 8008d86:	0649      	lsls	r1, r1, #25
 8008d88:	bf48      	it	mi
 8008d8a:	b2ad      	uxthmi	r5, r5
 8008d8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d8e:	4853      	ldr	r0, [pc, #332]	@ (8008edc <_printf_i+0x238>)
 8008d90:	6033      	str	r3, [r6, #0]
 8008d92:	bf14      	ite	ne
 8008d94:	230a      	movne	r3, #10
 8008d96:	2308      	moveq	r3, #8
 8008d98:	2100      	movs	r1, #0
 8008d9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d9e:	6866      	ldr	r6, [r4, #4]
 8008da0:	60a6      	str	r6, [r4, #8]
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	bfa2      	ittt	ge
 8008da6:	6821      	ldrge	r1, [r4, #0]
 8008da8:	f021 0104 	bicge.w	r1, r1, #4
 8008dac:	6021      	strge	r1, [r4, #0]
 8008dae:	b90d      	cbnz	r5, 8008db4 <_printf_i+0x110>
 8008db0:	2e00      	cmp	r6, #0
 8008db2:	d04b      	beq.n	8008e4c <_printf_i+0x1a8>
 8008db4:	4616      	mov	r6, r2
 8008db6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dba:	fb03 5711 	mls	r7, r3, r1, r5
 8008dbe:	5dc7      	ldrb	r7, [r0, r7]
 8008dc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dc4:	462f      	mov	r7, r5
 8008dc6:	42bb      	cmp	r3, r7
 8008dc8:	460d      	mov	r5, r1
 8008dca:	d9f4      	bls.n	8008db6 <_printf_i+0x112>
 8008dcc:	2b08      	cmp	r3, #8
 8008dce:	d10b      	bne.n	8008de8 <_printf_i+0x144>
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	07df      	lsls	r7, r3, #31
 8008dd4:	d508      	bpl.n	8008de8 <_printf_i+0x144>
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	6861      	ldr	r1, [r4, #4]
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	bfde      	ittt	le
 8008dde:	2330      	movle	r3, #48	@ 0x30
 8008de0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008de4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008de8:	1b92      	subs	r2, r2, r6
 8008dea:	6122      	str	r2, [r4, #16]
 8008dec:	f8cd a000 	str.w	sl, [sp]
 8008df0:	464b      	mov	r3, r9
 8008df2:	aa03      	add	r2, sp, #12
 8008df4:	4621      	mov	r1, r4
 8008df6:	4640      	mov	r0, r8
 8008df8:	f7ff fee6 	bl	8008bc8 <_printf_common>
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	d14a      	bne.n	8008e96 <_printf_i+0x1f2>
 8008e00:	f04f 30ff 	mov.w	r0, #4294967295
 8008e04:	b004      	add	sp, #16
 8008e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	f043 0320 	orr.w	r3, r3, #32
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	4833      	ldr	r0, [pc, #204]	@ (8008ee0 <_printf_i+0x23c>)
 8008e14:	2778      	movs	r7, #120	@ 0x78
 8008e16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	6831      	ldr	r1, [r6, #0]
 8008e1e:	061f      	lsls	r7, r3, #24
 8008e20:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e24:	d402      	bmi.n	8008e2c <_printf_i+0x188>
 8008e26:	065f      	lsls	r7, r3, #25
 8008e28:	bf48      	it	mi
 8008e2a:	b2ad      	uxthmi	r5, r5
 8008e2c:	6031      	str	r1, [r6, #0]
 8008e2e:	07d9      	lsls	r1, r3, #31
 8008e30:	bf44      	itt	mi
 8008e32:	f043 0320 	orrmi.w	r3, r3, #32
 8008e36:	6023      	strmi	r3, [r4, #0]
 8008e38:	b11d      	cbz	r5, 8008e42 <_printf_i+0x19e>
 8008e3a:	2310      	movs	r3, #16
 8008e3c:	e7ac      	b.n	8008d98 <_printf_i+0xf4>
 8008e3e:	4827      	ldr	r0, [pc, #156]	@ (8008edc <_printf_i+0x238>)
 8008e40:	e7e9      	b.n	8008e16 <_printf_i+0x172>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	f023 0320 	bic.w	r3, r3, #32
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	e7f6      	b.n	8008e3a <_printf_i+0x196>
 8008e4c:	4616      	mov	r6, r2
 8008e4e:	e7bd      	b.n	8008dcc <_printf_i+0x128>
 8008e50:	6833      	ldr	r3, [r6, #0]
 8008e52:	6825      	ldr	r5, [r4, #0]
 8008e54:	6961      	ldr	r1, [r4, #20]
 8008e56:	1d18      	adds	r0, r3, #4
 8008e58:	6030      	str	r0, [r6, #0]
 8008e5a:	062e      	lsls	r6, r5, #24
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	d501      	bpl.n	8008e64 <_printf_i+0x1c0>
 8008e60:	6019      	str	r1, [r3, #0]
 8008e62:	e002      	b.n	8008e6a <_printf_i+0x1c6>
 8008e64:	0668      	lsls	r0, r5, #25
 8008e66:	d5fb      	bpl.n	8008e60 <_printf_i+0x1bc>
 8008e68:	8019      	strh	r1, [r3, #0]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6123      	str	r3, [r4, #16]
 8008e6e:	4616      	mov	r6, r2
 8008e70:	e7bc      	b.n	8008dec <_printf_i+0x148>
 8008e72:	6833      	ldr	r3, [r6, #0]
 8008e74:	1d1a      	adds	r2, r3, #4
 8008e76:	6032      	str	r2, [r6, #0]
 8008e78:	681e      	ldr	r6, [r3, #0]
 8008e7a:	6862      	ldr	r2, [r4, #4]
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7f7 f9a6 	bl	80001d0 <memchr>
 8008e84:	b108      	cbz	r0, 8008e8a <_printf_i+0x1e6>
 8008e86:	1b80      	subs	r0, r0, r6
 8008e88:	6060      	str	r0, [r4, #4]
 8008e8a:	6863      	ldr	r3, [r4, #4]
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e94:	e7aa      	b.n	8008dec <_printf_i+0x148>
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	4632      	mov	r2, r6
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	47d0      	blx	sl
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d0ad      	beq.n	8008e00 <_printf_i+0x15c>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	079b      	lsls	r3, r3, #30
 8008ea8:	d413      	bmi.n	8008ed2 <_printf_i+0x22e>
 8008eaa:	68e0      	ldr	r0, [r4, #12]
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	4298      	cmp	r0, r3
 8008eb0:	bfb8      	it	lt
 8008eb2:	4618      	movlt	r0, r3
 8008eb4:	e7a6      	b.n	8008e04 <_printf_i+0x160>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4632      	mov	r2, r6
 8008eba:	4649      	mov	r1, r9
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	47d0      	blx	sl
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d09d      	beq.n	8008e00 <_printf_i+0x15c>
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	68e3      	ldr	r3, [r4, #12]
 8008ec8:	9903      	ldr	r1, [sp, #12]
 8008eca:	1a5b      	subs	r3, r3, r1
 8008ecc:	42ab      	cmp	r3, r5
 8008ece:	dcf2      	bgt.n	8008eb6 <_printf_i+0x212>
 8008ed0:	e7eb      	b.n	8008eaa <_printf_i+0x206>
 8008ed2:	2500      	movs	r5, #0
 8008ed4:	f104 0619 	add.w	r6, r4, #25
 8008ed8:	e7f5      	b.n	8008ec6 <_printf_i+0x222>
 8008eda:	bf00      	nop
 8008edc:	0800b1ee 	.word	0x0800b1ee
 8008ee0:	0800b1ff 	.word	0x0800b1ff

08008ee4 <std>:
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	b510      	push	{r4, lr}
 8008ee8:	4604      	mov	r4, r0
 8008eea:	e9c0 3300 	strd	r3, r3, [r0]
 8008eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ef2:	6083      	str	r3, [r0, #8]
 8008ef4:	8181      	strh	r1, [r0, #12]
 8008ef6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ef8:	81c2      	strh	r2, [r0, #14]
 8008efa:	6183      	str	r3, [r0, #24]
 8008efc:	4619      	mov	r1, r3
 8008efe:	2208      	movs	r2, #8
 8008f00:	305c      	adds	r0, #92	@ 0x5c
 8008f02:	f000 f906 	bl	8009112 <memset>
 8008f06:	4b0d      	ldr	r3, [pc, #52]	@ (8008f3c <std+0x58>)
 8008f08:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f40 <std+0x5c>)
 8008f0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f44 <std+0x60>)
 8008f10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f12:	4b0d      	ldr	r3, [pc, #52]	@ (8008f48 <std+0x64>)
 8008f14:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f16:	4b0d      	ldr	r3, [pc, #52]	@ (8008f4c <std+0x68>)
 8008f18:	6224      	str	r4, [r4, #32]
 8008f1a:	429c      	cmp	r4, r3
 8008f1c:	d006      	beq.n	8008f2c <std+0x48>
 8008f1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f22:	4294      	cmp	r4, r2
 8008f24:	d002      	beq.n	8008f2c <std+0x48>
 8008f26:	33d0      	adds	r3, #208	@ 0xd0
 8008f28:	429c      	cmp	r4, r3
 8008f2a:	d105      	bne.n	8008f38 <std+0x54>
 8008f2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f34:	f000 b9c0 	b.w	80092b8 <__retarget_lock_init_recursive>
 8008f38:	bd10      	pop	{r4, pc}
 8008f3a:	bf00      	nop
 8008f3c:	0800908d 	.word	0x0800908d
 8008f40:	080090af 	.word	0x080090af
 8008f44:	080090e7 	.word	0x080090e7
 8008f48:	0800910b 	.word	0x0800910b
 8008f4c:	200047f4 	.word	0x200047f4

08008f50 <stdio_exit_handler>:
 8008f50:	4a02      	ldr	r2, [pc, #8]	@ (8008f5c <stdio_exit_handler+0xc>)
 8008f52:	4903      	ldr	r1, [pc, #12]	@ (8008f60 <stdio_exit_handler+0x10>)
 8008f54:	4803      	ldr	r0, [pc, #12]	@ (8008f64 <stdio_exit_handler+0x14>)
 8008f56:	f000 b869 	b.w	800902c <_fwalk_sglue>
 8008f5a:	bf00      	nop
 8008f5c:	20000020 	.word	0x20000020
 8008f60:	0800ac09 	.word	0x0800ac09
 8008f64:	20000030 	.word	0x20000030

08008f68 <cleanup_stdio>:
 8008f68:	6841      	ldr	r1, [r0, #4]
 8008f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f9c <cleanup_stdio+0x34>)
 8008f6c:	4299      	cmp	r1, r3
 8008f6e:	b510      	push	{r4, lr}
 8008f70:	4604      	mov	r4, r0
 8008f72:	d001      	beq.n	8008f78 <cleanup_stdio+0x10>
 8008f74:	f001 fe48 	bl	800ac08 <_fflush_r>
 8008f78:	68a1      	ldr	r1, [r4, #8]
 8008f7a:	4b09      	ldr	r3, [pc, #36]	@ (8008fa0 <cleanup_stdio+0x38>)
 8008f7c:	4299      	cmp	r1, r3
 8008f7e:	d002      	beq.n	8008f86 <cleanup_stdio+0x1e>
 8008f80:	4620      	mov	r0, r4
 8008f82:	f001 fe41 	bl	800ac08 <_fflush_r>
 8008f86:	68e1      	ldr	r1, [r4, #12]
 8008f88:	4b06      	ldr	r3, [pc, #24]	@ (8008fa4 <cleanup_stdio+0x3c>)
 8008f8a:	4299      	cmp	r1, r3
 8008f8c:	d004      	beq.n	8008f98 <cleanup_stdio+0x30>
 8008f8e:	4620      	mov	r0, r4
 8008f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f94:	f001 be38 	b.w	800ac08 <_fflush_r>
 8008f98:	bd10      	pop	{r4, pc}
 8008f9a:	bf00      	nop
 8008f9c:	200047f4 	.word	0x200047f4
 8008fa0:	2000485c 	.word	0x2000485c
 8008fa4:	200048c4 	.word	0x200048c4

08008fa8 <global_stdio_init.part.0>:
 8008fa8:	b510      	push	{r4, lr}
 8008faa:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd8 <global_stdio_init.part.0+0x30>)
 8008fac:	4c0b      	ldr	r4, [pc, #44]	@ (8008fdc <global_stdio_init.part.0+0x34>)
 8008fae:	4a0c      	ldr	r2, [pc, #48]	@ (8008fe0 <global_stdio_init.part.0+0x38>)
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2104      	movs	r1, #4
 8008fb8:	f7ff ff94 	bl	8008ee4 <std>
 8008fbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	2109      	movs	r1, #9
 8008fc4:	f7ff ff8e 	bl	8008ee4 <std>
 8008fc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008fcc:	2202      	movs	r2, #2
 8008fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fd2:	2112      	movs	r1, #18
 8008fd4:	f7ff bf86 	b.w	8008ee4 <std>
 8008fd8:	2000492c 	.word	0x2000492c
 8008fdc:	200047f4 	.word	0x200047f4
 8008fe0:	08008f51 	.word	0x08008f51

08008fe4 <__sfp_lock_acquire>:
 8008fe4:	4801      	ldr	r0, [pc, #4]	@ (8008fec <__sfp_lock_acquire+0x8>)
 8008fe6:	f000 b968 	b.w	80092ba <__retarget_lock_acquire_recursive>
 8008fea:	bf00      	nop
 8008fec:	20004935 	.word	0x20004935

08008ff0 <__sfp_lock_release>:
 8008ff0:	4801      	ldr	r0, [pc, #4]	@ (8008ff8 <__sfp_lock_release+0x8>)
 8008ff2:	f000 b963 	b.w	80092bc <__retarget_lock_release_recursive>
 8008ff6:	bf00      	nop
 8008ff8:	20004935 	.word	0x20004935

08008ffc <__sinit>:
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	4604      	mov	r4, r0
 8009000:	f7ff fff0 	bl	8008fe4 <__sfp_lock_acquire>
 8009004:	6a23      	ldr	r3, [r4, #32]
 8009006:	b11b      	cbz	r3, 8009010 <__sinit+0x14>
 8009008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800900c:	f7ff bff0 	b.w	8008ff0 <__sfp_lock_release>
 8009010:	4b04      	ldr	r3, [pc, #16]	@ (8009024 <__sinit+0x28>)
 8009012:	6223      	str	r3, [r4, #32]
 8009014:	4b04      	ldr	r3, [pc, #16]	@ (8009028 <__sinit+0x2c>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1f5      	bne.n	8009008 <__sinit+0xc>
 800901c:	f7ff ffc4 	bl	8008fa8 <global_stdio_init.part.0>
 8009020:	e7f2      	b.n	8009008 <__sinit+0xc>
 8009022:	bf00      	nop
 8009024:	08008f69 	.word	0x08008f69
 8009028:	2000492c 	.word	0x2000492c

0800902c <_fwalk_sglue>:
 800902c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009030:	4607      	mov	r7, r0
 8009032:	4688      	mov	r8, r1
 8009034:	4614      	mov	r4, r2
 8009036:	2600      	movs	r6, #0
 8009038:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800903c:	f1b9 0901 	subs.w	r9, r9, #1
 8009040:	d505      	bpl.n	800904e <_fwalk_sglue+0x22>
 8009042:	6824      	ldr	r4, [r4, #0]
 8009044:	2c00      	cmp	r4, #0
 8009046:	d1f7      	bne.n	8009038 <_fwalk_sglue+0xc>
 8009048:	4630      	mov	r0, r6
 800904a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800904e:	89ab      	ldrh	r3, [r5, #12]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d907      	bls.n	8009064 <_fwalk_sglue+0x38>
 8009054:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009058:	3301      	adds	r3, #1
 800905a:	d003      	beq.n	8009064 <_fwalk_sglue+0x38>
 800905c:	4629      	mov	r1, r5
 800905e:	4638      	mov	r0, r7
 8009060:	47c0      	blx	r8
 8009062:	4306      	orrs	r6, r0
 8009064:	3568      	adds	r5, #104	@ 0x68
 8009066:	e7e9      	b.n	800903c <_fwalk_sglue+0x10>

08009068 <iprintf>:
 8009068:	b40f      	push	{r0, r1, r2, r3}
 800906a:	b507      	push	{r0, r1, r2, lr}
 800906c:	4906      	ldr	r1, [pc, #24]	@ (8009088 <iprintf+0x20>)
 800906e:	ab04      	add	r3, sp, #16
 8009070:	6808      	ldr	r0, [r1, #0]
 8009072:	f853 2b04 	ldr.w	r2, [r3], #4
 8009076:	6881      	ldr	r1, [r0, #8]
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	f001 fc29 	bl	800a8d0 <_vfiprintf_r>
 800907e:	b003      	add	sp, #12
 8009080:	f85d eb04 	ldr.w	lr, [sp], #4
 8009084:	b004      	add	sp, #16
 8009086:	4770      	bx	lr
 8009088:	2000002c 	.word	0x2000002c

0800908c <__sread>:
 800908c:	b510      	push	{r4, lr}
 800908e:	460c      	mov	r4, r1
 8009090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009094:	f000 f8c2 	bl	800921c <_read_r>
 8009098:	2800      	cmp	r0, #0
 800909a:	bfab      	itete	ge
 800909c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800909e:	89a3      	ldrhlt	r3, [r4, #12]
 80090a0:	181b      	addge	r3, r3, r0
 80090a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090a6:	bfac      	ite	ge
 80090a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090aa:	81a3      	strhlt	r3, [r4, #12]
 80090ac:	bd10      	pop	{r4, pc}

080090ae <__swrite>:
 80090ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b2:	461f      	mov	r7, r3
 80090b4:	898b      	ldrh	r3, [r1, #12]
 80090b6:	05db      	lsls	r3, r3, #23
 80090b8:	4605      	mov	r5, r0
 80090ba:	460c      	mov	r4, r1
 80090bc:	4616      	mov	r6, r2
 80090be:	d505      	bpl.n	80090cc <__swrite+0x1e>
 80090c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c4:	2302      	movs	r3, #2
 80090c6:	2200      	movs	r2, #0
 80090c8:	f000 f896 	bl	80091f8 <_lseek_r>
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090d6:	81a3      	strh	r3, [r4, #12]
 80090d8:	4632      	mov	r2, r6
 80090da:	463b      	mov	r3, r7
 80090dc:	4628      	mov	r0, r5
 80090de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090e2:	f000 b8ad 	b.w	8009240 <_write_r>

080090e6 <__sseek>:
 80090e6:	b510      	push	{r4, lr}
 80090e8:	460c      	mov	r4, r1
 80090ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ee:	f000 f883 	bl	80091f8 <_lseek_r>
 80090f2:	1c43      	adds	r3, r0, #1
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	bf15      	itete	ne
 80090f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009102:	81a3      	strheq	r3, [r4, #12]
 8009104:	bf18      	it	ne
 8009106:	81a3      	strhne	r3, [r4, #12]
 8009108:	bd10      	pop	{r4, pc}

0800910a <__sclose>:
 800910a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800910e:	f000 b80d 	b.w	800912c <_close_r>

08009112 <memset>:
 8009112:	4402      	add	r2, r0
 8009114:	4603      	mov	r3, r0
 8009116:	4293      	cmp	r3, r2
 8009118:	d100      	bne.n	800911c <memset+0xa>
 800911a:	4770      	bx	lr
 800911c:	f803 1b01 	strb.w	r1, [r3], #1
 8009120:	e7f9      	b.n	8009116 <memset+0x4>
	...

08009124 <_localeconv_r>:
 8009124:	4800      	ldr	r0, [pc, #0]	@ (8009128 <_localeconv_r+0x4>)
 8009126:	4770      	bx	lr
 8009128:	2000016c 	.word	0x2000016c

0800912c <_close_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d06      	ldr	r5, [pc, #24]	@ (8009148 <_close_r+0x1c>)
 8009130:	2300      	movs	r3, #0
 8009132:	4604      	mov	r4, r0
 8009134:	4608      	mov	r0, r1
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	f7f8 ff7e 	bl	8002038 <_close>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_close_r+0x1a>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_close_r+0x1a>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	20004930 	.word	0x20004930

0800914c <_reclaim_reent>:
 800914c:	4b29      	ldr	r3, [pc, #164]	@ (80091f4 <_reclaim_reent+0xa8>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4283      	cmp	r3, r0
 8009152:	b570      	push	{r4, r5, r6, lr}
 8009154:	4604      	mov	r4, r0
 8009156:	d04b      	beq.n	80091f0 <_reclaim_reent+0xa4>
 8009158:	69c3      	ldr	r3, [r0, #28]
 800915a:	b1ab      	cbz	r3, 8009188 <_reclaim_reent+0x3c>
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	b16b      	cbz	r3, 800917c <_reclaim_reent+0x30>
 8009160:	2500      	movs	r5, #0
 8009162:	69e3      	ldr	r3, [r4, #28]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	5959      	ldr	r1, [r3, r5]
 8009168:	2900      	cmp	r1, #0
 800916a:	d13b      	bne.n	80091e4 <_reclaim_reent+0x98>
 800916c:	3504      	adds	r5, #4
 800916e:	2d80      	cmp	r5, #128	@ 0x80
 8009170:	d1f7      	bne.n	8009162 <_reclaim_reent+0x16>
 8009172:	69e3      	ldr	r3, [r4, #28]
 8009174:	4620      	mov	r0, r4
 8009176:	68d9      	ldr	r1, [r3, #12]
 8009178:	f000 fefe 	bl	8009f78 <_free_r>
 800917c:	69e3      	ldr	r3, [r4, #28]
 800917e:	6819      	ldr	r1, [r3, #0]
 8009180:	b111      	cbz	r1, 8009188 <_reclaim_reent+0x3c>
 8009182:	4620      	mov	r0, r4
 8009184:	f000 fef8 	bl	8009f78 <_free_r>
 8009188:	6961      	ldr	r1, [r4, #20]
 800918a:	b111      	cbz	r1, 8009192 <_reclaim_reent+0x46>
 800918c:	4620      	mov	r0, r4
 800918e:	f000 fef3 	bl	8009f78 <_free_r>
 8009192:	69e1      	ldr	r1, [r4, #28]
 8009194:	b111      	cbz	r1, 800919c <_reclaim_reent+0x50>
 8009196:	4620      	mov	r0, r4
 8009198:	f000 feee 	bl	8009f78 <_free_r>
 800919c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800919e:	b111      	cbz	r1, 80091a6 <_reclaim_reent+0x5a>
 80091a0:	4620      	mov	r0, r4
 80091a2:	f000 fee9 	bl	8009f78 <_free_r>
 80091a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091a8:	b111      	cbz	r1, 80091b0 <_reclaim_reent+0x64>
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 fee4 	bl	8009f78 <_free_r>
 80091b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80091b2:	b111      	cbz	r1, 80091ba <_reclaim_reent+0x6e>
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 fedf 	bl	8009f78 <_free_r>
 80091ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80091bc:	b111      	cbz	r1, 80091c4 <_reclaim_reent+0x78>
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 feda 	bl	8009f78 <_free_r>
 80091c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80091c6:	b111      	cbz	r1, 80091ce <_reclaim_reent+0x82>
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 fed5 	bl	8009f78 <_free_r>
 80091ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80091d0:	b111      	cbz	r1, 80091d8 <_reclaim_reent+0x8c>
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 fed0 	bl	8009f78 <_free_r>
 80091d8:	6a23      	ldr	r3, [r4, #32]
 80091da:	b14b      	cbz	r3, 80091f0 <_reclaim_reent+0xa4>
 80091dc:	4620      	mov	r0, r4
 80091de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091e2:	4718      	bx	r3
 80091e4:	680e      	ldr	r6, [r1, #0]
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 fec6 	bl	8009f78 <_free_r>
 80091ec:	4631      	mov	r1, r6
 80091ee:	e7bb      	b.n	8009168 <_reclaim_reent+0x1c>
 80091f0:	bd70      	pop	{r4, r5, r6, pc}
 80091f2:	bf00      	nop
 80091f4:	2000002c 	.word	0x2000002c

080091f8 <_lseek_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	4d07      	ldr	r5, [pc, #28]	@ (8009218 <_lseek_r+0x20>)
 80091fc:	4604      	mov	r4, r0
 80091fe:	4608      	mov	r0, r1
 8009200:	4611      	mov	r1, r2
 8009202:	2200      	movs	r2, #0
 8009204:	602a      	str	r2, [r5, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	f7f8 ff3d 	bl	8002086 <_lseek>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_lseek_r+0x1e>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_lseek_r+0x1e>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20004930 	.word	0x20004930

0800921c <_read_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4d07      	ldr	r5, [pc, #28]	@ (800923c <_read_r+0x20>)
 8009220:	4604      	mov	r4, r0
 8009222:	4608      	mov	r0, r1
 8009224:	4611      	mov	r1, r2
 8009226:	2200      	movs	r2, #0
 8009228:	602a      	str	r2, [r5, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	f7f8 fee7 	bl	8001ffe <_read>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_read_r+0x1e>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_read_r+0x1e>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	20004930 	.word	0x20004930

08009240 <_write_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d07      	ldr	r5, [pc, #28]	@ (8009260 <_write_r+0x20>)
 8009244:	4604      	mov	r4, r0
 8009246:	4608      	mov	r0, r1
 8009248:	4611      	mov	r1, r2
 800924a:	2200      	movs	r2, #0
 800924c:	602a      	str	r2, [r5, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	f7f8 fc6c 	bl	8001b2c <_write>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_write_r+0x1e>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_write_r+0x1e>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	20004930 	.word	0x20004930

08009264 <__errno>:
 8009264:	4b01      	ldr	r3, [pc, #4]	@ (800926c <__errno+0x8>)
 8009266:	6818      	ldr	r0, [r3, #0]
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	2000002c 	.word	0x2000002c

08009270 <__libc_init_array>:
 8009270:	b570      	push	{r4, r5, r6, lr}
 8009272:	4d0d      	ldr	r5, [pc, #52]	@ (80092a8 <__libc_init_array+0x38>)
 8009274:	4c0d      	ldr	r4, [pc, #52]	@ (80092ac <__libc_init_array+0x3c>)
 8009276:	1b64      	subs	r4, r4, r5
 8009278:	10a4      	asrs	r4, r4, #2
 800927a:	2600      	movs	r6, #0
 800927c:	42a6      	cmp	r6, r4
 800927e:	d109      	bne.n	8009294 <__libc_init_array+0x24>
 8009280:	4d0b      	ldr	r5, [pc, #44]	@ (80092b0 <__libc_init_array+0x40>)
 8009282:	4c0c      	ldr	r4, [pc, #48]	@ (80092b4 <__libc_init_array+0x44>)
 8009284:	f001 fec0 	bl	800b008 <_init>
 8009288:	1b64      	subs	r4, r4, r5
 800928a:	10a4      	asrs	r4, r4, #2
 800928c:	2600      	movs	r6, #0
 800928e:	42a6      	cmp	r6, r4
 8009290:	d105      	bne.n	800929e <__libc_init_array+0x2e>
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	f855 3b04 	ldr.w	r3, [r5], #4
 8009298:	4798      	blx	r3
 800929a:	3601      	adds	r6, #1
 800929c:	e7ee      	b.n	800927c <__libc_init_array+0xc>
 800929e:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a2:	4798      	blx	r3
 80092a4:	3601      	adds	r6, #1
 80092a6:	e7f2      	b.n	800928e <__libc_init_array+0x1e>
 80092a8:	0800b558 	.word	0x0800b558
 80092ac:	0800b558 	.word	0x0800b558
 80092b0:	0800b558 	.word	0x0800b558
 80092b4:	0800b55c 	.word	0x0800b55c

080092b8 <__retarget_lock_init_recursive>:
 80092b8:	4770      	bx	lr

080092ba <__retarget_lock_acquire_recursive>:
 80092ba:	4770      	bx	lr

080092bc <__retarget_lock_release_recursive>:
 80092bc:	4770      	bx	lr

080092be <memcpy>:
 80092be:	440a      	add	r2, r1
 80092c0:	4291      	cmp	r1, r2
 80092c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80092c6:	d100      	bne.n	80092ca <memcpy+0xc>
 80092c8:	4770      	bx	lr
 80092ca:	b510      	push	{r4, lr}
 80092cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092d4:	4291      	cmp	r1, r2
 80092d6:	d1f9      	bne.n	80092cc <memcpy+0xe>
 80092d8:	bd10      	pop	{r4, pc}

080092da <quorem>:
 80092da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092de:	6903      	ldr	r3, [r0, #16]
 80092e0:	690c      	ldr	r4, [r1, #16]
 80092e2:	42a3      	cmp	r3, r4
 80092e4:	4607      	mov	r7, r0
 80092e6:	db7e      	blt.n	80093e6 <quorem+0x10c>
 80092e8:	3c01      	subs	r4, #1
 80092ea:	f101 0814 	add.w	r8, r1, #20
 80092ee:	00a3      	lsls	r3, r4, #2
 80092f0:	f100 0514 	add.w	r5, r0, #20
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009300:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009304:	3301      	adds	r3, #1
 8009306:	429a      	cmp	r2, r3
 8009308:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800930c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009310:	d32e      	bcc.n	8009370 <quorem+0x96>
 8009312:	f04f 0a00 	mov.w	sl, #0
 8009316:	46c4      	mov	ip, r8
 8009318:	46ae      	mov	lr, r5
 800931a:	46d3      	mov	fp, sl
 800931c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009320:	b298      	uxth	r0, r3
 8009322:	fb06 a000 	mla	r0, r6, r0, sl
 8009326:	0c02      	lsrs	r2, r0, #16
 8009328:	0c1b      	lsrs	r3, r3, #16
 800932a:	fb06 2303 	mla	r3, r6, r3, r2
 800932e:	f8de 2000 	ldr.w	r2, [lr]
 8009332:	b280      	uxth	r0, r0
 8009334:	b292      	uxth	r2, r2
 8009336:	1a12      	subs	r2, r2, r0
 8009338:	445a      	add	r2, fp
 800933a:	f8de 0000 	ldr.w	r0, [lr]
 800933e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009342:	b29b      	uxth	r3, r3
 8009344:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009348:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800934c:	b292      	uxth	r2, r2
 800934e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009352:	45e1      	cmp	r9, ip
 8009354:	f84e 2b04 	str.w	r2, [lr], #4
 8009358:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800935c:	d2de      	bcs.n	800931c <quorem+0x42>
 800935e:	9b00      	ldr	r3, [sp, #0]
 8009360:	58eb      	ldr	r3, [r5, r3]
 8009362:	b92b      	cbnz	r3, 8009370 <quorem+0x96>
 8009364:	9b01      	ldr	r3, [sp, #4]
 8009366:	3b04      	subs	r3, #4
 8009368:	429d      	cmp	r5, r3
 800936a:	461a      	mov	r2, r3
 800936c:	d32f      	bcc.n	80093ce <quorem+0xf4>
 800936e:	613c      	str	r4, [r7, #16]
 8009370:	4638      	mov	r0, r7
 8009372:	f001 f97b 	bl	800a66c <__mcmp>
 8009376:	2800      	cmp	r0, #0
 8009378:	db25      	blt.n	80093c6 <quorem+0xec>
 800937a:	4629      	mov	r1, r5
 800937c:	2000      	movs	r0, #0
 800937e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009382:	f8d1 c000 	ldr.w	ip, [r1]
 8009386:	fa1f fe82 	uxth.w	lr, r2
 800938a:	fa1f f38c 	uxth.w	r3, ip
 800938e:	eba3 030e 	sub.w	r3, r3, lr
 8009392:	4403      	add	r3, r0
 8009394:	0c12      	lsrs	r2, r2, #16
 8009396:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800939a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800939e:	b29b      	uxth	r3, r3
 80093a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093a4:	45c1      	cmp	r9, r8
 80093a6:	f841 3b04 	str.w	r3, [r1], #4
 80093aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093ae:	d2e6      	bcs.n	800937e <quorem+0xa4>
 80093b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093b8:	b922      	cbnz	r2, 80093c4 <quorem+0xea>
 80093ba:	3b04      	subs	r3, #4
 80093bc:	429d      	cmp	r5, r3
 80093be:	461a      	mov	r2, r3
 80093c0:	d30b      	bcc.n	80093da <quorem+0x100>
 80093c2:	613c      	str	r4, [r7, #16]
 80093c4:	3601      	adds	r6, #1
 80093c6:	4630      	mov	r0, r6
 80093c8:	b003      	add	sp, #12
 80093ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ce:	6812      	ldr	r2, [r2, #0]
 80093d0:	3b04      	subs	r3, #4
 80093d2:	2a00      	cmp	r2, #0
 80093d4:	d1cb      	bne.n	800936e <quorem+0x94>
 80093d6:	3c01      	subs	r4, #1
 80093d8:	e7c6      	b.n	8009368 <quorem+0x8e>
 80093da:	6812      	ldr	r2, [r2, #0]
 80093dc:	3b04      	subs	r3, #4
 80093de:	2a00      	cmp	r2, #0
 80093e0:	d1ef      	bne.n	80093c2 <quorem+0xe8>
 80093e2:	3c01      	subs	r4, #1
 80093e4:	e7ea      	b.n	80093bc <quorem+0xe2>
 80093e6:	2000      	movs	r0, #0
 80093e8:	e7ee      	b.n	80093c8 <quorem+0xee>
 80093ea:	0000      	movs	r0, r0
 80093ec:	0000      	movs	r0, r0
	...

080093f0 <_dtoa_r>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	69c7      	ldr	r7, [r0, #28]
 80093f6:	b099      	sub	sp, #100	@ 0x64
 80093f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80093fc:	ec55 4b10 	vmov	r4, r5, d0
 8009400:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009402:	9109      	str	r1, [sp, #36]	@ 0x24
 8009404:	4683      	mov	fp, r0
 8009406:	920e      	str	r2, [sp, #56]	@ 0x38
 8009408:	9313      	str	r3, [sp, #76]	@ 0x4c
 800940a:	b97f      	cbnz	r7, 800942c <_dtoa_r+0x3c>
 800940c:	2010      	movs	r0, #16
 800940e:	f000 fdfd 	bl	800a00c <malloc>
 8009412:	4602      	mov	r2, r0
 8009414:	f8cb 001c 	str.w	r0, [fp, #28]
 8009418:	b920      	cbnz	r0, 8009424 <_dtoa_r+0x34>
 800941a:	4ba7      	ldr	r3, [pc, #668]	@ (80096b8 <_dtoa_r+0x2c8>)
 800941c:	21ef      	movs	r1, #239	@ 0xef
 800941e:	48a7      	ldr	r0, [pc, #668]	@ (80096bc <_dtoa_r+0x2cc>)
 8009420:	f001 fcbe 	bl	800ada0 <__assert_func>
 8009424:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009428:	6007      	str	r7, [r0, #0]
 800942a:	60c7      	str	r7, [r0, #12]
 800942c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009430:	6819      	ldr	r1, [r3, #0]
 8009432:	b159      	cbz	r1, 800944c <_dtoa_r+0x5c>
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	604a      	str	r2, [r1, #4]
 8009438:	2301      	movs	r3, #1
 800943a:	4093      	lsls	r3, r2
 800943c:	608b      	str	r3, [r1, #8]
 800943e:	4658      	mov	r0, fp
 8009440:	f000 feda 	bl	800a1f8 <_Bfree>
 8009444:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	1e2b      	subs	r3, r5, #0
 800944e:	bfb9      	ittee	lt
 8009450:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009454:	9303      	strlt	r3, [sp, #12]
 8009456:	2300      	movge	r3, #0
 8009458:	6033      	strge	r3, [r6, #0]
 800945a:	9f03      	ldr	r7, [sp, #12]
 800945c:	4b98      	ldr	r3, [pc, #608]	@ (80096c0 <_dtoa_r+0x2d0>)
 800945e:	bfbc      	itt	lt
 8009460:	2201      	movlt	r2, #1
 8009462:	6032      	strlt	r2, [r6, #0]
 8009464:	43bb      	bics	r3, r7
 8009466:	d112      	bne.n	800948e <_dtoa_r+0x9e>
 8009468:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800946a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009474:	4323      	orrs	r3, r4
 8009476:	f000 854d 	beq.w	8009f14 <_dtoa_r+0xb24>
 800947a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800947c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80096d4 <_dtoa_r+0x2e4>
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 854f 	beq.w	8009f24 <_dtoa_r+0xb34>
 8009486:	f10a 0303 	add.w	r3, sl, #3
 800948a:	f000 bd49 	b.w	8009f20 <_dtoa_r+0xb30>
 800948e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009492:	2200      	movs	r2, #0
 8009494:	ec51 0b17 	vmov	r0, r1, d7
 8009498:	2300      	movs	r3, #0
 800949a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800949e:	f7f7 fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 80094a2:	4680      	mov	r8, r0
 80094a4:	b158      	cbz	r0, 80094be <_dtoa_r+0xce>
 80094a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094a8:	2301      	movs	r3, #1
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094ae:	b113      	cbz	r3, 80094b6 <_dtoa_r+0xc6>
 80094b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80094b2:	4b84      	ldr	r3, [pc, #528]	@ (80096c4 <_dtoa_r+0x2d4>)
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80096d8 <_dtoa_r+0x2e8>
 80094ba:	f000 bd33 	b.w	8009f24 <_dtoa_r+0xb34>
 80094be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80094c2:	aa16      	add	r2, sp, #88	@ 0x58
 80094c4:	a917      	add	r1, sp, #92	@ 0x5c
 80094c6:	4658      	mov	r0, fp
 80094c8:	f001 f980 	bl	800a7cc <__d2b>
 80094cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80094d0:	4681      	mov	r9, r0
 80094d2:	2e00      	cmp	r6, #0
 80094d4:	d077      	beq.n	80095c6 <_dtoa_r+0x1d6>
 80094d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80094dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80094e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80094ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80094f0:	4619      	mov	r1, r3
 80094f2:	2200      	movs	r2, #0
 80094f4:	4b74      	ldr	r3, [pc, #464]	@ (80096c8 <_dtoa_r+0x2d8>)
 80094f6:	f7f6 fec7 	bl	8000288 <__aeabi_dsub>
 80094fa:	a369      	add	r3, pc, #420	@ (adr r3, 80096a0 <_dtoa_r+0x2b0>)
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f7f7 f87a 	bl	80005f8 <__aeabi_dmul>
 8009504:	a368      	add	r3, pc, #416	@ (adr r3, 80096a8 <_dtoa_r+0x2b8>)
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	f7f6 febf 	bl	800028c <__adddf3>
 800950e:	4604      	mov	r4, r0
 8009510:	4630      	mov	r0, r6
 8009512:	460d      	mov	r5, r1
 8009514:	f7f7 f806 	bl	8000524 <__aeabi_i2d>
 8009518:	a365      	add	r3, pc, #404	@ (adr r3, 80096b0 <_dtoa_r+0x2c0>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	f7f7 f86b 	bl	80005f8 <__aeabi_dmul>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	4620      	mov	r0, r4
 8009528:	4629      	mov	r1, r5
 800952a:	f7f6 feaf 	bl	800028c <__adddf3>
 800952e:	4604      	mov	r4, r0
 8009530:	460d      	mov	r5, r1
 8009532:	f7f7 fb11 	bl	8000b58 <__aeabi_d2iz>
 8009536:	2200      	movs	r2, #0
 8009538:	4607      	mov	r7, r0
 800953a:	2300      	movs	r3, #0
 800953c:	4620      	mov	r0, r4
 800953e:	4629      	mov	r1, r5
 8009540:	f7f7 facc 	bl	8000adc <__aeabi_dcmplt>
 8009544:	b140      	cbz	r0, 8009558 <_dtoa_r+0x168>
 8009546:	4638      	mov	r0, r7
 8009548:	f7f6 ffec 	bl	8000524 <__aeabi_i2d>
 800954c:	4622      	mov	r2, r4
 800954e:	462b      	mov	r3, r5
 8009550:	f7f7 faba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009554:	b900      	cbnz	r0, 8009558 <_dtoa_r+0x168>
 8009556:	3f01      	subs	r7, #1
 8009558:	2f16      	cmp	r7, #22
 800955a:	d851      	bhi.n	8009600 <_dtoa_r+0x210>
 800955c:	4b5b      	ldr	r3, [pc, #364]	@ (80096cc <_dtoa_r+0x2dc>)
 800955e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800956a:	f7f7 fab7 	bl	8000adc <__aeabi_dcmplt>
 800956e:	2800      	cmp	r0, #0
 8009570:	d048      	beq.n	8009604 <_dtoa_r+0x214>
 8009572:	3f01      	subs	r7, #1
 8009574:	2300      	movs	r3, #0
 8009576:	9312      	str	r3, [sp, #72]	@ 0x48
 8009578:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800957a:	1b9b      	subs	r3, r3, r6
 800957c:	1e5a      	subs	r2, r3, #1
 800957e:	bf44      	itt	mi
 8009580:	f1c3 0801 	rsbmi	r8, r3, #1
 8009584:	2300      	movmi	r3, #0
 8009586:	9208      	str	r2, [sp, #32]
 8009588:	bf54      	ite	pl
 800958a:	f04f 0800 	movpl.w	r8, #0
 800958e:	9308      	strmi	r3, [sp, #32]
 8009590:	2f00      	cmp	r7, #0
 8009592:	db39      	blt.n	8009608 <_dtoa_r+0x218>
 8009594:	9b08      	ldr	r3, [sp, #32]
 8009596:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009598:	443b      	add	r3, r7
 800959a:	9308      	str	r3, [sp, #32]
 800959c:	2300      	movs	r3, #0
 800959e:	930a      	str	r3, [sp, #40]	@ 0x28
 80095a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095a2:	2b09      	cmp	r3, #9
 80095a4:	d864      	bhi.n	8009670 <_dtoa_r+0x280>
 80095a6:	2b05      	cmp	r3, #5
 80095a8:	bfc4      	itt	gt
 80095aa:	3b04      	subgt	r3, #4
 80095ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80095ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b0:	f1a3 0302 	sub.w	r3, r3, #2
 80095b4:	bfcc      	ite	gt
 80095b6:	2400      	movgt	r4, #0
 80095b8:	2401      	movle	r4, #1
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d863      	bhi.n	8009686 <_dtoa_r+0x296>
 80095be:	e8df f003 	tbb	[pc, r3]
 80095c2:	372a      	.short	0x372a
 80095c4:	5535      	.short	0x5535
 80095c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80095ca:	441e      	add	r6, r3
 80095cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	bfc1      	itttt	gt
 80095d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80095d8:	409f      	lslgt	r7, r3
 80095da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80095de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80095e2:	bfd6      	itet	le
 80095e4:	f1c3 0320 	rsble	r3, r3, #32
 80095e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80095ec:	fa04 f003 	lslle.w	r0, r4, r3
 80095f0:	f7f6 ff88 	bl	8000504 <__aeabi_ui2d>
 80095f4:	2201      	movs	r2, #1
 80095f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80095fa:	3e01      	subs	r6, #1
 80095fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80095fe:	e777      	b.n	80094f0 <_dtoa_r+0x100>
 8009600:	2301      	movs	r3, #1
 8009602:	e7b8      	b.n	8009576 <_dtoa_r+0x186>
 8009604:	9012      	str	r0, [sp, #72]	@ 0x48
 8009606:	e7b7      	b.n	8009578 <_dtoa_r+0x188>
 8009608:	427b      	negs	r3, r7
 800960a:	930a      	str	r3, [sp, #40]	@ 0x28
 800960c:	2300      	movs	r3, #0
 800960e:	eba8 0807 	sub.w	r8, r8, r7
 8009612:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009614:	e7c4      	b.n	80095a0 <_dtoa_r+0x1b0>
 8009616:	2300      	movs	r3, #0
 8009618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800961a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800961c:	2b00      	cmp	r3, #0
 800961e:	dc35      	bgt.n	800968c <_dtoa_r+0x29c>
 8009620:	2301      	movs	r3, #1
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	9307      	str	r3, [sp, #28]
 8009626:	461a      	mov	r2, r3
 8009628:	920e      	str	r2, [sp, #56]	@ 0x38
 800962a:	e00b      	b.n	8009644 <_dtoa_r+0x254>
 800962c:	2301      	movs	r3, #1
 800962e:	e7f3      	b.n	8009618 <_dtoa_r+0x228>
 8009630:	2300      	movs	r3, #0
 8009632:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009634:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009636:	18fb      	adds	r3, r7, r3
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	3301      	adds	r3, #1
 800963c:	2b01      	cmp	r3, #1
 800963e:	9307      	str	r3, [sp, #28]
 8009640:	bfb8      	it	lt
 8009642:	2301      	movlt	r3, #1
 8009644:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009648:	2100      	movs	r1, #0
 800964a:	2204      	movs	r2, #4
 800964c:	f102 0514 	add.w	r5, r2, #20
 8009650:	429d      	cmp	r5, r3
 8009652:	d91f      	bls.n	8009694 <_dtoa_r+0x2a4>
 8009654:	6041      	str	r1, [r0, #4]
 8009656:	4658      	mov	r0, fp
 8009658:	f000 fd8e 	bl	800a178 <_Balloc>
 800965c:	4682      	mov	sl, r0
 800965e:	2800      	cmp	r0, #0
 8009660:	d13c      	bne.n	80096dc <_dtoa_r+0x2ec>
 8009662:	4b1b      	ldr	r3, [pc, #108]	@ (80096d0 <_dtoa_r+0x2e0>)
 8009664:	4602      	mov	r2, r0
 8009666:	f240 11af 	movw	r1, #431	@ 0x1af
 800966a:	e6d8      	b.n	800941e <_dtoa_r+0x2e>
 800966c:	2301      	movs	r3, #1
 800966e:	e7e0      	b.n	8009632 <_dtoa_r+0x242>
 8009670:	2401      	movs	r4, #1
 8009672:	2300      	movs	r3, #0
 8009674:	9309      	str	r3, [sp, #36]	@ 0x24
 8009676:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009678:	f04f 33ff 	mov.w	r3, #4294967295
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	9307      	str	r3, [sp, #28]
 8009680:	2200      	movs	r2, #0
 8009682:	2312      	movs	r3, #18
 8009684:	e7d0      	b.n	8009628 <_dtoa_r+0x238>
 8009686:	2301      	movs	r3, #1
 8009688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800968a:	e7f5      	b.n	8009678 <_dtoa_r+0x288>
 800968c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	9307      	str	r3, [sp, #28]
 8009692:	e7d7      	b.n	8009644 <_dtoa_r+0x254>
 8009694:	3101      	adds	r1, #1
 8009696:	0052      	lsls	r2, r2, #1
 8009698:	e7d8      	b.n	800964c <_dtoa_r+0x25c>
 800969a:	bf00      	nop
 800969c:	f3af 8000 	nop.w
 80096a0:	636f4361 	.word	0x636f4361
 80096a4:	3fd287a7 	.word	0x3fd287a7
 80096a8:	8b60c8b3 	.word	0x8b60c8b3
 80096ac:	3fc68a28 	.word	0x3fc68a28
 80096b0:	509f79fb 	.word	0x509f79fb
 80096b4:	3fd34413 	.word	0x3fd34413
 80096b8:	0800b21d 	.word	0x0800b21d
 80096bc:	0800b234 	.word	0x0800b234
 80096c0:	7ff00000 	.word	0x7ff00000
 80096c4:	0800b1ed 	.word	0x0800b1ed
 80096c8:	3ff80000 	.word	0x3ff80000
 80096cc:	0800b330 	.word	0x0800b330
 80096d0:	0800b28c 	.word	0x0800b28c
 80096d4:	0800b219 	.word	0x0800b219
 80096d8:	0800b1ec 	.word	0x0800b1ec
 80096dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096e0:	6018      	str	r0, [r3, #0]
 80096e2:	9b07      	ldr	r3, [sp, #28]
 80096e4:	2b0e      	cmp	r3, #14
 80096e6:	f200 80a4 	bhi.w	8009832 <_dtoa_r+0x442>
 80096ea:	2c00      	cmp	r4, #0
 80096ec:	f000 80a1 	beq.w	8009832 <_dtoa_r+0x442>
 80096f0:	2f00      	cmp	r7, #0
 80096f2:	dd33      	ble.n	800975c <_dtoa_r+0x36c>
 80096f4:	4bad      	ldr	r3, [pc, #692]	@ (80099ac <_dtoa_r+0x5bc>)
 80096f6:	f007 020f 	and.w	r2, r7, #15
 80096fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096fe:	ed93 7b00 	vldr	d7, [r3]
 8009702:	05f8      	lsls	r0, r7, #23
 8009704:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009708:	ea4f 1427 	mov.w	r4, r7, asr #4
 800970c:	d516      	bpl.n	800973c <_dtoa_r+0x34c>
 800970e:	4ba8      	ldr	r3, [pc, #672]	@ (80099b0 <_dtoa_r+0x5c0>)
 8009710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009714:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009718:	f7f7 f898 	bl	800084c <__aeabi_ddiv>
 800971c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009720:	f004 040f 	and.w	r4, r4, #15
 8009724:	2603      	movs	r6, #3
 8009726:	4da2      	ldr	r5, [pc, #648]	@ (80099b0 <_dtoa_r+0x5c0>)
 8009728:	b954      	cbnz	r4, 8009740 <_dtoa_r+0x350>
 800972a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800972e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009732:	f7f7 f88b 	bl	800084c <__aeabi_ddiv>
 8009736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800973a:	e028      	b.n	800978e <_dtoa_r+0x39e>
 800973c:	2602      	movs	r6, #2
 800973e:	e7f2      	b.n	8009726 <_dtoa_r+0x336>
 8009740:	07e1      	lsls	r1, r4, #31
 8009742:	d508      	bpl.n	8009756 <_dtoa_r+0x366>
 8009744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009748:	e9d5 2300 	ldrd	r2, r3, [r5]
 800974c:	f7f6 ff54 	bl	80005f8 <__aeabi_dmul>
 8009750:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009754:	3601      	adds	r6, #1
 8009756:	1064      	asrs	r4, r4, #1
 8009758:	3508      	adds	r5, #8
 800975a:	e7e5      	b.n	8009728 <_dtoa_r+0x338>
 800975c:	f000 80d2 	beq.w	8009904 <_dtoa_r+0x514>
 8009760:	427c      	negs	r4, r7
 8009762:	4b92      	ldr	r3, [pc, #584]	@ (80099ac <_dtoa_r+0x5bc>)
 8009764:	4d92      	ldr	r5, [pc, #584]	@ (80099b0 <_dtoa_r+0x5c0>)
 8009766:	f004 020f 	and.w	r2, r4, #15
 800976a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009776:	f7f6 ff3f 	bl	80005f8 <__aeabi_dmul>
 800977a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800977e:	1124      	asrs	r4, r4, #4
 8009780:	2300      	movs	r3, #0
 8009782:	2602      	movs	r6, #2
 8009784:	2c00      	cmp	r4, #0
 8009786:	f040 80b2 	bne.w	80098ee <_dtoa_r+0x4fe>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1d3      	bne.n	8009736 <_dtoa_r+0x346>
 800978e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009790:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 80b7 	beq.w	8009908 <_dtoa_r+0x518>
 800979a:	4b86      	ldr	r3, [pc, #536]	@ (80099b4 <_dtoa_r+0x5c4>)
 800979c:	2200      	movs	r2, #0
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7f7 f99b 	bl	8000adc <__aeabi_dcmplt>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f000 80ae 	beq.w	8009908 <_dtoa_r+0x518>
 80097ac:	9b07      	ldr	r3, [sp, #28]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 80aa 	beq.w	8009908 <_dtoa_r+0x518>
 80097b4:	9b00      	ldr	r3, [sp, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	dd37      	ble.n	800982a <_dtoa_r+0x43a>
 80097ba:	1e7b      	subs	r3, r7, #1
 80097bc:	9304      	str	r3, [sp, #16]
 80097be:	4620      	mov	r0, r4
 80097c0:	4b7d      	ldr	r3, [pc, #500]	@ (80099b8 <_dtoa_r+0x5c8>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	4629      	mov	r1, r5
 80097c6:	f7f6 ff17 	bl	80005f8 <__aeabi_dmul>
 80097ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ce:	9c00      	ldr	r4, [sp, #0]
 80097d0:	3601      	adds	r6, #1
 80097d2:	4630      	mov	r0, r6
 80097d4:	f7f6 fea6 	bl	8000524 <__aeabi_i2d>
 80097d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097dc:	f7f6 ff0c 	bl	80005f8 <__aeabi_dmul>
 80097e0:	4b76      	ldr	r3, [pc, #472]	@ (80099bc <_dtoa_r+0x5cc>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	f7f6 fd52 	bl	800028c <__adddf3>
 80097e8:	4605      	mov	r5, r0
 80097ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80097ee:	2c00      	cmp	r4, #0
 80097f0:	f040 808d 	bne.w	800990e <_dtoa_r+0x51e>
 80097f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f8:	4b71      	ldr	r3, [pc, #452]	@ (80099c0 <_dtoa_r+0x5d0>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	f7f6 fd44 	bl	8000288 <__aeabi_dsub>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009808:	462a      	mov	r2, r5
 800980a:	4633      	mov	r3, r6
 800980c:	f7f7 f984 	bl	8000b18 <__aeabi_dcmpgt>
 8009810:	2800      	cmp	r0, #0
 8009812:	f040 828b 	bne.w	8009d2c <_dtoa_r+0x93c>
 8009816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800981a:	462a      	mov	r2, r5
 800981c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009820:	f7f7 f95c 	bl	8000adc <__aeabi_dcmplt>
 8009824:	2800      	cmp	r0, #0
 8009826:	f040 8128 	bne.w	8009a7a <_dtoa_r+0x68a>
 800982a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800982e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009832:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009834:	2b00      	cmp	r3, #0
 8009836:	f2c0 815a 	blt.w	8009aee <_dtoa_r+0x6fe>
 800983a:	2f0e      	cmp	r7, #14
 800983c:	f300 8157 	bgt.w	8009aee <_dtoa_r+0x6fe>
 8009840:	4b5a      	ldr	r3, [pc, #360]	@ (80099ac <_dtoa_r+0x5bc>)
 8009842:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009846:	ed93 7b00 	vldr	d7, [r3]
 800984a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800984c:	2b00      	cmp	r3, #0
 800984e:	ed8d 7b00 	vstr	d7, [sp]
 8009852:	da03      	bge.n	800985c <_dtoa_r+0x46c>
 8009854:	9b07      	ldr	r3, [sp, #28]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f340 8101 	ble.w	8009a5e <_dtoa_r+0x66e>
 800985c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009860:	4656      	mov	r6, sl
 8009862:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009866:	4620      	mov	r0, r4
 8009868:	4629      	mov	r1, r5
 800986a:	f7f6 ffef 	bl	800084c <__aeabi_ddiv>
 800986e:	f7f7 f973 	bl	8000b58 <__aeabi_d2iz>
 8009872:	4680      	mov	r8, r0
 8009874:	f7f6 fe56 	bl	8000524 <__aeabi_i2d>
 8009878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800987c:	f7f6 febc 	bl	80005f8 <__aeabi_dmul>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	4620      	mov	r0, r4
 8009886:	4629      	mov	r1, r5
 8009888:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800988c:	f7f6 fcfc 	bl	8000288 <__aeabi_dsub>
 8009890:	f806 4b01 	strb.w	r4, [r6], #1
 8009894:	9d07      	ldr	r5, [sp, #28]
 8009896:	eba6 040a 	sub.w	r4, r6, sl
 800989a:	42a5      	cmp	r5, r4
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	f040 8117 	bne.w	8009ad2 <_dtoa_r+0x6e2>
 80098a4:	f7f6 fcf2 	bl	800028c <__adddf3>
 80098a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098ac:	4604      	mov	r4, r0
 80098ae:	460d      	mov	r5, r1
 80098b0:	f7f7 f932 	bl	8000b18 <__aeabi_dcmpgt>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	f040 80f9 	bne.w	8009aac <_dtoa_r+0x6bc>
 80098ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098be:	4620      	mov	r0, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	f7f7 f901 	bl	8000ac8 <__aeabi_dcmpeq>
 80098c6:	b118      	cbz	r0, 80098d0 <_dtoa_r+0x4e0>
 80098c8:	f018 0f01 	tst.w	r8, #1
 80098cc:	f040 80ee 	bne.w	8009aac <_dtoa_r+0x6bc>
 80098d0:	4649      	mov	r1, r9
 80098d2:	4658      	mov	r0, fp
 80098d4:	f000 fc90 	bl	800a1f8 <_Bfree>
 80098d8:	2300      	movs	r3, #0
 80098da:	7033      	strb	r3, [r6, #0]
 80098dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80098de:	3701      	adds	r7, #1
 80098e0:	601f      	str	r7, [r3, #0]
 80098e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 831d 	beq.w	8009f24 <_dtoa_r+0xb34>
 80098ea:	601e      	str	r6, [r3, #0]
 80098ec:	e31a      	b.n	8009f24 <_dtoa_r+0xb34>
 80098ee:	07e2      	lsls	r2, r4, #31
 80098f0:	d505      	bpl.n	80098fe <_dtoa_r+0x50e>
 80098f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098f6:	f7f6 fe7f 	bl	80005f8 <__aeabi_dmul>
 80098fa:	3601      	adds	r6, #1
 80098fc:	2301      	movs	r3, #1
 80098fe:	1064      	asrs	r4, r4, #1
 8009900:	3508      	adds	r5, #8
 8009902:	e73f      	b.n	8009784 <_dtoa_r+0x394>
 8009904:	2602      	movs	r6, #2
 8009906:	e742      	b.n	800978e <_dtoa_r+0x39e>
 8009908:	9c07      	ldr	r4, [sp, #28]
 800990a:	9704      	str	r7, [sp, #16]
 800990c:	e761      	b.n	80097d2 <_dtoa_r+0x3e2>
 800990e:	4b27      	ldr	r3, [pc, #156]	@ (80099ac <_dtoa_r+0x5bc>)
 8009910:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009912:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009916:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800991a:	4454      	add	r4, sl
 800991c:	2900      	cmp	r1, #0
 800991e:	d053      	beq.n	80099c8 <_dtoa_r+0x5d8>
 8009920:	4928      	ldr	r1, [pc, #160]	@ (80099c4 <_dtoa_r+0x5d4>)
 8009922:	2000      	movs	r0, #0
 8009924:	f7f6 ff92 	bl	800084c <__aeabi_ddiv>
 8009928:	4633      	mov	r3, r6
 800992a:	462a      	mov	r2, r5
 800992c:	f7f6 fcac 	bl	8000288 <__aeabi_dsub>
 8009930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009934:	4656      	mov	r6, sl
 8009936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800993a:	f7f7 f90d 	bl	8000b58 <__aeabi_d2iz>
 800993e:	4605      	mov	r5, r0
 8009940:	f7f6 fdf0 	bl	8000524 <__aeabi_i2d>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800994c:	f7f6 fc9c 	bl	8000288 <__aeabi_dsub>
 8009950:	3530      	adds	r5, #48	@ 0x30
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800995a:	f806 5b01 	strb.w	r5, [r6], #1
 800995e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009962:	f7f7 f8bb 	bl	8000adc <__aeabi_dcmplt>
 8009966:	2800      	cmp	r0, #0
 8009968:	d171      	bne.n	8009a4e <_dtoa_r+0x65e>
 800996a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800996e:	4911      	ldr	r1, [pc, #68]	@ (80099b4 <_dtoa_r+0x5c4>)
 8009970:	2000      	movs	r0, #0
 8009972:	f7f6 fc89 	bl	8000288 <__aeabi_dsub>
 8009976:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800997a:	f7f7 f8af 	bl	8000adc <__aeabi_dcmplt>
 800997e:	2800      	cmp	r0, #0
 8009980:	f040 8095 	bne.w	8009aae <_dtoa_r+0x6be>
 8009984:	42a6      	cmp	r6, r4
 8009986:	f43f af50 	beq.w	800982a <_dtoa_r+0x43a>
 800998a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800998e:	4b0a      	ldr	r3, [pc, #40]	@ (80099b8 <_dtoa_r+0x5c8>)
 8009990:	2200      	movs	r2, #0
 8009992:	f7f6 fe31 	bl	80005f8 <__aeabi_dmul>
 8009996:	4b08      	ldr	r3, [pc, #32]	@ (80099b8 <_dtoa_r+0x5c8>)
 8009998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800999c:	2200      	movs	r2, #0
 800999e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099a2:	f7f6 fe29 	bl	80005f8 <__aeabi_dmul>
 80099a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099aa:	e7c4      	b.n	8009936 <_dtoa_r+0x546>
 80099ac:	0800b330 	.word	0x0800b330
 80099b0:	0800b308 	.word	0x0800b308
 80099b4:	3ff00000 	.word	0x3ff00000
 80099b8:	40240000 	.word	0x40240000
 80099bc:	401c0000 	.word	0x401c0000
 80099c0:	40140000 	.word	0x40140000
 80099c4:	3fe00000 	.word	0x3fe00000
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	f7f6 fe14 	bl	80005f8 <__aeabi_dmul>
 80099d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80099d6:	4656      	mov	r6, sl
 80099d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099dc:	f7f7 f8bc 	bl	8000b58 <__aeabi_d2iz>
 80099e0:	4605      	mov	r5, r0
 80099e2:	f7f6 fd9f 	bl	8000524 <__aeabi_i2d>
 80099e6:	4602      	mov	r2, r0
 80099e8:	460b      	mov	r3, r1
 80099ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099ee:	f7f6 fc4b 	bl	8000288 <__aeabi_dsub>
 80099f2:	3530      	adds	r5, #48	@ 0x30
 80099f4:	f806 5b01 	strb.w	r5, [r6], #1
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	42a6      	cmp	r6, r4
 80099fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a02:	f04f 0200 	mov.w	r2, #0
 8009a06:	d124      	bne.n	8009a52 <_dtoa_r+0x662>
 8009a08:	4bac      	ldr	r3, [pc, #688]	@ (8009cbc <_dtoa_r+0x8cc>)
 8009a0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a0e:	f7f6 fc3d 	bl	800028c <__adddf3>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a1a:	f7f7 f87d 	bl	8000b18 <__aeabi_dcmpgt>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d145      	bne.n	8009aae <_dtoa_r+0x6be>
 8009a22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a26:	49a5      	ldr	r1, [pc, #660]	@ (8009cbc <_dtoa_r+0x8cc>)
 8009a28:	2000      	movs	r0, #0
 8009a2a:	f7f6 fc2d 	bl	8000288 <__aeabi_dsub>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a36:	f7f7 f851 	bl	8000adc <__aeabi_dcmplt>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	f43f aef5 	beq.w	800982a <_dtoa_r+0x43a>
 8009a40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009a42:	1e73      	subs	r3, r6, #1
 8009a44:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a4a:	2b30      	cmp	r3, #48	@ 0x30
 8009a4c:	d0f8      	beq.n	8009a40 <_dtoa_r+0x650>
 8009a4e:	9f04      	ldr	r7, [sp, #16]
 8009a50:	e73e      	b.n	80098d0 <_dtoa_r+0x4e0>
 8009a52:	4b9b      	ldr	r3, [pc, #620]	@ (8009cc0 <_dtoa_r+0x8d0>)
 8009a54:	f7f6 fdd0 	bl	80005f8 <__aeabi_dmul>
 8009a58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a5c:	e7bc      	b.n	80099d8 <_dtoa_r+0x5e8>
 8009a5e:	d10c      	bne.n	8009a7a <_dtoa_r+0x68a>
 8009a60:	4b98      	ldr	r3, [pc, #608]	@ (8009cc4 <_dtoa_r+0x8d4>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a68:	f7f6 fdc6 	bl	80005f8 <__aeabi_dmul>
 8009a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a70:	f7f7 f848 	bl	8000b04 <__aeabi_dcmpge>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f000 8157 	beq.w	8009d28 <_dtoa_r+0x938>
 8009a7a:	2400      	movs	r4, #0
 8009a7c:	4625      	mov	r5, r4
 8009a7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a80:	43db      	mvns	r3, r3
 8009a82:	9304      	str	r3, [sp, #16]
 8009a84:	4656      	mov	r6, sl
 8009a86:	2700      	movs	r7, #0
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4658      	mov	r0, fp
 8009a8c:	f000 fbb4 	bl	800a1f8 <_Bfree>
 8009a90:	2d00      	cmp	r5, #0
 8009a92:	d0dc      	beq.n	8009a4e <_dtoa_r+0x65e>
 8009a94:	b12f      	cbz	r7, 8009aa2 <_dtoa_r+0x6b2>
 8009a96:	42af      	cmp	r7, r5
 8009a98:	d003      	beq.n	8009aa2 <_dtoa_r+0x6b2>
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	4658      	mov	r0, fp
 8009a9e:	f000 fbab 	bl	800a1f8 <_Bfree>
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	4658      	mov	r0, fp
 8009aa6:	f000 fba7 	bl	800a1f8 <_Bfree>
 8009aaa:	e7d0      	b.n	8009a4e <_dtoa_r+0x65e>
 8009aac:	9704      	str	r7, [sp, #16]
 8009aae:	4633      	mov	r3, r6
 8009ab0:	461e      	mov	r6, r3
 8009ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ab6:	2a39      	cmp	r2, #57	@ 0x39
 8009ab8:	d107      	bne.n	8009aca <_dtoa_r+0x6da>
 8009aba:	459a      	cmp	sl, r3
 8009abc:	d1f8      	bne.n	8009ab0 <_dtoa_r+0x6c0>
 8009abe:	9a04      	ldr	r2, [sp, #16]
 8009ac0:	3201      	adds	r2, #1
 8009ac2:	9204      	str	r2, [sp, #16]
 8009ac4:	2230      	movs	r2, #48	@ 0x30
 8009ac6:	f88a 2000 	strb.w	r2, [sl]
 8009aca:	781a      	ldrb	r2, [r3, #0]
 8009acc:	3201      	adds	r2, #1
 8009ace:	701a      	strb	r2, [r3, #0]
 8009ad0:	e7bd      	b.n	8009a4e <_dtoa_r+0x65e>
 8009ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8009cc0 <_dtoa_r+0x8d0>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f7f6 fd8f 	bl	80005f8 <__aeabi_dmul>
 8009ada:	2200      	movs	r2, #0
 8009adc:	2300      	movs	r3, #0
 8009ade:	4604      	mov	r4, r0
 8009ae0:	460d      	mov	r5, r1
 8009ae2:	f7f6 fff1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	f43f aebb 	beq.w	8009862 <_dtoa_r+0x472>
 8009aec:	e6f0      	b.n	80098d0 <_dtoa_r+0x4e0>
 8009aee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009af0:	2a00      	cmp	r2, #0
 8009af2:	f000 80db 	beq.w	8009cac <_dtoa_r+0x8bc>
 8009af6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009af8:	2a01      	cmp	r2, #1
 8009afa:	f300 80bf 	bgt.w	8009c7c <_dtoa_r+0x88c>
 8009afe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	f000 80b7 	beq.w	8009c74 <_dtoa_r+0x884>
 8009b06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b0c:	4646      	mov	r6, r8
 8009b0e:	9a08      	ldr	r2, [sp, #32]
 8009b10:	2101      	movs	r1, #1
 8009b12:	441a      	add	r2, r3
 8009b14:	4658      	mov	r0, fp
 8009b16:	4498      	add	r8, r3
 8009b18:	9208      	str	r2, [sp, #32]
 8009b1a:	f000 fc21 	bl	800a360 <__i2b>
 8009b1e:	4605      	mov	r5, r0
 8009b20:	b15e      	cbz	r6, 8009b3a <_dtoa_r+0x74a>
 8009b22:	9b08      	ldr	r3, [sp, #32]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	dd08      	ble.n	8009b3a <_dtoa_r+0x74a>
 8009b28:	42b3      	cmp	r3, r6
 8009b2a:	9a08      	ldr	r2, [sp, #32]
 8009b2c:	bfa8      	it	ge
 8009b2e:	4633      	movge	r3, r6
 8009b30:	eba8 0803 	sub.w	r8, r8, r3
 8009b34:	1af6      	subs	r6, r6, r3
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	9308      	str	r3, [sp, #32]
 8009b3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b3c:	b1f3      	cbz	r3, 8009b7c <_dtoa_r+0x78c>
 8009b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 80b7 	beq.w	8009cb4 <_dtoa_r+0x8c4>
 8009b46:	b18c      	cbz	r4, 8009b6c <_dtoa_r+0x77c>
 8009b48:	4629      	mov	r1, r5
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	4658      	mov	r0, fp
 8009b4e:	f000 fcc7 	bl	800a4e0 <__pow5mult>
 8009b52:	464a      	mov	r2, r9
 8009b54:	4601      	mov	r1, r0
 8009b56:	4605      	mov	r5, r0
 8009b58:	4658      	mov	r0, fp
 8009b5a:	f000 fc17 	bl	800a38c <__multiply>
 8009b5e:	4649      	mov	r1, r9
 8009b60:	9004      	str	r0, [sp, #16]
 8009b62:	4658      	mov	r0, fp
 8009b64:	f000 fb48 	bl	800a1f8 <_Bfree>
 8009b68:	9b04      	ldr	r3, [sp, #16]
 8009b6a:	4699      	mov	r9, r3
 8009b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b6e:	1b1a      	subs	r2, r3, r4
 8009b70:	d004      	beq.n	8009b7c <_dtoa_r+0x78c>
 8009b72:	4649      	mov	r1, r9
 8009b74:	4658      	mov	r0, fp
 8009b76:	f000 fcb3 	bl	800a4e0 <__pow5mult>
 8009b7a:	4681      	mov	r9, r0
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	4658      	mov	r0, fp
 8009b80:	f000 fbee 	bl	800a360 <__i2b>
 8009b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b86:	4604      	mov	r4, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 81cf 	beq.w	8009f2c <_dtoa_r+0xb3c>
 8009b8e:	461a      	mov	r2, r3
 8009b90:	4601      	mov	r1, r0
 8009b92:	4658      	mov	r0, fp
 8009b94:	f000 fca4 	bl	800a4e0 <__pow5mult>
 8009b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	f300 8095 	bgt.w	8009ccc <_dtoa_r+0x8dc>
 8009ba2:	9b02      	ldr	r3, [sp, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f040 8087 	bne.w	8009cb8 <_dtoa_r+0x8c8>
 8009baa:	9b03      	ldr	r3, [sp, #12]
 8009bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f040 8089 	bne.w	8009cc8 <_dtoa_r+0x8d8>
 8009bb6:	9b03      	ldr	r3, [sp, #12]
 8009bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bbc:	0d1b      	lsrs	r3, r3, #20
 8009bbe:	051b      	lsls	r3, r3, #20
 8009bc0:	b12b      	cbz	r3, 8009bce <_dtoa_r+0x7de>
 8009bc2:	9b08      	ldr	r3, [sp, #32]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	9308      	str	r3, [sp, #32]
 8009bc8:	f108 0801 	add.w	r8, r8, #1
 8009bcc:	2301      	movs	r3, #1
 8009bce:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 81b0 	beq.w	8009f38 <_dtoa_r+0xb48>
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bde:	6918      	ldr	r0, [r3, #16]
 8009be0:	f000 fb72 	bl	800a2c8 <__hi0bits>
 8009be4:	f1c0 0020 	rsb	r0, r0, #32
 8009be8:	9b08      	ldr	r3, [sp, #32]
 8009bea:	4418      	add	r0, r3
 8009bec:	f010 001f 	ands.w	r0, r0, #31
 8009bf0:	d077      	beq.n	8009ce2 <_dtoa_r+0x8f2>
 8009bf2:	f1c0 0320 	rsb	r3, r0, #32
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	dd6b      	ble.n	8009cd2 <_dtoa_r+0x8e2>
 8009bfa:	9b08      	ldr	r3, [sp, #32]
 8009bfc:	f1c0 001c 	rsb	r0, r0, #28
 8009c00:	4403      	add	r3, r0
 8009c02:	4480      	add	r8, r0
 8009c04:	4406      	add	r6, r0
 8009c06:	9308      	str	r3, [sp, #32]
 8009c08:	f1b8 0f00 	cmp.w	r8, #0
 8009c0c:	dd05      	ble.n	8009c1a <_dtoa_r+0x82a>
 8009c0e:	4649      	mov	r1, r9
 8009c10:	4642      	mov	r2, r8
 8009c12:	4658      	mov	r0, fp
 8009c14:	f000 fcbe 	bl	800a594 <__lshift>
 8009c18:	4681      	mov	r9, r0
 8009c1a:	9b08      	ldr	r3, [sp, #32]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dd05      	ble.n	8009c2c <_dtoa_r+0x83c>
 8009c20:	4621      	mov	r1, r4
 8009c22:	461a      	mov	r2, r3
 8009c24:	4658      	mov	r0, fp
 8009c26:	f000 fcb5 	bl	800a594 <__lshift>
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d059      	beq.n	8009ce6 <_dtoa_r+0x8f6>
 8009c32:	4621      	mov	r1, r4
 8009c34:	4648      	mov	r0, r9
 8009c36:	f000 fd19 	bl	800a66c <__mcmp>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	da53      	bge.n	8009ce6 <_dtoa_r+0x8f6>
 8009c3e:	1e7b      	subs	r3, r7, #1
 8009c40:	9304      	str	r3, [sp, #16]
 8009c42:	4649      	mov	r1, r9
 8009c44:	2300      	movs	r3, #0
 8009c46:	220a      	movs	r2, #10
 8009c48:	4658      	mov	r0, fp
 8009c4a:	f000 faf7 	bl	800a23c <__multadd>
 8009c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c50:	4681      	mov	r9, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 8172 	beq.w	8009f3c <_dtoa_r+0xb4c>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4629      	mov	r1, r5
 8009c5c:	220a      	movs	r2, #10
 8009c5e:	4658      	mov	r0, fp
 8009c60:	f000 faec 	bl	800a23c <__multadd>
 8009c64:	9b00      	ldr	r3, [sp, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	4605      	mov	r5, r0
 8009c6a:	dc67      	bgt.n	8009d3c <_dtoa_r+0x94c>
 8009c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	dc41      	bgt.n	8009cf6 <_dtoa_r+0x906>
 8009c72:	e063      	b.n	8009d3c <_dtoa_r+0x94c>
 8009c74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009c76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009c7a:	e746      	b.n	8009b0a <_dtoa_r+0x71a>
 8009c7c:	9b07      	ldr	r3, [sp, #28]
 8009c7e:	1e5c      	subs	r4, r3, #1
 8009c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c82:	42a3      	cmp	r3, r4
 8009c84:	bfbf      	itttt	lt
 8009c86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009c88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009c8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009c8c:	1ae3      	sublt	r3, r4, r3
 8009c8e:	bfb4      	ite	lt
 8009c90:	18d2      	addlt	r2, r2, r3
 8009c92:	1b1c      	subge	r4, r3, r4
 8009c94:	9b07      	ldr	r3, [sp, #28]
 8009c96:	bfbc      	itt	lt
 8009c98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009c9a:	2400      	movlt	r4, #0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	bfb5      	itete	lt
 8009ca0:	eba8 0603 	sublt.w	r6, r8, r3
 8009ca4:	9b07      	ldrge	r3, [sp, #28]
 8009ca6:	2300      	movlt	r3, #0
 8009ca8:	4646      	movge	r6, r8
 8009caa:	e730      	b.n	8009b0e <_dtoa_r+0x71e>
 8009cac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009cae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009cb0:	4646      	mov	r6, r8
 8009cb2:	e735      	b.n	8009b20 <_dtoa_r+0x730>
 8009cb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cb6:	e75c      	b.n	8009b72 <_dtoa_r+0x782>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	e788      	b.n	8009bce <_dtoa_r+0x7de>
 8009cbc:	3fe00000 	.word	0x3fe00000
 8009cc0:	40240000 	.word	0x40240000
 8009cc4:	40140000 	.word	0x40140000
 8009cc8:	9b02      	ldr	r3, [sp, #8]
 8009cca:	e780      	b.n	8009bce <_dtoa_r+0x7de>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cd0:	e782      	b.n	8009bd8 <_dtoa_r+0x7e8>
 8009cd2:	d099      	beq.n	8009c08 <_dtoa_r+0x818>
 8009cd4:	9a08      	ldr	r2, [sp, #32]
 8009cd6:	331c      	adds	r3, #28
 8009cd8:	441a      	add	r2, r3
 8009cda:	4498      	add	r8, r3
 8009cdc:	441e      	add	r6, r3
 8009cde:	9208      	str	r2, [sp, #32]
 8009ce0:	e792      	b.n	8009c08 <_dtoa_r+0x818>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	e7f6      	b.n	8009cd4 <_dtoa_r+0x8e4>
 8009ce6:	9b07      	ldr	r3, [sp, #28]
 8009ce8:	9704      	str	r7, [sp, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dc20      	bgt.n	8009d30 <_dtoa_r+0x940>
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	dd1e      	ble.n	8009d34 <_dtoa_r+0x944>
 8009cf6:	9b00      	ldr	r3, [sp, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f47f aec0 	bne.w	8009a7e <_dtoa_r+0x68e>
 8009cfe:	4621      	mov	r1, r4
 8009d00:	2205      	movs	r2, #5
 8009d02:	4658      	mov	r0, fp
 8009d04:	f000 fa9a 	bl	800a23c <__multadd>
 8009d08:	4601      	mov	r1, r0
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	4648      	mov	r0, r9
 8009d0e:	f000 fcad 	bl	800a66c <__mcmp>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	f77f aeb3 	ble.w	8009a7e <_dtoa_r+0x68e>
 8009d18:	4656      	mov	r6, sl
 8009d1a:	2331      	movs	r3, #49	@ 0x31
 8009d1c:	f806 3b01 	strb.w	r3, [r6], #1
 8009d20:	9b04      	ldr	r3, [sp, #16]
 8009d22:	3301      	adds	r3, #1
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	e6ae      	b.n	8009a86 <_dtoa_r+0x696>
 8009d28:	9c07      	ldr	r4, [sp, #28]
 8009d2a:	9704      	str	r7, [sp, #16]
 8009d2c:	4625      	mov	r5, r4
 8009d2e:	e7f3      	b.n	8009d18 <_dtoa_r+0x928>
 8009d30:	9b07      	ldr	r3, [sp, #28]
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f000 8104 	beq.w	8009f44 <_dtoa_r+0xb54>
 8009d3c:	2e00      	cmp	r6, #0
 8009d3e:	dd05      	ble.n	8009d4c <_dtoa_r+0x95c>
 8009d40:	4629      	mov	r1, r5
 8009d42:	4632      	mov	r2, r6
 8009d44:	4658      	mov	r0, fp
 8009d46:	f000 fc25 	bl	800a594 <__lshift>
 8009d4a:	4605      	mov	r5, r0
 8009d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d05a      	beq.n	8009e08 <_dtoa_r+0xa18>
 8009d52:	6869      	ldr	r1, [r5, #4]
 8009d54:	4658      	mov	r0, fp
 8009d56:	f000 fa0f 	bl	800a178 <_Balloc>
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	b928      	cbnz	r0, 8009d6a <_dtoa_r+0x97a>
 8009d5e:	4b84      	ldr	r3, [pc, #528]	@ (8009f70 <_dtoa_r+0xb80>)
 8009d60:	4602      	mov	r2, r0
 8009d62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d66:	f7ff bb5a 	b.w	800941e <_dtoa_r+0x2e>
 8009d6a:	692a      	ldr	r2, [r5, #16]
 8009d6c:	3202      	adds	r2, #2
 8009d6e:	0092      	lsls	r2, r2, #2
 8009d70:	f105 010c 	add.w	r1, r5, #12
 8009d74:	300c      	adds	r0, #12
 8009d76:	f7ff faa2 	bl	80092be <memcpy>
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4658      	mov	r0, fp
 8009d80:	f000 fc08 	bl	800a594 <__lshift>
 8009d84:	f10a 0301 	add.w	r3, sl, #1
 8009d88:	9307      	str	r3, [sp, #28]
 8009d8a:	9b00      	ldr	r3, [sp, #0]
 8009d8c:	4453      	add	r3, sl
 8009d8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d90:	9b02      	ldr	r3, [sp, #8]
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	462f      	mov	r7, r5
 8009d98:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	9b07      	ldr	r3, [sp, #28]
 8009d9e:	4621      	mov	r1, r4
 8009da0:	3b01      	subs	r3, #1
 8009da2:	4648      	mov	r0, r9
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	f7ff fa98 	bl	80092da <quorem>
 8009daa:	4639      	mov	r1, r7
 8009dac:	9002      	str	r0, [sp, #8]
 8009dae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009db2:	4648      	mov	r0, r9
 8009db4:	f000 fc5a 	bl	800a66c <__mcmp>
 8009db8:	462a      	mov	r2, r5
 8009dba:	9008      	str	r0, [sp, #32]
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4658      	mov	r0, fp
 8009dc0:	f000 fc70 	bl	800a6a4 <__mdiff>
 8009dc4:	68c2      	ldr	r2, [r0, #12]
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	bb02      	cbnz	r2, 8009e0c <_dtoa_r+0xa1c>
 8009dca:	4601      	mov	r1, r0
 8009dcc:	4648      	mov	r0, r9
 8009dce:	f000 fc4d 	bl	800a66c <__mcmp>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	4631      	mov	r1, r6
 8009dd6:	4658      	mov	r0, fp
 8009dd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009dda:	f000 fa0d 	bl	800a1f8 <_Bfree>
 8009dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009de2:	9e07      	ldr	r6, [sp, #28]
 8009de4:	ea43 0102 	orr.w	r1, r3, r2
 8009de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dea:	4319      	orrs	r1, r3
 8009dec:	d110      	bne.n	8009e10 <_dtoa_r+0xa20>
 8009dee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009df2:	d029      	beq.n	8009e48 <_dtoa_r+0xa58>
 8009df4:	9b08      	ldr	r3, [sp, #32]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	dd02      	ble.n	8009e00 <_dtoa_r+0xa10>
 8009dfa:	9b02      	ldr	r3, [sp, #8]
 8009dfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009e00:	9b00      	ldr	r3, [sp, #0]
 8009e02:	f883 8000 	strb.w	r8, [r3]
 8009e06:	e63f      	b.n	8009a88 <_dtoa_r+0x698>
 8009e08:	4628      	mov	r0, r5
 8009e0a:	e7bb      	b.n	8009d84 <_dtoa_r+0x994>
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	e7e1      	b.n	8009dd4 <_dtoa_r+0x9e4>
 8009e10:	9b08      	ldr	r3, [sp, #32]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	db04      	blt.n	8009e20 <_dtoa_r+0xa30>
 8009e16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	d120      	bne.n	8009e62 <_dtoa_r+0xa72>
 8009e20:	2a00      	cmp	r2, #0
 8009e22:	dded      	ble.n	8009e00 <_dtoa_r+0xa10>
 8009e24:	4649      	mov	r1, r9
 8009e26:	2201      	movs	r2, #1
 8009e28:	4658      	mov	r0, fp
 8009e2a:	f000 fbb3 	bl	800a594 <__lshift>
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4681      	mov	r9, r0
 8009e32:	f000 fc1b 	bl	800a66c <__mcmp>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	dc03      	bgt.n	8009e42 <_dtoa_r+0xa52>
 8009e3a:	d1e1      	bne.n	8009e00 <_dtoa_r+0xa10>
 8009e3c:	f018 0f01 	tst.w	r8, #1
 8009e40:	d0de      	beq.n	8009e00 <_dtoa_r+0xa10>
 8009e42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e46:	d1d8      	bne.n	8009dfa <_dtoa_r+0xa0a>
 8009e48:	9a00      	ldr	r2, [sp, #0]
 8009e4a:	2339      	movs	r3, #57	@ 0x39
 8009e4c:	7013      	strb	r3, [r2, #0]
 8009e4e:	4633      	mov	r3, r6
 8009e50:	461e      	mov	r6, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e58:	2a39      	cmp	r2, #57	@ 0x39
 8009e5a:	d052      	beq.n	8009f02 <_dtoa_r+0xb12>
 8009e5c:	3201      	adds	r2, #1
 8009e5e:	701a      	strb	r2, [r3, #0]
 8009e60:	e612      	b.n	8009a88 <_dtoa_r+0x698>
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	dd07      	ble.n	8009e76 <_dtoa_r+0xa86>
 8009e66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e6a:	d0ed      	beq.n	8009e48 <_dtoa_r+0xa58>
 8009e6c:	9a00      	ldr	r2, [sp, #0]
 8009e6e:	f108 0301 	add.w	r3, r8, #1
 8009e72:	7013      	strb	r3, [r2, #0]
 8009e74:	e608      	b.n	8009a88 <_dtoa_r+0x698>
 8009e76:	9b07      	ldr	r3, [sp, #28]
 8009e78:	9a07      	ldr	r2, [sp, #28]
 8009e7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d028      	beq.n	8009ed6 <_dtoa_r+0xae6>
 8009e84:	4649      	mov	r1, r9
 8009e86:	2300      	movs	r3, #0
 8009e88:	220a      	movs	r2, #10
 8009e8a:	4658      	mov	r0, fp
 8009e8c:	f000 f9d6 	bl	800a23c <__multadd>
 8009e90:	42af      	cmp	r7, r5
 8009e92:	4681      	mov	r9, r0
 8009e94:	f04f 0300 	mov.w	r3, #0
 8009e98:	f04f 020a 	mov.w	r2, #10
 8009e9c:	4639      	mov	r1, r7
 8009e9e:	4658      	mov	r0, fp
 8009ea0:	d107      	bne.n	8009eb2 <_dtoa_r+0xac2>
 8009ea2:	f000 f9cb 	bl	800a23c <__multadd>
 8009ea6:	4607      	mov	r7, r0
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	9b07      	ldr	r3, [sp, #28]
 8009eac:	3301      	adds	r3, #1
 8009eae:	9307      	str	r3, [sp, #28]
 8009eb0:	e774      	b.n	8009d9c <_dtoa_r+0x9ac>
 8009eb2:	f000 f9c3 	bl	800a23c <__multadd>
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	4607      	mov	r7, r0
 8009eba:	2300      	movs	r3, #0
 8009ebc:	220a      	movs	r2, #10
 8009ebe:	4658      	mov	r0, fp
 8009ec0:	f000 f9bc 	bl	800a23c <__multadd>
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	e7f0      	b.n	8009eaa <_dtoa_r+0xaba>
 8009ec8:	9b00      	ldr	r3, [sp, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	bfcc      	ite	gt
 8009ece:	461e      	movgt	r6, r3
 8009ed0:	2601      	movle	r6, #1
 8009ed2:	4456      	add	r6, sl
 8009ed4:	2700      	movs	r7, #0
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	2201      	movs	r2, #1
 8009eda:	4658      	mov	r0, fp
 8009edc:	f000 fb5a 	bl	800a594 <__lshift>
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4681      	mov	r9, r0
 8009ee4:	f000 fbc2 	bl	800a66c <__mcmp>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	dcb0      	bgt.n	8009e4e <_dtoa_r+0xa5e>
 8009eec:	d102      	bne.n	8009ef4 <_dtoa_r+0xb04>
 8009eee:	f018 0f01 	tst.w	r8, #1
 8009ef2:	d1ac      	bne.n	8009e4e <_dtoa_r+0xa5e>
 8009ef4:	4633      	mov	r3, r6
 8009ef6:	461e      	mov	r6, r3
 8009ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009efc:	2a30      	cmp	r2, #48	@ 0x30
 8009efe:	d0fa      	beq.n	8009ef6 <_dtoa_r+0xb06>
 8009f00:	e5c2      	b.n	8009a88 <_dtoa_r+0x698>
 8009f02:	459a      	cmp	sl, r3
 8009f04:	d1a4      	bne.n	8009e50 <_dtoa_r+0xa60>
 8009f06:	9b04      	ldr	r3, [sp, #16]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	9304      	str	r3, [sp, #16]
 8009f0c:	2331      	movs	r3, #49	@ 0x31
 8009f0e:	f88a 3000 	strb.w	r3, [sl]
 8009f12:	e5b9      	b.n	8009a88 <_dtoa_r+0x698>
 8009f14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009f74 <_dtoa_r+0xb84>
 8009f1a:	b11b      	cbz	r3, 8009f24 <_dtoa_r+0xb34>
 8009f1c:	f10a 0308 	add.w	r3, sl, #8
 8009f20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f22:	6013      	str	r3, [r2, #0]
 8009f24:	4650      	mov	r0, sl
 8009f26:	b019      	add	sp, #100	@ 0x64
 8009f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	f77f ae37 	ble.w	8009ba2 <_dtoa_r+0x7b2>
 8009f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f38:	2001      	movs	r0, #1
 8009f3a:	e655      	b.n	8009be8 <_dtoa_r+0x7f8>
 8009f3c:	9b00      	ldr	r3, [sp, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f77f aed6 	ble.w	8009cf0 <_dtoa_r+0x900>
 8009f44:	4656      	mov	r6, sl
 8009f46:	4621      	mov	r1, r4
 8009f48:	4648      	mov	r0, r9
 8009f4a:	f7ff f9c6 	bl	80092da <quorem>
 8009f4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f52:	f806 8b01 	strb.w	r8, [r6], #1
 8009f56:	9b00      	ldr	r3, [sp, #0]
 8009f58:	eba6 020a 	sub.w	r2, r6, sl
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	ddb3      	ble.n	8009ec8 <_dtoa_r+0xad8>
 8009f60:	4649      	mov	r1, r9
 8009f62:	2300      	movs	r3, #0
 8009f64:	220a      	movs	r2, #10
 8009f66:	4658      	mov	r0, fp
 8009f68:	f000 f968 	bl	800a23c <__multadd>
 8009f6c:	4681      	mov	r9, r0
 8009f6e:	e7ea      	b.n	8009f46 <_dtoa_r+0xb56>
 8009f70:	0800b28c 	.word	0x0800b28c
 8009f74:	0800b210 	.word	0x0800b210

08009f78 <_free_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	2900      	cmp	r1, #0
 8009f7e:	d041      	beq.n	800a004 <_free_r+0x8c>
 8009f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f84:	1f0c      	subs	r4, r1, #4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfb8      	it	lt
 8009f8a:	18e4      	addlt	r4, r4, r3
 8009f8c:	f000 f8e8 	bl	800a160 <__malloc_lock>
 8009f90:	4a1d      	ldr	r2, [pc, #116]	@ (800a008 <_free_r+0x90>)
 8009f92:	6813      	ldr	r3, [r2, #0]
 8009f94:	b933      	cbnz	r3, 8009fa4 <_free_r+0x2c>
 8009f96:	6063      	str	r3, [r4, #4]
 8009f98:	6014      	str	r4, [r2, #0]
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fa0:	f000 b8e4 	b.w	800a16c <__malloc_unlock>
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	d908      	bls.n	8009fba <_free_r+0x42>
 8009fa8:	6820      	ldr	r0, [r4, #0]
 8009faa:	1821      	adds	r1, r4, r0
 8009fac:	428b      	cmp	r3, r1
 8009fae:	bf01      	itttt	eq
 8009fb0:	6819      	ldreq	r1, [r3, #0]
 8009fb2:	685b      	ldreq	r3, [r3, #4]
 8009fb4:	1809      	addeq	r1, r1, r0
 8009fb6:	6021      	streq	r1, [r4, #0]
 8009fb8:	e7ed      	b.n	8009f96 <_free_r+0x1e>
 8009fba:	461a      	mov	r2, r3
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	b10b      	cbz	r3, 8009fc4 <_free_r+0x4c>
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	d9fa      	bls.n	8009fba <_free_r+0x42>
 8009fc4:	6811      	ldr	r1, [r2, #0]
 8009fc6:	1850      	adds	r0, r2, r1
 8009fc8:	42a0      	cmp	r0, r4
 8009fca:	d10b      	bne.n	8009fe4 <_free_r+0x6c>
 8009fcc:	6820      	ldr	r0, [r4, #0]
 8009fce:	4401      	add	r1, r0
 8009fd0:	1850      	adds	r0, r2, r1
 8009fd2:	4283      	cmp	r3, r0
 8009fd4:	6011      	str	r1, [r2, #0]
 8009fd6:	d1e0      	bne.n	8009f9a <_free_r+0x22>
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	6053      	str	r3, [r2, #4]
 8009fde:	4408      	add	r0, r1
 8009fe0:	6010      	str	r0, [r2, #0]
 8009fe2:	e7da      	b.n	8009f9a <_free_r+0x22>
 8009fe4:	d902      	bls.n	8009fec <_free_r+0x74>
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	e7d6      	b.n	8009f9a <_free_r+0x22>
 8009fec:	6820      	ldr	r0, [r4, #0]
 8009fee:	1821      	adds	r1, r4, r0
 8009ff0:	428b      	cmp	r3, r1
 8009ff2:	bf04      	itt	eq
 8009ff4:	6819      	ldreq	r1, [r3, #0]
 8009ff6:	685b      	ldreq	r3, [r3, #4]
 8009ff8:	6063      	str	r3, [r4, #4]
 8009ffa:	bf04      	itt	eq
 8009ffc:	1809      	addeq	r1, r1, r0
 8009ffe:	6021      	streq	r1, [r4, #0]
 800a000:	6054      	str	r4, [r2, #4]
 800a002:	e7ca      	b.n	8009f9a <_free_r+0x22>
 800a004:	bd38      	pop	{r3, r4, r5, pc}
 800a006:	bf00      	nop
 800a008:	2000493c 	.word	0x2000493c

0800a00c <malloc>:
 800a00c:	4b02      	ldr	r3, [pc, #8]	@ (800a018 <malloc+0xc>)
 800a00e:	4601      	mov	r1, r0
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	f000 b825 	b.w	800a060 <_malloc_r>
 800a016:	bf00      	nop
 800a018:	2000002c 	.word	0x2000002c

0800a01c <sbrk_aligned>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	4e0f      	ldr	r6, [pc, #60]	@ (800a05c <sbrk_aligned+0x40>)
 800a020:	460c      	mov	r4, r1
 800a022:	6831      	ldr	r1, [r6, #0]
 800a024:	4605      	mov	r5, r0
 800a026:	b911      	cbnz	r1, 800a02e <sbrk_aligned+0x12>
 800a028:	f000 feaa 	bl	800ad80 <_sbrk_r>
 800a02c:	6030      	str	r0, [r6, #0]
 800a02e:	4621      	mov	r1, r4
 800a030:	4628      	mov	r0, r5
 800a032:	f000 fea5 	bl	800ad80 <_sbrk_r>
 800a036:	1c43      	adds	r3, r0, #1
 800a038:	d103      	bne.n	800a042 <sbrk_aligned+0x26>
 800a03a:	f04f 34ff 	mov.w	r4, #4294967295
 800a03e:	4620      	mov	r0, r4
 800a040:	bd70      	pop	{r4, r5, r6, pc}
 800a042:	1cc4      	adds	r4, r0, #3
 800a044:	f024 0403 	bic.w	r4, r4, #3
 800a048:	42a0      	cmp	r0, r4
 800a04a:	d0f8      	beq.n	800a03e <sbrk_aligned+0x22>
 800a04c:	1a21      	subs	r1, r4, r0
 800a04e:	4628      	mov	r0, r5
 800a050:	f000 fe96 	bl	800ad80 <_sbrk_r>
 800a054:	3001      	adds	r0, #1
 800a056:	d1f2      	bne.n	800a03e <sbrk_aligned+0x22>
 800a058:	e7ef      	b.n	800a03a <sbrk_aligned+0x1e>
 800a05a:	bf00      	nop
 800a05c:	20004938 	.word	0x20004938

0800a060 <_malloc_r>:
 800a060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a064:	1ccd      	adds	r5, r1, #3
 800a066:	f025 0503 	bic.w	r5, r5, #3
 800a06a:	3508      	adds	r5, #8
 800a06c:	2d0c      	cmp	r5, #12
 800a06e:	bf38      	it	cc
 800a070:	250c      	movcc	r5, #12
 800a072:	2d00      	cmp	r5, #0
 800a074:	4606      	mov	r6, r0
 800a076:	db01      	blt.n	800a07c <_malloc_r+0x1c>
 800a078:	42a9      	cmp	r1, r5
 800a07a:	d904      	bls.n	800a086 <_malloc_r+0x26>
 800a07c:	230c      	movs	r3, #12
 800a07e:	6033      	str	r3, [r6, #0]
 800a080:	2000      	movs	r0, #0
 800a082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a15c <_malloc_r+0xfc>
 800a08a:	f000 f869 	bl	800a160 <__malloc_lock>
 800a08e:	f8d8 3000 	ldr.w	r3, [r8]
 800a092:	461c      	mov	r4, r3
 800a094:	bb44      	cbnz	r4, 800a0e8 <_malloc_r+0x88>
 800a096:	4629      	mov	r1, r5
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff ffbf 	bl	800a01c <sbrk_aligned>
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	d158      	bne.n	800a156 <_malloc_r+0xf6>
 800a0a4:	f8d8 4000 	ldr.w	r4, [r8]
 800a0a8:	4627      	mov	r7, r4
 800a0aa:	2f00      	cmp	r7, #0
 800a0ac:	d143      	bne.n	800a136 <_malloc_r+0xd6>
 800a0ae:	2c00      	cmp	r4, #0
 800a0b0:	d04b      	beq.n	800a14a <_malloc_r+0xea>
 800a0b2:	6823      	ldr	r3, [r4, #0]
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	eb04 0903 	add.w	r9, r4, r3
 800a0bc:	f000 fe60 	bl	800ad80 <_sbrk_r>
 800a0c0:	4581      	cmp	r9, r0
 800a0c2:	d142      	bne.n	800a14a <_malloc_r+0xea>
 800a0c4:	6821      	ldr	r1, [r4, #0]
 800a0c6:	1a6d      	subs	r5, r5, r1
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f7ff ffa6 	bl	800a01c <sbrk_aligned>
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	d03a      	beq.n	800a14a <_malloc_r+0xea>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	442b      	add	r3, r5
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	f8d8 3000 	ldr.w	r3, [r8]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	bb62      	cbnz	r2, 800a13c <_malloc_r+0xdc>
 800a0e2:	f8c8 7000 	str.w	r7, [r8]
 800a0e6:	e00f      	b.n	800a108 <_malloc_r+0xa8>
 800a0e8:	6822      	ldr	r2, [r4, #0]
 800a0ea:	1b52      	subs	r2, r2, r5
 800a0ec:	d420      	bmi.n	800a130 <_malloc_r+0xd0>
 800a0ee:	2a0b      	cmp	r2, #11
 800a0f0:	d917      	bls.n	800a122 <_malloc_r+0xc2>
 800a0f2:	1961      	adds	r1, r4, r5
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	6025      	str	r5, [r4, #0]
 800a0f8:	bf18      	it	ne
 800a0fa:	6059      	strne	r1, [r3, #4]
 800a0fc:	6863      	ldr	r3, [r4, #4]
 800a0fe:	bf08      	it	eq
 800a100:	f8c8 1000 	streq.w	r1, [r8]
 800a104:	5162      	str	r2, [r4, r5]
 800a106:	604b      	str	r3, [r1, #4]
 800a108:	4630      	mov	r0, r6
 800a10a:	f000 f82f 	bl	800a16c <__malloc_unlock>
 800a10e:	f104 000b 	add.w	r0, r4, #11
 800a112:	1d23      	adds	r3, r4, #4
 800a114:	f020 0007 	bic.w	r0, r0, #7
 800a118:	1ac2      	subs	r2, r0, r3
 800a11a:	bf1c      	itt	ne
 800a11c:	1a1b      	subne	r3, r3, r0
 800a11e:	50a3      	strne	r3, [r4, r2]
 800a120:	e7af      	b.n	800a082 <_malloc_r+0x22>
 800a122:	6862      	ldr	r2, [r4, #4]
 800a124:	42a3      	cmp	r3, r4
 800a126:	bf0c      	ite	eq
 800a128:	f8c8 2000 	streq.w	r2, [r8]
 800a12c:	605a      	strne	r2, [r3, #4]
 800a12e:	e7eb      	b.n	800a108 <_malloc_r+0xa8>
 800a130:	4623      	mov	r3, r4
 800a132:	6864      	ldr	r4, [r4, #4]
 800a134:	e7ae      	b.n	800a094 <_malloc_r+0x34>
 800a136:	463c      	mov	r4, r7
 800a138:	687f      	ldr	r7, [r7, #4]
 800a13a:	e7b6      	b.n	800a0aa <_malloc_r+0x4a>
 800a13c:	461a      	mov	r2, r3
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	42a3      	cmp	r3, r4
 800a142:	d1fb      	bne.n	800a13c <_malloc_r+0xdc>
 800a144:	2300      	movs	r3, #0
 800a146:	6053      	str	r3, [r2, #4]
 800a148:	e7de      	b.n	800a108 <_malloc_r+0xa8>
 800a14a:	230c      	movs	r3, #12
 800a14c:	6033      	str	r3, [r6, #0]
 800a14e:	4630      	mov	r0, r6
 800a150:	f000 f80c 	bl	800a16c <__malloc_unlock>
 800a154:	e794      	b.n	800a080 <_malloc_r+0x20>
 800a156:	6005      	str	r5, [r0, #0]
 800a158:	e7d6      	b.n	800a108 <_malloc_r+0xa8>
 800a15a:	bf00      	nop
 800a15c:	2000493c 	.word	0x2000493c

0800a160 <__malloc_lock>:
 800a160:	4801      	ldr	r0, [pc, #4]	@ (800a168 <__malloc_lock+0x8>)
 800a162:	f7ff b8aa 	b.w	80092ba <__retarget_lock_acquire_recursive>
 800a166:	bf00      	nop
 800a168:	20004934 	.word	0x20004934

0800a16c <__malloc_unlock>:
 800a16c:	4801      	ldr	r0, [pc, #4]	@ (800a174 <__malloc_unlock+0x8>)
 800a16e:	f7ff b8a5 	b.w	80092bc <__retarget_lock_release_recursive>
 800a172:	bf00      	nop
 800a174:	20004934 	.word	0x20004934

0800a178 <_Balloc>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	69c6      	ldr	r6, [r0, #28]
 800a17c:	4604      	mov	r4, r0
 800a17e:	460d      	mov	r5, r1
 800a180:	b976      	cbnz	r6, 800a1a0 <_Balloc+0x28>
 800a182:	2010      	movs	r0, #16
 800a184:	f7ff ff42 	bl	800a00c <malloc>
 800a188:	4602      	mov	r2, r0
 800a18a:	61e0      	str	r0, [r4, #28]
 800a18c:	b920      	cbnz	r0, 800a198 <_Balloc+0x20>
 800a18e:	4b18      	ldr	r3, [pc, #96]	@ (800a1f0 <_Balloc+0x78>)
 800a190:	4818      	ldr	r0, [pc, #96]	@ (800a1f4 <_Balloc+0x7c>)
 800a192:	216b      	movs	r1, #107	@ 0x6b
 800a194:	f000 fe04 	bl	800ada0 <__assert_func>
 800a198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a19c:	6006      	str	r6, [r0, #0]
 800a19e:	60c6      	str	r6, [r0, #12]
 800a1a0:	69e6      	ldr	r6, [r4, #28]
 800a1a2:	68f3      	ldr	r3, [r6, #12]
 800a1a4:	b183      	cbz	r3, 800a1c8 <_Balloc+0x50>
 800a1a6:	69e3      	ldr	r3, [r4, #28]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1ae:	b9b8      	cbnz	r0, 800a1e0 <_Balloc+0x68>
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a1b6:	1d72      	adds	r2, r6, #5
 800a1b8:	0092      	lsls	r2, r2, #2
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fe0e 	bl	800addc <_calloc_r>
 800a1c0:	b160      	cbz	r0, 800a1dc <_Balloc+0x64>
 800a1c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1c6:	e00e      	b.n	800a1e6 <_Balloc+0x6e>
 800a1c8:	2221      	movs	r2, #33	@ 0x21
 800a1ca:	2104      	movs	r1, #4
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fe05 	bl	800addc <_calloc_r>
 800a1d2:	69e3      	ldr	r3, [r4, #28]
 800a1d4:	60f0      	str	r0, [r6, #12]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e4      	bne.n	800a1a6 <_Balloc+0x2e>
 800a1dc:	2000      	movs	r0, #0
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	6802      	ldr	r2, [r0, #0]
 800a1e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1ec:	e7f7      	b.n	800a1de <_Balloc+0x66>
 800a1ee:	bf00      	nop
 800a1f0:	0800b21d 	.word	0x0800b21d
 800a1f4:	0800b29d 	.word	0x0800b29d

0800a1f8 <_Bfree>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	69c6      	ldr	r6, [r0, #28]
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	b976      	cbnz	r6, 800a220 <_Bfree+0x28>
 800a202:	2010      	movs	r0, #16
 800a204:	f7ff ff02 	bl	800a00c <malloc>
 800a208:	4602      	mov	r2, r0
 800a20a:	61e8      	str	r0, [r5, #28]
 800a20c:	b920      	cbnz	r0, 800a218 <_Bfree+0x20>
 800a20e:	4b09      	ldr	r3, [pc, #36]	@ (800a234 <_Bfree+0x3c>)
 800a210:	4809      	ldr	r0, [pc, #36]	@ (800a238 <_Bfree+0x40>)
 800a212:	218f      	movs	r1, #143	@ 0x8f
 800a214:	f000 fdc4 	bl	800ada0 <__assert_func>
 800a218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a21c:	6006      	str	r6, [r0, #0]
 800a21e:	60c6      	str	r6, [r0, #12]
 800a220:	b13c      	cbz	r4, 800a232 <_Bfree+0x3a>
 800a222:	69eb      	ldr	r3, [r5, #28]
 800a224:	6862      	ldr	r2, [r4, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a22c:	6021      	str	r1, [r4, #0]
 800a22e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a232:	bd70      	pop	{r4, r5, r6, pc}
 800a234:	0800b21d 	.word	0x0800b21d
 800a238:	0800b29d 	.word	0x0800b29d

0800a23c <__multadd>:
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	690d      	ldr	r5, [r1, #16]
 800a242:	4607      	mov	r7, r0
 800a244:	460c      	mov	r4, r1
 800a246:	461e      	mov	r6, r3
 800a248:	f101 0c14 	add.w	ip, r1, #20
 800a24c:	2000      	movs	r0, #0
 800a24e:	f8dc 3000 	ldr.w	r3, [ip]
 800a252:	b299      	uxth	r1, r3
 800a254:	fb02 6101 	mla	r1, r2, r1, r6
 800a258:	0c1e      	lsrs	r6, r3, #16
 800a25a:	0c0b      	lsrs	r3, r1, #16
 800a25c:	fb02 3306 	mla	r3, r2, r6, r3
 800a260:	b289      	uxth	r1, r1
 800a262:	3001      	adds	r0, #1
 800a264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a268:	4285      	cmp	r5, r0
 800a26a:	f84c 1b04 	str.w	r1, [ip], #4
 800a26e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a272:	dcec      	bgt.n	800a24e <__multadd+0x12>
 800a274:	b30e      	cbz	r6, 800a2ba <__multadd+0x7e>
 800a276:	68a3      	ldr	r3, [r4, #8]
 800a278:	42ab      	cmp	r3, r5
 800a27a:	dc19      	bgt.n	800a2b0 <__multadd+0x74>
 800a27c:	6861      	ldr	r1, [r4, #4]
 800a27e:	4638      	mov	r0, r7
 800a280:	3101      	adds	r1, #1
 800a282:	f7ff ff79 	bl	800a178 <_Balloc>
 800a286:	4680      	mov	r8, r0
 800a288:	b928      	cbnz	r0, 800a296 <__multadd+0x5a>
 800a28a:	4602      	mov	r2, r0
 800a28c:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c0 <__multadd+0x84>)
 800a28e:	480d      	ldr	r0, [pc, #52]	@ (800a2c4 <__multadd+0x88>)
 800a290:	21ba      	movs	r1, #186	@ 0xba
 800a292:	f000 fd85 	bl	800ada0 <__assert_func>
 800a296:	6922      	ldr	r2, [r4, #16]
 800a298:	3202      	adds	r2, #2
 800a29a:	f104 010c 	add.w	r1, r4, #12
 800a29e:	0092      	lsls	r2, r2, #2
 800a2a0:	300c      	adds	r0, #12
 800a2a2:	f7ff f80c 	bl	80092be <memcpy>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7ff ffa5 	bl	800a1f8 <_Bfree>
 800a2ae:	4644      	mov	r4, r8
 800a2b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2b4:	3501      	adds	r5, #1
 800a2b6:	615e      	str	r6, [r3, #20]
 800a2b8:	6125      	str	r5, [r4, #16]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c0:	0800b28c 	.word	0x0800b28c
 800a2c4:	0800b29d 	.word	0x0800b29d

0800a2c8 <__hi0bits>:
 800a2c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	bf36      	itet	cc
 800a2d0:	0403      	lslcc	r3, r0, #16
 800a2d2:	2000      	movcs	r0, #0
 800a2d4:	2010      	movcc	r0, #16
 800a2d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2da:	bf3c      	itt	cc
 800a2dc:	021b      	lslcc	r3, r3, #8
 800a2de:	3008      	addcc	r0, #8
 800a2e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2e4:	bf3c      	itt	cc
 800a2e6:	011b      	lslcc	r3, r3, #4
 800a2e8:	3004      	addcc	r0, #4
 800a2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ee:	bf3c      	itt	cc
 800a2f0:	009b      	lslcc	r3, r3, #2
 800a2f2:	3002      	addcc	r0, #2
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	db05      	blt.n	800a304 <__hi0bits+0x3c>
 800a2f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2fc:	f100 0001 	add.w	r0, r0, #1
 800a300:	bf08      	it	eq
 800a302:	2020      	moveq	r0, #32
 800a304:	4770      	bx	lr

0800a306 <__lo0bits>:
 800a306:	6803      	ldr	r3, [r0, #0]
 800a308:	4602      	mov	r2, r0
 800a30a:	f013 0007 	ands.w	r0, r3, #7
 800a30e:	d00b      	beq.n	800a328 <__lo0bits+0x22>
 800a310:	07d9      	lsls	r1, r3, #31
 800a312:	d421      	bmi.n	800a358 <__lo0bits+0x52>
 800a314:	0798      	lsls	r0, r3, #30
 800a316:	bf49      	itett	mi
 800a318:	085b      	lsrmi	r3, r3, #1
 800a31a:	089b      	lsrpl	r3, r3, #2
 800a31c:	2001      	movmi	r0, #1
 800a31e:	6013      	strmi	r3, [r2, #0]
 800a320:	bf5c      	itt	pl
 800a322:	6013      	strpl	r3, [r2, #0]
 800a324:	2002      	movpl	r0, #2
 800a326:	4770      	bx	lr
 800a328:	b299      	uxth	r1, r3
 800a32a:	b909      	cbnz	r1, 800a330 <__lo0bits+0x2a>
 800a32c:	0c1b      	lsrs	r3, r3, #16
 800a32e:	2010      	movs	r0, #16
 800a330:	b2d9      	uxtb	r1, r3
 800a332:	b909      	cbnz	r1, 800a338 <__lo0bits+0x32>
 800a334:	3008      	adds	r0, #8
 800a336:	0a1b      	lsrs	r3, r3, #8
 800a338:	0719      	lsls	r1, r3, #28
 800a33a:	bf04      	itt	eq
 800a33c:	091b      	lsreq	r3, r3, #4
 800a33e:	3004      	addeq	r0, #4
 800a340:	0799      	lsls	r1, r3, #30
 800a342:	bf04      	itt	eq
 800a344:	089b      	lsreq	r3, r3, #2
 800a346:	3002      	addeq	r0, #2
 800a348:	07d9      	lsls	r1, r3, #31
 800a34a:	d403      	bmi.n	800a354 <__lo0bits+0x4e>
 800a34c:	085b      	lsrs	r3, r3, #1
 800a34e:	f100 0001 	add.w	r0, r0, #1
 800a352:	d003      	beq.n	800a35c <__lo0bits+0x56>
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	4770      	bx	lr
 800a358:	2000      	movs	r0, #0
 800a35a:	4770      	bx	lr
 800a35c:	2020      	movs	r0, #32
 800a35e:	4770      	bx	lr

0800a360 <__i2b>:
 800a360:	b510      	push	{r4, lr}
 800a362:	460c      	mov	r4, r1
 800a364:	2101      	movs	r1, #1
 800a366:	f7ff ff07 	bl	800a178 <_Balloc>
 800a36a:	4602      	mov	r2, r0
 800a36c:	b928      	cbnz	r0, 800a37a <__i2b+0x1a>
 800a36e:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <__i2b+0x24>)
 800a370:	4805      	ldr	r0, [pc, #20]	@ (800a388 <__i2b+0x28>)
 800a372:	f240 1145 	movw	r1, #325	@ 0x145
 800a376:	f000 fd13 	bl	800ada0 <__assert_func>
 800a37a:	2301      	movs	r3, #1
 800a37c:	6144      	str	r4, [r0, #20]
 800a37e:	6103      	str	r3, [r0, #16]
 800a380:	bd10      	pop	{r4, pc}
 800a382:	bf00      	nop
 800a384:	0800b28c 	.word	0x0800b28c
 800a388:	0800b29d 	.word	0x0800b29d

0800a38c <__multiply>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	4614      	mov	r4, r2
 800a392:	690a      	ldr	r2, [r1, #16]
 800a394:	6923      	ldr	r3, [r4, #16]
 800a396:	429a      	cmp	r2, r3
 800a398:	bfa8      	it	ge
 800a39a:	4623      	movge	r3, r4
 800a39c:	460f      	mov	r7, r1
 800a39e:	bfa4      	itt	ge
 800a3a0:	460c      	movge	r4, r1
 800a3a2:	461f      	movge	r7, r3
 800a3a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a3a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a3ac:	68a3      	ldr	r3, [r4, #8]
 800a3ae:	6861      	ldr	r1, [r4, #4]
 800a3b0:	eb0a 0609 	add.w	r6, sl, r9
 800a3b4:	42b3      	cmp	r3, r6
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	bfb8      	it	lt
 800a3ba:	3101      	addlt	r1, #1
 800a3bc:	f7ff fedc 	bl	800a178 <_Balloc>
 800a3c0:	b930      	cbnz	r0, 800a3d0 <__multiply+0x44>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	4b44      	ldr	r3, [pc, #272]	@ (800a4d8 <__multiply+0x14c>)
 800a3c6:	4845      	ldr	r0, [pc, #276]	@ (800a4dc <__multiply+0x150>)
 800a3c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3cc:	f000 fce8 	bl	800ada0 <__assert_func>
 800a3d0:	f100 0514 	add.w	r5, r0, #20
 800a3d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3d8:	462b      	mov	r3, r5
 800a3da:	2200      	movs	r2, #0
 800a3dc:	4543      	cmp	r3, r8
 800a3de:	d321      	bcc.n	800a424 <__multiply+0x98>
 800a3e0:	f107 0114 	add.w	r1, r7, #20
 800a3e4:	f104 0214 	add.w	r2, r4, #20
 800a3e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a3ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a3f0:	9302      	str	r3, [sp, #8]
 800a3f2:	1b13      	subs	r3, r2, r4
 800a3f4:	3b15      	subs	r3, #21
 800a3f6:	f023 0303 	bic.w	r3, r3, #3
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	f104 0715 	add.w	r7, r4, #21
 800a400:	42ba      	cmp	r2, r7
 800a402:	bf38      	it	cc
 800a404:	2304      	movcc	r3, #4
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	9b02      	ldr	r3, [sp, #8]
 800a40a:	9103      	str	r1, [sp, #12]
 800a40c:	428b      	cmp	r3, r1
 800a40e:	d80c      	bhi.n	800a42a <__multiply+0x9e>
 800a410:	2e00      	cmp	r6, #0
 800a412:	dd03      	ble.n	800a41c <__multiply+0x90>
 800a414:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d05b      	beq.n	800a4d4 <__multiply+0x148>
 800a41c:	6106      	str	r6, [r0, #16]
 800a41e:	b005      	add	sp, #20
 800a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a424:	f843 2b04 	str.w	r2, [r3], #4
 800a428:	e7d8      	b.n	800a3dc <__multiply+0x50>
 800a42a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a42e:	f1ba 0f00 	cmp.w	sl, #0
 800a432:	d024      	beq.n	800a47e <__multiply+0xf2>
 800a434:	f104 0e14 	add.w	lr, r4, #20
 800a438:	46a9      	mov	r9, r5
 800a43a:	f04f 0c00 	mov.w	ip, #0
 800a43e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a442:	f8d9 3000 	ldr.w	r3, [r9]
 800a446:	fa1f fb87 	uxth.w	fp, r7
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a450:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a454:	f8d9 7000 	ldr.w	r7, [r9]
 800a458:	4463      	add	r3, ip
 800a45a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a45e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a462:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a466:	b29b      	uxth	r3, r3
 800a468:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a46c:	4572      	cmp	r2, lr
 800a46e:	f849 3b04 	str.w	r3, [r9], #4
 800a472:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a476:	d8e2      	bhi.n	800a43e <__multiply+0xb2>
 800a478:	9b01      	ldr	r3, [sp, #4]
 800a47a:	f845 c003 	str.w	ip, [r5, r3]
 800a47e:	9b03      	ldr	r3, [sp, #12]
 800a480:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a484:	3104      	adds	r1, #4
 800a486:	f1b9 0f00 	cmp.w	r9, #0
 800a48a:	d021      	beq.n	800a4d0 <__multiply+0x144>
 800a48c:	682b      	ldr	r3, [r5, #0]
 800a48e:	f104 0c14 	add.w	ip, r4, #20
 800a492:	46ae      	mov	lr, r5
 800a494:	f04f 0a00 	mov.w	sl, #0
 800a498:	f8bc b000 	ldrh.w	fp, [ip]
 800a49c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a4a0:	fb09 770b 	mla	r7, r9, fp, r7
 800a4a4:	4457      	add	r7, sl
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a4ac:	f84e 3b04 	str.w	r3, [lr], #4
 800a4b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a4b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4b8:	f8be 3000 	ldrh.w	r3, [lr]
 800a4bc:	fb09 330a 	mla	r3, r9, sl, r3
 800a4c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a4c4:	4562      	cmp	r2, ip
 800a4c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4ca:	d8e5      	bhi.n	800a498 <__multiply+0x10c>
 800a4cc:	9f01      	ldr	r7, [sp, #4]
 800a4ce:	51eb      	str	r3, [r5, r7]
 800a4d0:	3504      	adds	r5, #4
 800a4d2:	e799      	b.n	800a408 <__multiply+0x7c>
 800a4d4:	3e01      	subs	r6, #1
 800a4d6:	e79b      	b.n	800a410 <__multiply+0x84>
 800a4d8:	0800b28c 	.word	0x0800b28c
 800a4dc:	0800b29d 	.word	0x0800b29d

0800a4e0 <__pow5mult>:
 800a4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e4:	4615      	mov	r5, r2
 800a4e6:	f012 0203 	ands.w	r2, r2, #3
 800a4ea:	4607      	mov	r7, r0
 800a4ec:	460e      	mov	r6, r1
 800a4ee:	d007      	beq.n	800a500 <__pow5mult+0x20>
 800a4f0:	4c25      	ldr	r4, [pc, #148]	@ (800a588 <__pow5mult+0xa8>)
 800a4f2:	3a01      	subs	r2, #1
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4fa:	f7ff fe9f 	bl	800a23c <__multadd>
 800a4fe:	4606      	mov	r6, r0
 800a500:	10ad      	asrs	r5, r5, #2
 800a502:	d03d      	beq.n	800a580 <__pow5mult+0xa0>
 800a504:	69fc      	ldr	r4, [r7, #28]
 800a506:	b97c      	cbnz	r4, 800a528 <__pow5mult+0x48>
 800a508:	2010      	movs	r0, #16
 800a50a:	f7ff fd7f 	bl	800a00c <malloc>
 800a50e:	4602      	mov	r2, r0
 800a510:	61f8      	str	r0, [r7, #28]
 800a512:	b928      	cbnz	r0, 800a520 <__pow5mult+0x40>
 800a514:	4b1d      	ldr	r3, [pc, #116]	@ (800a58c <__pow5mult+0xac>)
 800a516:	481e      	ldr	r0, [pc, #120]	@ (800a590 <__pow5mult+0xb0>)
 800a518:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a51c:	f000 fc40 	bl	800ada0 <__assert_func>
 800a520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a524:	6004      	str	r4, [r0, #0]
 800a526:	60c4      	str	r4, [r0, #12]
 800a528:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a52c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a530:	b94c      	cbnz	r4, 800a546 <__pow5mult+0x66>
 800a532:	f240 2171 	movw	r1, #625	@ 0x271
 800a536:	4638      	mov	r0, r7
 800a538:	f7ff ff12 	bl	800a360 <__i2b>
 800a53c:	2300      	movs	r3, #0
 800a53e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a542:	4604      	mov	r4, r0
 800a544:	6003      	str	r3, [r0, #0]
 800a546:	f04f 0900 	mov.w	r9, #0
 800a54a:	07eb      	lsls	r3, r5, #31
 800a54c:	d50a      	bpl.n	800a564 <__pow5mult+0x84>
 800a54e:	4631      	mov	r1, r6
 800a550:	4622      	mov	r2, r4
 800a552:	4638      	mov	r0, r7
 800a554:	f7ff ff1a 	bl	800a38c <__multiply>
 800a558:	4631      	mov	r1, r6
 800a55a:	4680      	mov	r8, r0
 800a55c:	4638      	mov	r0, r7
 800a55e:	f7ff fe4b 	bl	800a1f8 <_Bfree>
 800a562:	4646      	mov	r6, r8
 800a564:	106d      	asrs	r5, r5, #1
 800a566:	d00b      	beq.n	800a580 <__pow5mult+0xa0>
 800a568:	6820      	ldr	r0, [r4, #0]
 800a56a:	b938      	cbnz	r0, 800a57c <__pow5mult+0x9c>
 800a56c:	4622      	mov	r2, r4
 800a56e:	4621      	mov	r1, r4
 800a570:	4638      	mov	r0, r7
 800a572:	f7ff ff0b 	bl	800a38c <__multiply>
 800a576:	6020      	str	r0, [r4, #0]
 800a578:	f8c0 9000 	str.w	r9, [r0]
 800a57c:	4604      	mov	r4, r0
 800a57e:	e7e4      	b.n	800a54a <__pow5mult+0x6a>
 800a580:	4630      	mov	r0, r6
 800a582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a586:	bf00      	nop
 800a588:	0800b2f8 	.word	0x0800b2f8
 800a58c:	0800b21d 	.word	0x0800b21d
 800a590:	0800b29d 	.word	0x0800b29d

0800a594 <__lshift>:
 800a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a598:	460c      	mov	r4, r1
 800a59a:	6849      	ldr	r1, [r1, #4]
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	4691      	mov	r9, r2
 800a5a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5ac:	f108 0601 	add.w	r6, r8, #1
 800a5b0:	42b3      	cmp	r3, r6
 800a5b2:	db0b      	blt.n	800a5cc <__lshift+0x38>
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	f7ff fddf 	bl	800a178 <_Balloc>
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	b948      	cbnz	r0, 800a5d2 <__lshift+0x3e>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	4b28      	ldr	r3, [pc, #160]	@ (800a664 <__lshift+0xd0>)
 800a5c2:	4829      	ldr	r0, [pc, #164]	@ (800a668 <__lshift+0xd4>)
 800a5c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5c8:	f000 fbea 	bl	800ada0 <__assert_func>
 800a5cc:	3101      	adds	r1, #1
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	e7ee      	b.n	800a5b0 <__lshift+0x1c>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f100 0114 	add.w	r1, r0, #20
 800a5d8:	f100 0210 	add.w	r2, r0, #16
 800a5dc:	4618      	mov	r0, r3
 800a5de:	4553      	cmp	r3, sl
 800a5e0:	db33      	blt.n	800a64a <__lshift+0xb6>
 800a5e2:	6920      	ldr	r0, [r4, #16]
 800a5e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5e8:	f104 0314 	add.w	r3, r4, #20
 800a5ec:	f019 091f 	ands.w	r9, r9, #31
 800a5f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5f8:	d02b      	beq.n	800a652 <__lshift+0xbe>
 800a5fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a5fe:	468a      	mov	sl, r1
 800a600:	2200      	movs	r2, #0
 800a602:	6818      	ldr	r0, [r3, #0]
 800a604:	fa00 f009 	lsl.w	r0, r0, r9
 800a608:	4310      	orrs	r0, r2
 800a60a:	f84a 0b04 	str.w	r0, [sl], #4
 800a60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a612:	459c      	cmp	ip, r3
 800a614:	fa22 f20e 	lsr.w	r2, r2, lr
 800a618:	d8f3      	bhi.n	800a602 <__lshift+0x6e>
 800a61a:	ebac 0304 	sub.w	r3, ip, r4
 800a61e:	3b15      	subs	r3, #21
 800a620:	f023 0303 	bic.w	r3, r3, #3
 800a624:	3304      	adds	r3, #4
 800a626:	f104 0015 	add.w	r0, r4, #21
 800a62a:	4584      	cmp	ip, r0
 800a62c:	bf38      	it	cc
 800a62e:	2304      	movcc	r3, #4
 800a630:	50ca      	str	r2, [r1, r3]
 800a632:	b10a      	cbz	r2, 800a638 <__lshift+0xa4>
 800a634:	f108 0602 	add.w	r6, r8, #2
 800a638:	3e01      	subs	r6, #1
 800a63a:	4638      	mov	r0, r7
 800a63c:	612e      	str	r6, [r5, #16]
 800a63e:	4621      	mov	r1, r4
 800a640:	f7ff fdda 	bl	800a1f8 <_Bfree>
 800a644:	4628      	mov	r0, r5
 800a646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a64e:	3301      	adds	r3, #1
 800a650:	e7c5      	b.n	800a5de <__lshift+0x4a>
 800a652:	3904      	subs	r1, #4
 800a654:	f853 2b04 	ldr.w	r2, [r3], #4
 800a658:	f841 2f04 	str.w	r2, [r1, #4]!
 800a65c:	459c      	cmp	ip, r3
 800a65e:	d8f9      	bhi.n	800a654 <__lshift+0xc0>
 800a660:	e7ea      	b.n	800a638 <__lshift+0xa4>
 800a662:	bf00      	nop
 800a664:	0800b28c 	.word	0x0800b28c
 800a668:	0800b29d 	.word	0x0800b29d

0800a66c <__mcmp>:
 800a66c:	690a      	ldr	r2, [r1, #16]
 800a66e:	4603      	mov	r3, r0
 800a670:	6900      	ldr	r0, [r0, #16]
 800a672:	1a80      	subs	r0, r0, r2
 800a674:	b530      	push	{r4, r5, lr}
 800a676:	d10e      	bne.n	800a696 <__mcmp+0x2a>
 800a678:	3314      	adds	r3, #20
 800a67a:	3114      	adds	r1, #20
 800a67c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a680:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a684:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a688:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a68c:	4295      	cmp	r5, r2
 800a68e:	d003      	beq.n	800a698 <__mcmp+0x2c>
 800a690:	d205      	bcs.n	800a69e <__mcmp+0x32>
 800a692:	f04f 30ff 	mov.w	r0, #4294967295
 800a696:	bd30      	pop	{r4, r5, pc}
 800a698:	42a3      	cmp	r3, r4
 800a69a:	d3f3      	bcc.n	800a684 <__mcmp+0x18>
 800a69c:	e7fb      	b.n	800a696 <__mcmp+0x2a>
 800a69e:	2001      	movs	r0, #1
 800a6a0:	e7f9      	b.n	800a696 <__mcmp+0x2a>
	...

0800a6a4 <__mdiff>:
 800a6a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	4689      	mov	r9, r1
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	4648      	mov	r0, r9
 800a6b0:	4614      	mov	r4, r2
 800a6b2:	f7ff ffdb 	bl	800a66c <__mcmp>
 800a6b6:	1e05      	subs	r5, r0, #0
 800a6b8:	d112      	bne.n	800a6e0 <__mdiff+0x3c>
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f7ff fd5b 	bl	800a178 <_Balloc>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	b928      	cbnz	r0, 800a6d2 <__mdiff+0x2e>
 800a6c6:	4b3f      	ldr	r3, [pc, #252]	@ (800a7c4 <__mdiff+0x120>)
 800a6c8:	f240 2137 	movw	r1, #567	@ 0x237
 800a6cc:	483e      	ldr	r0, [pc, #248]	@ (800a7c8 <__mdiff+0x124>)
 800a6ce:	f000 fb67 	bl	800ada0 <__assert_func>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6d8:	4610      	mov	r0, r2
 800a6da:	b003      	add	sp, #12
 800a6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e0:	bfbc      	itt	lt
 800a6e2:	464b      	movlt	r3, r9
 800a6e4:	46a1      	movlt	r9, r4
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6ec:	bfba      	itte	lt
 800a6ee:	461c      	movlt	r4, r3
 800a6f0:	2501      	movlt	r5, #1
 800a6f2:	2500      	movge	r5, #0
 800a6f4:	f7ff fd40 	bl	800a178 <_Balloc>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	b918      	cbnz	r0, 800a704 <__mdiff+0x60>
 800a6fc:	4b31      	ldr	r3, [pc, #196]	@ (800a7c4 <__mdiff+0x120>)
 800a6fe:	f240 2145 	movw	r1, #581	@ 0x245
 800a702:	e7e3      	b.n	800a6cc <__mdiff+0x28>
 800a704:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a708:	6926      	ldr	r6, [r4, #16]
 800a70a:	60c5      	str	r5, [r0, #12]
 800a70c:	f109 0310 	add.w	r3, r9, #16
 800a710:	f109 0514 	add.w	r5, r9, #20
 800a714:	f104 0e14 	add.w	lr, r4, #20
 800a718:	f100 0b14 	add.w	fp, r0, #20
 800a71c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a720:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	46d9      	mov	r9, fp
 800a728:	f04f 0c00 	mov.w	ip, #0
 800a72c:	9b01      	ldr	r3, [sp, #4]
 800a72e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a732:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	fa1f f38a 	uxth.w	r3, sl
 800a73c:	4619      	mov	r1, r3
 800a73e:	b283      	uxth	r3, r0
 800a740:	1acb      	subs	r3, r1, r3
 800a742:	0c00      	lsrs	r0, r0, #16
 800a744:	4463      	add	r3, ip
 800a746:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a74a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a74e:	b29b      	uxth	r3, r3
 800a750:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a754:	4576      	cmp	r6, lr
 800a756:	f849 3b04 	str.w	r3, [r9], #4
 800a75a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a75e:	d8e5      	bhi.n	800a72c <__mdiff+0x88>
 800a760:	1b33      	subs	r3, r6, r4
 800a762:	3b15      	subs	r3, #21
 800a764:	f023 0303 	bic.w	r3, r3, #3
 800a768:	3415      	adds	r4, #21
 800a76a:	3304      	adds	r3, #4
 800a76c:	42a6      	cmp	r6, r4
 800a76e:	bf38      	it	cc
 800a770:	2304      	movcc	r3, #4
 800a772:	441d      	add	r5, r3
 800a774:	445b      	add	r3, fp
 800a776:	461e      	mov	r6, r3
 800a778:	462c      	mov	r4, r5
 800a77a:	4544      	cmp	r4, r8
 800a77c:	d30e      	bcc.n	800a79c <__mdiff+0xf8>
 800a77e:	f108 0103 	add.w	r1, r8, #3
 800a782:	1b49      	subs	r1, r1, r5
 800a784:	f021 0103 	bic.w	r1, r1, #3
 800a788:	3d03      	subs	r5, #3
 800a78a:	45a8      	cmp	r8, r5
 800a78c:	bf38      	it	cc
 800a78e:	2100      	movcc	r1, #0
 800a790:	440b      	add	r3, r1
 800a792:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a796:	b191      	cbz	r1, 800a7be <__mdiff+0x11a>
 800a798:	6117      	str	r7, [r2, #16]
 800a79a:	e79d      	b.n	800a6d8 <__mdiff+0x34>
 800a79c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7a0:	46e6      	mov	lr, ip
 800a7a2:	0c08      	lsrs	r0, r1, #16
 800a7a4:	fa1c fc81 	uxtah	ip, ip, r1
 800a7a8:	4471      	add	r1, lr
 800a7aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7ae:	b289      	uxth	r1, r1
 800a7b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7b4:	f846 1b04 	str.w	r1, [r6], #4
 800a7b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7bc:	e7dd      	b.n	800a77a <__mdiff+0xd6>
 800a7be:	3f01      	subs	r7, #1
 800a7c0:	e7e7      	b.n	800a792 <__mdiff+0xee>
 800a7c2:	bf00      	nop
 800a7c4:	0800b28c 	.word	0x0800b28c
 800a7c8:	0800b29d 	.word	0x0800b29d

0800a7cc <__d2b>:
 800a7cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7d0:	460f      	mov	r7, r1
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	ec59 8b10 	vmov	r8, r9, d0
 800a7d8:	4616      	mov	r6, r2
 800a7da:	f7ff fccd 	bl	800a178 <_Balloc>
 800a7de:	4604      	mov	r4, r0
 800a7e0:	b930      	cbnz	r0, 800a7f0 <__d2b+0x24>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	4b23      	ldr	r3, [pc, #140]	@ (800a874 <__d2b+0xa8>)
 800a7e6:	4824      	ldr	r0, [pc, #144]	@ (800a878 <__d2b+0xac>)
 800a7e8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7ec:	f000 fad8 	bl	800ada0 <__assert_func>
 800a7f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7f8:	b10d      	cbz	r5, 800a7fe <__d2b+0x32>
 800a7fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	f1b8 0300 	subs.w	r3, r8, #0
 800a804:	d023      	beq.n	800a84e <__d2b+0x82>
 800a806:	4668      	mov	r0, sp
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	f7ff fd7c 	bl	800a306 <__lo0bits>
 800a80e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a812:	b1d0      	cbz	r0, 800a84a <__d2b+0x7e>
 800a814:	f1c0 0320 	rsb	r3, r0, #32
 800a818:	fa02 f303 	lsl.w	r3, r2, r3
 800a81c:	430b      	orrs	r3, r1
 800a81e:	40c2      	lsrs	r2, r0
 800a820:	6163      	str	r3, [r4, #20]
 800a822:	9201      	str	r2, [sp, #4]
 800a824:	9b01      	ldr	r3, [sp, #4]
 800a826:	61a3      	str	r3, [r4, #24]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	bf0c      	ite	eq
 800a82c:	2201      	moveq	r2, #1
 800a82e:	2202      	movne	r2, #2
 800a830:	6122      	str	r2, [r4, #16]
 800a832:	b1a5      	cbz	r5, 800a85e <__d2b+0x92>
 800a834:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a838:	4405      	add	r5, r0
 800a83a:	603d      	str	r5, [r7, #0]
 800a83c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a840:	6030      	str	r0, [r6, #0]
 800a842:	4620      	mov	r0, r4
 800a844:	b003      	add	sp, #12
 800a846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a84a:	6161      	str	r1, [r4, #20]
 800a84c:	e7ea      	b.n	800a824 <__d2b+0x58>
 800a84e:	a801      	add	r0, sp, #4
 800a850:	f7ff fd59 	bl	800a306 <__lo0bits>
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	6163      	str	r3, [r4, #20]
 800a858:	3020      	adds	r0, #32
 800a85a:	2201      	movs	r2, #1
 800a85c:	e7e8      	b.n	800a830 <__d2b+0x64>
 800a85e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a862:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a866:	6038      	str	r0, [r7, #0]
 800a868:	6918      	ldr	r0, [r3, #16]
 800a86a:	f7ff fd2d 	bl	800a2c8 <__hi0bits>
 800a86e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a872:	e7e5      	b.n	800a840 <__d2b+0x74>
 800a874:	0800b28c 	.word	0x0800b28c
 800a878:	0800b29d 	.word	0x0800b29d

0800a87c <__sfputc_r>:
 800a87c:	6893      	ldr	r3, [r2, #8]
 800a87e:	3b01      	subs	r3, #1
 800a880:	2b00      	cmp	r3, #0
 800a882:	b410      	push	{r4}
 800a884:	6093      	str	r3, [r2, #8]
 800a886:	da08      	bge.n	800a89a <__sfputc_r+0x1e>
 800a888:	6994      	ldr	r4, [r2, #24]
 800a88a:	42a3      	cmp	r3, r4
 800a88c:	db01      	blt.n	800a892 <__sfputc_r+0x16>
 800a88e:	290a      	cmp	r1, #10
 800a890:	d103      	bne.n	800a89a <__sfputc_r+0x1e>
 800a892:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a896:	f000 b9df 	b.w	800ac58 <__swbuf_r>
 800a89a:	6813      	ldr	r3, [r2, #0]
 800a89c:	1c58      	adds	r0, r3, #1
 800a89e:	6010      	str	r0, [r2, #0]
 800a8a0:	7019      	strb	r1, [r3, #0]
 800a8a2:	4608      	mov	r0, r1
 800a8a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <__sfputs_r>:
 800a8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	460f      	mov	r7, r1
 800a8b0:	4614      	mov	r4, r2
 800a8b2:	18d5      	adds	r5, r2, r3
 800a8b4:	42ac      	cmp	r4, r5
 800a8b6:	d101      	bne.n	800a8bc <__sfputs_r+0x12>
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	e007      	b.n	800a8cc <__sfputs_r+0x22>
 800a8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c0:	463a      	mov	r2, r7
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f7ff ffda 	bl	800a87c <__sfputc_r>
 800a8c8:	1c43      	adds	r3, r0, #1
 800a8ca:	d1f3      	bne.n	800a8b4 <__sfputs_r+0xa>
 800a8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8d0 <_vfiprintf_r>:
 800a8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	460d      	mov	r5, r1
 800a8d6:	b09d      	sub	sp, #116	@ 0x74
 800a8d8:	4614      	mov	r4, r2
 800a8da:	4698      	mov	r8, r3
 800a8dc:	4606      	mov	r6, r0
 800a8de:	b118      	cbz	r0, 800a8e8 <_vfiprintf_r+0x18>
 800a8e0:	6a03      	ldr	r3, [r0, #32]
 800a8e2:	b90b      	cbnz	r3, 800a8e8 <_vfiprintf_r+0x18>
 800a8e4:	f7fe fb8a 	bl	8008ffc <__sinit>
 800a8e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8ea:	07d9      	lsls	r1, r3, #31
 800a8ec:	d405      	bmi.n	800a8fa <_vfiprintf_r+0x2a>
 800a8ee:	89ab      	ldrh	r3, [r5, #12]
 800a8f0:	059a      	lsls	r2, r3, #22
 800a8f2:	d402      	bmi.n	800a8fa <_vfiprintf_r+0x2a>
 800a8f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8f6:	f7fe fce0 	bl	80092ba <__retarget_lock_acquire_recursive>
 800a8fa:	89ab      	ldrh	r3, [r5, #12]
 800a8fc:	071b      	lsls	r3, r3, #28
 800a8fe:	d501      	bpl.n	800a904 <_vfiprintf_r+0x34>
 800a900:	692b      	ldr	r3, [r5, #16]
 800a902:	b99b      	cbnz	r3, 800a92c <_vfiprintf_r+0x5c>
 800a904:	4629      	mov	r1, r5
 800a906:	4630      	mov	r0, r6
 800a908:	f000 f9e4 	bl	800acd4 <__swsetup_r>
 800a90c:	b170      	cbz	r0, 800a92c <_vfiprintf_r+0x5c>
 800a90e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a910:	07dc      	lsls	r4, r3, #31
 800a912:	d504      	bpl.n	800a91e <_vfiprintf_r+0x4e>
 800a914:	f04f 30ff 	mov.w	r0, #4294967295
 800a918:	b01d      	add	sp, #116	@ 0x74
 800a91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91e:	89ab      	ldrh	r3, [r5, #12]
 800a920:	0598      	lsls	r0, r3, #22
 800a922:	d4f7      	bmi.n	800a914 <_vfiprintf_r+0x44>
 800a924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a926:	f7fe fcc9 	bl	80092bc <__retarget_lock_release_recursive>
 800a92a:	e7f3      	b.n	800a914 <_vfiprintf_r+0x44>
 800a92c:	2300      	movs	r3, #0
 800a92e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a930:	2320      	movs	r3, #32
 800a932:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a936:	f8cd 800c 	str.w	r8, [sp, #12]
 800a93a:	2330      	movs	r3, #48	@ 0x30
 800a93c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aaec <_vfiprintf_r+0x21c>
 800a940:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a944:	f04f 0901 	mov.w	r9, #1
 800a948:	4623      	mov	r3, r4
 800a94a:	469a      	mov	sl, r3
 800a94c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a950:	b10a      	cbz	r2, 800a956 <_vfiprintf_r+0x86>
 800a952:	2a25      	cmp	r2, #37	@ 0x25
 800a954:	d1f9      	bne.n	800a94a <_vfiprintf_r+0x7a>
 800a956:	ebba 0b04 	subs.w	fp, sl, r4
 800a95a:	d00b      	beq.n	800a974 <_vfiprintf_r+0xa4>
 800a95c:	465b      	mov	r3, fp
 800a95e:	4622      	mov	r2, r4
 800a960:	4629      	mov	r1, r5
 800a962:	4630      	mov	r0, r6
 800a964:	f7ff ffa1 	bl	800a8aa <__sfputs_r>
 800a968:	3001      	adds	r0, #1
 800a96a:	f000 80a7 	beq.w	800aabc <_vfiprintf_r+0x1ec>
 800a96e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a970:	445a      	add	r2, fp
 800a972:	9209      	str	r2, [sp, #36]	@ 0x24
 800a974:	f89a 3000 	ldrb.w	r3, [sl]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 809f 	beq.w	800aabc <_vfiprintf_r+0x1ec>
 800a97e:	2300      	movs	r3, #0
 800a980:	f04f 32ff 	mov.w	r2, #4294967295
 800a984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a988:	f10a 0a01 	add.w	sl, sl, #1
 800a98c:	9304      	str	r3, [sp, #16]
 800a98e:	9307      	str	r3, [sp, #28]
 800a990:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a994:	931a      	str	r3, [sp, #104]	@ 0x68
 800a996:	4654      	mov	r4, sl
 800a998:	2205      	movs	r2, #5
 800a99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99e:	4853      	ldr	r0, [pc, #332]	@ (800aaec <_vfiprintf_r+0x21c>)
 800a9a0:	f7f5 fc16 	bl	80001d0 <memchr>
 800a9a4:	9a04      	ldr	r2, [sp, #16]
 800a9a6:	b9d8      	cbnz	r0, 800a9e0 <_vfiprintf_r+0x110>
 800a9a8:	06d1      	lsls	r1, r2, #27
 800a9aa:	bf44      	itt	mi
 800a9ac:	2320      	movmi	r3, #32
 800a9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9b2:	0713      	lsls	r3, r2, #28
 800a9b4:	bf44      	itt	mi
 800a9b6:	232b      	movmi	r3, #43	@ 0x2b
 800a9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a9c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9c2:	d015      	beq.n	800a9f0 <_vfiprintf_r+0x120>
 800a9c4:	9a07      	ldr	r2, [sp, #28]
 800a9c6:	4654      	mov	r4, sl
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	f04f 0c0a 	mov.w	ip, #10
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9d4:	3b30      	subs	r3, #48	@ 0x30
 800a9d6:	2b09      	cmp	r3, #9
 800a9d8:	d94b      	bls.n	800aa72 <_vfiprintf_r+0x1a2>
 800a9da:	b1b0      	cbz	r0, 800aa0a <_vfiprintf_r+0x13a>
 800a9dc:	9207      	str	r2, [sp, #28]
 800a9de:	e014      	b.n	800aa0a <_vfiprintf_r+0x13a>
 800a9e0:	eba0 0308 	sub.w	r3, r0, r8
 800a9e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	9304      	str	r3, [sp, #16]
 800a9ec:	46a2      	mov	sl, r4
 800a9ee:	e7d2      	b.n	800a996 <_vfiprintf_r+0xc6>
 800a9f0:	9b03      	ldr	r3, [sp, #12]
 800a9f2:	1d19      	adds	r1, r3, #4
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	9103      	str	r1, [sp, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	bfbb      	ittet	lt
 800a9fc:	425b      	neglt	r3, r3
 800a9fe:	f042 0202 	orrlt.w	r2, r2, #2
 800aa02:	9307      	strge	r3, [sp, #28]
 800aa04:	9307      	strlt	r3, [sp, #28]
 800aa06:	bfb8      	it	lt
 800aa08:	9204      	strlt	r2, [sp, #16]
 800aa0a:	7823      	ldrb	r3, [r4, #0]
 800aa0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa0e:	d10a      	bne.n	800aa26 <_vfiprintf_r+0x156>
 800aa10:	7863      	ldrb	r3, [r4, #1]
 800aa12:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa14:	d132      	bne.n	800aa7c <_vfiprintf_r+0x1ac>
 800aa16:	9b03      	ldr	r3, [sp, #12]
 800aa18:	1d1a      	adds	r2, r3, #4
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	9203      	str	r2, [sp, #12]
 800aa1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa22:	3402      	adds	r4, #2
 800aa24:	9305      	str	r3, [sp, #20]
 800aa26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aafc <_vfiprintf_r+0x22c>
 800aa2a:	7821      	ldrb	r1, [r4, #0]
 800aa2c:	2203      	movs	r2, #3
 800aa2e:	4650      	mov	r0, sl
 800aa30:	f7f5 fbce 	bl	80001d0 <memchr>
 800aa34:	b138      	cbz	r0, 800aa46 <_vfiprintf_r+0x176>
 800aa36:	9b04      	ldr	r3, [sp, #16]
 800aa38:	eba0 000a 	sub.w	r0, r0, sl
 800aa3c:	2240      	movs	r2, #64	@ 0x40
 800aa3e:	4082      	lsls	r2, r0
 800aa40:	4313      	orrs	r3, r2
 800aa42:	3401      	adds	r4, #1
 800aa44:	9304      	str	r3, [sp, #16]
 800aa46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa4a:	4829      	ldr	r0, [pc, #164]	@ (800aaf0 <_vfiprintf_r+0x220>)
 800aa4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa50:	2206      	movs	r2, #6
 800aa52:	f7f5 fbbd 	bl	80001d0 <memchr>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d03f      	beq.n	800aada <_vfiprintf_r+0x20a>
 800aa5a:	4b26      	ldr	r3, [pc, #152]	@ (800aaf4 <_vfiprintf_r+0x224>)
 800aa5c:	bb1b      	cbnz	r3, 800aaa6 <_vfiprintf_r+0x1d6>
 800aa5e:	9b03      	ldr	r3, [sp, #12]
 800aa60:	3307      	adds	r3, #7
 800aa62:	f023 0307 	bic.w	r3, r3, #7
 800aa66:	3308      	adds	r3, #8
 800aa68:	9303      	str	r3, [sp, #12]
 800aa6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6c:	443b      	add	r3, r7
 800aa6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa70:	e76a      	b.n	800a948 <_vfiprintf_r+0x78>
 800aa72:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa76:	460c      	mov	r4, r1
 800aa78:	2001      	movs	r0, #1
 800aa7a:	e7a8      	b.n	800a9ce <_vfiprintf_r+0xfe>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	3401      	adds	r4, #1
 800aa80:	9305      	str	r3, [sp, #20]
 800aa82:	4619      	mov	r1, r3
 800aa84:	f04f 0c0a 	mov.w	ip, #10
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa8e:	3a30      	subs	r2, #48	@ 0x30
 800aa90:	2a09      	cmp	r2, #9
 800aa92:	d903      	bls.n	800aa9c <_vfiprintf_r+0x1cc>
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d0c6      	beq.n	800aa26 <_vfiprintf_r+0x156>
 800aa98:	9105      	str	r1, [sp, #20]
 800aa9a:	e7c4      	b.n	800aa26 <_vfiprintf_r+0x156>
 800aa9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e7f0      	b.n	800aa88 <_vfiprintf_r+0x1b8>
 800aaa6:	ab03      	add	r3, sp, #12
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	462a      	mov	r2, r5
 800aaac:	4b12      	ldr	r3, [pc, #72]	@ (800aaf8 <_vfiprintf_r+0x228>)
 800aaae:	a904      	add	r1, sp, #16
 800aab0:	4630      	mov	r0, r6
 800aab2:	f7fd fe5f 	bl	8008774 <_printf_float>
 800aab6:	4607      	mov	r7, r0
 800aab8:	1c78      	adds	r0, r7, #1
 800aaba:	d1d6      	bne.n	800aa6a <_vfiprintf_r+0x19a>
 800aabc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aabe:	07d9      	lsls	r1, r3, #31
 800aac0:	d405      	bmi.n	800aace <_vfiprintf_r+0x1fe>
 800aac2:	89ab      	ldrh	r3, [r5, #12]
 800aac4:	059a      	lsls	r2, r3, #22
 800aac6:	d402      	bmi.n	800aace <_vfiprintf_r+0x1fe>
 800aac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaca:	f7fe fbf7 	bl	80092bc <__retarget_lock_release_recursive>
 800aace:	89ab      	ldrh	r3, [r5, #12]
 800aad0:	065b      	lsls	r3, r3, #25
 800aad2:	f53f af1f 	bmi.w	800a914 <_vfiprintf_r+0x44>
 800aad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aad8:	e71e      	b.n	800a918 <_vfiprintf_r+0x48>
 800aada:	ab03      	add	r3, sp, #12
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	462a      	mov	r2, r5
 800aae0:	4b05      	ldr	r3, [pc, #20]	@ (800aaf8 <_vfiprintf_r+0x228>)
 800aae2:	a904      	add	r1, sp, #16
 800aae4:	4630      	mov	r0, r6
 800aae6:	f7fe f8dd 	bl	8008ca4 <_printf_i>
 800aaea:	e7e4      	b.n	800aab6 <_vfiprintf_r+0x1e6>
 800aaec:	0800b3f8 	.word	0x0800b3f8
 800aaf0:	0800b402 	.word	0x0800b402
 800aaf4:	08008775 	.word	0x08008775
 800aaf8:	0800a8ab 	.word	0x0800a8ab
 800aafc:	0800b3fe 	.word	0x0800b3fe

0800ab00 <__sflush_r>:
 800ab00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab08:	0716      	lsls	r6, r2, #28
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	d454      	bmi.n	800abba <__sflush_r+0xba>
 800ab10:	684b      	ldr	r3, [r1, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	dc02      	bgt.n	800ab1c <__sflush_r+0x1c>
 800ab16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	dd48      	ble.n	800abae <__sflush_r+0xae>
 800ab1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab1e:	2e00      	cmp	r6, #0
 800ab20:	d045      	beq.n	800abae <__sflush_r+0xae>
 800ab22:	2300      	movs	r3, #0
 800ab24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab28:	682f      	ldr	r7, [r5, #0]
 800ab2a:	6a21      	ldr	r1, [r4, #32]
 800ab2c:	602b      	str	r3, [r5, #0]
 800ab2e:	d030      	beq.n	800ab92 <__sflush_r+0x92>
 800ab30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab32:	89a3      	ldrh	r3, [r4, #12]
 800ab34:	0759      	lsls	r1, r3, #29
 800ab36:	d505      	bpl.n	800ab44 <__sflush_r+0x44>
 800ab38:	6863      	ldr	r3, [r4, #4]
 800ab3a:	1ad2      	subs	r2, r2, r3
 800ab3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab3e:	b10b      	cbz	r3, 800ab44 <__sflush_r+0x44>
 800ab40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab42:	1ad2      	subs	r2, r2, r3
 800ab44:	2300      	movs	r3, #0
 800ab46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab48:	6a21      	ldr	r1, [r4, #32]
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	47b0      	blx	r6
 800ab4e:	1c43      	adds	r3, r0, #1
 800ab50:	89a3      	ldrh	r3, [r4, #12]
 800ab52:	d106      	bne.n	800ab62 <__sflush_r+0x62>
 800ab54:	6829      	ldr	r1, [r5, #0]
 800ab56:	291d      	cmp	r1, #29
 800ab58:	d82b      	bhi.n	800abb2 <__sflush_r+0xb2>
 800ab5a:	4a2a      	ldr	r2, [pc, #168]	@ (800ac04 <__sflush_r+0x104>)
 800ab5c:	410a      	asrs	r2, r1
 800ab5e:	07d6      	lsls	r6, r2, #31
 800ab60:	d427      	bmi.n	800abb2 <__sflush_r+0xb2>
 800ab62:	2200      	movs	r2, #0
 800ab64:	6062      	str	r2, [r4, #4]
 800ab66:	04d9      	lsls	r1, r3, #19
 800ab68:	6922      	ldr	r2, [r4, #16]
 800ab6a:	6022      	str	r2, [r4, #0]
 800ab6c:	d504      	bpl.n	800ab78 <__sflush_r+0x78>
 800ab6e:	1c42      	adds	r2, r0, #1
 800ab70:	d101      	bne.n	800ab76 <__sflush_r+0x76>
 800ab72:	682b      	ldr	r3, [r5, #0]
 800ab74:	b903      	cbnz	r3, 800ab78 <__sflush_r+0x78>
 800ab76:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab7a:	602f      	str	r7, [r5, #0]
 800ab7c:	b1b9      	cbz	r1, 800abae <__sflush_r+0xae>
 800ab7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab82:	4299      	cmp	r1, r3
 800ab84:	d002      	beq.n	800ab8c <__sflush_r+0x8c>
 800ab86:	4628      	mov	r0, r5
 800ab88:	f7ff f9f6 	bl	8009f78 <_free_r>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab90:	e00d      	b.n	800abae <__sflush_r+0xae>
 800ab92:	2301      	movs	r3, #1
 800ab94:	4628      	mov	r0, r5
 800ab96:	47b0      	blx	r6
 800ab98:	4602      	mov	r2, r0
 800ab9a:	1c50      	adds	r0, r2, #1
 800ab9c:	d1c9      	bne.n	800ab32 <__sflush_r+0x32>
 800ab9e:	682b      	ldr	r3, [r5, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d0c6      	beq.n	800ab32 <__sflush_r+0x32>
 800aba4:	2b1d      	cmp	r3, #29
 800aba6:	d001      	beq.n	800abac <__sflush_r+0xac>
 800aba8:	2b16      	cmp	r3, #22
 800abaa:	d11e      	bne.n	800abea <__sflush_r+0xea>
 800abac:	602f      	str	r7, [r5, #0]
 800abae:	2000      	movs	r0, #0
 800abb0:	e022      	b.n	800abf8 <__sflush_r+0xf8>
 800abb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abb6:	b21b      	sxth	r3, r3
 800abb8:	e01b      	b.n	800abf2 <__sflush_r+0xf2>
 800abba:	690f      	ldr	r7, [r1, #16]
 800abbc:	2f00      	cmp	r7, #0
 800abbe:	d0f6      	beq.n	800abae <__sflush_r+0xae>
 800abc0:	0793      	lsls	r3, r2, #30
 800abc2:	680e      	ldr	r6, [r1, #0]
 800abc4:	bf08      	it	eq
 800abc6:	694b      	ldreq	r3, [r1, #20]
 800abc8:	600f      	str	r7, [r1, #0]
 800abca:	bf18      	it	ne
 800abcc:	2300      	movne	r3, #0
 800abce:	eba6 0807 	sub.w	r8, r6, r7
 800abd2:	608b      	str	r3, [r1, #8]
 800abd4:	f1b8 0f00 	cmp.w	r8, #0
 800abd8:	dde9      	ble.n	800abae <__sflush_r+0xae>
 800abda:	6a21      	ldr	r1, [r4, #32]
 800abdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800abde:	4643      	mov	r3, r8
 800abe0:	463a      	mov	r2, r7
 800abe2:	4628      	mov	r0, r5
 800abe4:	47b0      	blx	r6
 800abe6:	2800      	cmp	r0, #0
 800abe8:	dc08      	bgt.n	800abfc <__sflush_r+0xfc>
 800abea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abf2:	81a3      	strh	r3, [r4, #12]
 800abf4:	f04f 30ff 	mov.w	r0, #4294967295
 800abf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abfc:	4407      	add	r7, r0
 800abfe:	eba8 0800 	sub.w	r8, r8, r0
 800ac02:	e7e7      	b.n	800abd4 <__sflush_r+0xd4>
 800ac04:	dfbffffe 	.word	0xdfbffffe

0800ac08 <_fflush_r>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	690b      	ldr	r3, [r1, #16]
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	460c      	mov	r4, r1
 800ac10:	b913      	cbnz	r3, 800ac18 <_fflush_r+0x10>
 800ac12:	2500      	movs	r5, #0
 800ac14:	4628      	mov	r0, r5
 800ac16:	bd38      	pop	{r3, r4, r5, pc}
 800ac18:	b118      	cbz	r0, 800ac22 <_fflush_r+0x1a>
 800ac1a:	6a03      	ldr	r3, [r0, #32]
 800ac1c:	b90b      	cbnz	r3, 800ac22 <_fflush_r+0x1a>
 800ac1e:	f7fe f9ed 	bl	8008ffc <__sinit>
 800ac22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d0f3      	beq.n	800ac12 <_fflush_r+0xa>
 800ac2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac2c:	07d0      	lsls	r0, r2, #31
 800ac2e:	d404      	bmi.n	800ac3a <_fflush_r+0x32>
 800ac30:	0599      	lsls	r1, r3, #22
 800ac32:	d402      	bmi.n	800ac3a <_fflush_r+0x32>
 800ac34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac36:	f7fe fb40 	bl	80092ba <__retarget_lock_acquire_recursive>
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	f7ff ff5f 	bl	800ab00 <__sflush_r>
 800ac42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac44:	07da      	lsls	r2, r3, #31
 800ac46:	4605      	mov	r5, r0
 800ac48:	d4e4      	bmi.n	800ac14 <_fflush_r+0xc>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	059b      	lsls	r3, r3, #22
 800ac4e:	d4e1      	bmi.n	800ac14 <_fflush_r+0xc>
 800ac50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac52:	f7fe fb33 	bl	80092bc <__retarget_lock_release_recursive>
 800ac56:	e7dd      	b.n	800ac14 <_fflush_r+0xc>

0800ac58 <__swbuf_r>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	460e      	mov	r6, r1
 800ac5c:	4614      	mov	r4, r2
 800ac5e:	4605      	mov	r5, r0
 800ac60:	b118      	cbz	r0, 800ac6a <__swbuf_r+0x12>
 800ac62:	6a03      	ldr	r3, [r0, #32]
 800ac64:	b90b      	cbnz	r3, 800ac6a <__swbuf_r+0x12>
 800ac66:	f7fe f9c9 	bl	8008ffc <__sinit>
 800ac6a:	69a3      	ldr	r3, [r4, #24]
 800ac6c:	60a3      	str	r3, [r4, #8]
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	071a      	lsls	r2, r3, #28
 800ac72:	d501      	bpl.n	800ac78 <__swbuf_r+0x20>
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	b943      	cbnz	r3, 800ac8a <__swbuf_r+0x32>
 800ac78:	4621      	mov	r1, r4
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f000 f82a 	bl	800acd4 <__swsetup_r>
 800ac80:	b118      	cbz	r0, 800ac8a <__swbuf_r+0x32>
 800ac82:	f04f 37ff 	mov.w	r7, #4294967295
 800ac86:	4638      	mov	r0, r7
 800ac88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	6922      	ldr	r2, [r4, #16]
 800ac8e:	1a98      	subs	r0, r3, r2
 800ac90:	6963      	ldr	r3, [r4, #20]
 800ac92:	b2f6      	uxtb	r6, r6
 800ac94:	4283      	cmp	r3, r0
 800ac96:	4637      	mov	r7, r6
 800ac98:	dc05      	bgt.n	800aca6 <__swbuf_r+0x4e>
 800ac9a:	4621      	mov	r1, r4
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	f7ff ffb3 	bl	800ac08 <_fflush_r>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d1ed      	bne.n	800ac82 <__swbuf_r+0x2a>
 800aca6:	68a3      	ldr	r3, [r4, #8]
 800aca8:	3b01      	subs	r3, #1
 800acaa:	60a3      	str	r3, [r4, #8]
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	1c5a      	adds	r2, r3, #1
 800acb0:	6022      	str	r2, [r4, #0]
 800acb2:	701e      	strb	r6, [r3, #0]
 800acb4:	6962      	ldr	r2, [r4, #20]
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	429a      	cmp	r2, r3
 800acba:	d004      	beq.n	800acc6 <__swbuf_r+0x6e>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	07db      	lsls	r3, r3, #31
 800acc0:	d5e1      	bpl.n	800ac86 <__swbuf_r+0x2e>
 800acc2:	2e0a      	cmp	r6, #10
 800acc4:	d1df      	bne.n	800ac86 <__swbuf_r+0x2e>
 800acc6:	4621      	mov	r1, r4
 800acc8:	4628      	mov	r0, r5
 800acca:	f7ff ff9d 	bl	800ac08 <_fflush_r>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d0d9      	beq.n	800ac86 <__swbuf_r+0x2e>
 800acd2:	e7d6      	b.n	800ac82 <__swbuf_r+0x2a>

0800acd4 <__swsetup_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	4b29      	ldr	r3, [pc, #164]	@ (800ad7c <__swsetup_r+0xa8>)
 800acd8:	4605      	mov	r5, r0
 800acda:	6818      	ldr	r0, [r3, #0]
 800acdc:	460c      	mov	r4, r1
 800acde:	b118      	cbz	r0, 800ace8 <__swsetup_r+0x14>
 800ace0:	6a03      	ldr	r3, [r0, #32]
 800ace2:	b90b      	cbnz	r3, 800ace8 <__swsetup_r+0x14>
 800ace4:	f7fe f98a 	bl	8008ffc <__sinit>
 800ace8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acec:	0719      	lsls	r1, r3, #28
 800acee:	d422      	bmi.n	800ad36 <__swsetup_r+0x62>
 800acf0:	06da      	lsls	r2, r3, #27
 800acf2:	d407      	bmi.n	800ad04 <__swsetup_r+0x30>
 800acf4:	2209      	movs	r2, #9
 800acf6:	602a      	str	r2, [r5, #0]
 800acf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acfc:	81a3      	strh	r3, [r4, #12]
 800acfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ad02:	e033      	b.n	800ad6c <__swsetup_r+0x98>
 800ad04:	0758      	lsls	r0, r3, #29
 800ad06:	d512      	bpl.n	800ad2e <__swsetup_r+0x5a>
 800ad08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad0a:	b141      	cbz	r1, 800ad1e <__swsetup_r+0x4a>
 800ad0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad10:	4299      	cmp	r1, r3
 800ad12:	d002      	beq.n	800ad1a <__swsetup_r+0x46>
 800ad14:	4628      	mov	r0, r5
 800ad16:	f7ff f92f 	bl	8009f78 <_free_r>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad24:	81a3      	strh	r3, [r4, #12]
 800ad26:	2300      	movs	r3, #0
 800ad28:	6063      	str	r3, [r4, #4]
 800ad2a:	6923      	ldr	r3, [r4, #16]
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	89a3      	ldrh	r3, [r4, #12]
 800ad30:	f043 0308 	orr.w	r3, r3, #8
 800ad34:	81a3      	strh	r3, [r4, #12]
 800ad36:	6923      	ldr	r3, [r4, #16]
 800ad38:	b94b      	cbnz	r3, 800ad4e <__swsetup_r+0x7a>
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad44:	d003      	beq.n	800ad4e <__swsetup_r+0x7a>
 800ad46:	4621      	mov	r1, r4
 800ad48:	4628      	mov	r0, r5
 800ad4a:	f000 f8b3 	bl	800aeb4 <__smakebuf_r>
 800ad4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad52:	f013 0201 	ands.w	r2, r3, #1
 800ad56:	d00a      	beq.n	800ad6e <__swsetup_r+0x9a>
 800ad58:	2200      	movs	r2, #0
 800ad5a:	60a2      	str	r2, [r4, #8]
 800ad5c:	6962      	ldr	r2, [r4, #20]
 800ad5e:	4252      	negs	r2, r2
 800ad60:	61a2      	str	r2, [r4, #24]
 800ad62:	6922      	ldr	r2, [r4, #16]
 800ad64:	b942      	cbnz	r2, 800ad78 <__swsetup_r+0xa4>
 800ad66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad6a:	d1c5      	bne.n	800acf8 <__swsetup_r+0x24>
 800ad6c:	bd38      	pop	{r3, r4, r5, pc}
 800ad6e:	0799      	lsls	r1, r3, #30
 800ad70:	bf58      	it	pl
 800ad72:	6962      	ldrpl	r2, [r4, #20]
 800ad74:	60a2      	str	r2, [r4, #8]
 800ad76:	e7f4      	b.n	800ad62 <__swsetup_r+0x8e>
 800ad78:	2000      	movs	r0, #0
 800ad7a:	e7f7      	b.n	800ad6c <__swsetup_r+0x98>
 800ad7c:	2000002c 	.word	0x2000002c

0800ad80 <_sbrk_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d06      	ldr	r5, [pc, #24]	@ (800ad9c <_sbrk_r+0x1c>)
 800ad84:	2300      	movs	r3, #0
 800ad86:	4604      	mov	r4, r0
 800ad88:	4608      	mov	r0, r1
 800ad8a:	602b      	str	r3, [r5, #0]
 800ad8c:	f7f7 f988 	bl	80020a0 <_sbrk>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_sbrk_r+0x1a>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_sbrk_r+0x1a>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	20004930 	.word	0x20004930

0800ada0 <__assert_func>:
 800ada0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ada2:	4614      	mov	r4, r2
 800ada4:	461a      	mov	r2, r3
 800ada6:	4b09      	ldr	r3, [pc, #36]	@ (800adcc <__assert_func+0x2c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4605      	mov	r5, r0
 800adac:	68d8      	ldr	r0, [r3, #12]
 800adae:	b954      	cbnz	r4, 800adc6 <__assert_func+0x26>
 800adb0:	4b07      	ldr	r3, [pc, #28]	@ (800add0 <__assert_func+0x30>)
 800adb2:	461c      	mov	r4, r3
 800adb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adb8:	9100      	str	r1, [sp, #0]
 800adba:	462b      	mov	r3, r5
 800adbc:	4905      	ldr	r1, [pc, #20]	@ (800add4 <__assert_func+0x34>)
 800adbe:	f000 f841 	bl	800ae44 <fiprintf>
 800adc2:	f000 f8d5 	bl	800af70 <abort>
 800adc6:	4b04      	ldr	r3, [pc, #16]	@ (800add8 <__assert_func+0x38>)
 800adc8:	e7f4      	b.n	800adb4 <__assert_func+0x14>
 800adca:	bf00      	nop
 800adcc:	2000002c 	.word	0x2000002c
 800add0:	0800b44e 	.word	0x0800b44e
 800add4:	0800b420 	.word	0x0800b420
 800add8:	0800b413 	.word	0x0800b413

0800addc <_calloc_r>:
 800addc:	b570      	push	{r4, r5, r6, lr}
 800adde:	fba1 5402 	umull	r5, r4, r1, r2
 800ade2:	b93c      	cbnz	r4, 800adf4 <_calloc_r+0x18>
 800ade4:	4629      	mov	r1, r5
 800ade6:	f7ff f93b 	bl	800a060 <_malloc_r>
 800adea:	4606      	mov	r6, r0
 800adec:	b928      	cbnz	r0, 800adfa <_calloc_r+0x1e>
 800adee:	2600      	movs	r6, #0
 800adf0:	4630      	mov	r0, r6
 800adf2:	bd70      	pop	{r4, r5, r6, pc}
 800adf4:	220c      	movs	r2, #12
 800adf6:	6002      	str	r2, [r0, #0]
 800adf8:	e7f9      	b.n	800adee <_calloc_r+0x12>
 800adfa:	462a      	mov	r2, r5
 800adfc:	4621      	mov	r1, r4
 800adfe:	f7fe f988 	bl	8009112 <memset>
 800ae02:	e7f5      	b.n	800adf0 <_calloc_r+0x14>

0800ae04 <__ascii_mbtowc>:
 800ae04:	b082      	sub	sp, #8
 800ae06:	b901      	cbnz	r1, 800ae0a <__ascii_mbtowc+0x6>
 800ae08:	a901      	add	r1, sp, #4
 800ae0a:	b142      	cbz	r2, 800ae1e <__ascii_mbtowc+0x1a>
 800ae0c:	b14b      	cbz	r3, 800ae22 <__ascii_mbtowc+0x1e>
 800ae0e:	7813      	ldrb	r3, [r2, #0]
 800ae10:	600b      	str	r3, [r1, #0]
 800ae12:	7812      	ldrb	r2, [r2, #0]
 800ae14:	1e10      	subs	r0, r2, #0
 800ae16:	bf18      	it	ne
 800ae18:	2001      	movne	r0, #1
 800ae1a:	b002      	add	sp, #8
 800ae1c:	4770      	bx	lr
 800ae1e:	4610      	mov	r0, r2
 800ae20:	e7fb      	b.n	800ae1a <__ascii_mbtowc+0x16>
 800ae22:	f06f 0001 	mvn.w	r0, #1
 800ae26:	e7f8      	b.n	800ae1a <__ascii_mbtowc+0x16>

0800ae28 <__ascii_wctomb>:
 800ae28:	4603      	mov	r3, r0
 800ae2a:	4608      	mov	r0, r1
 800ae2c:	b141      	cbz	r1, 800ae40 <__ascii_wctomb+0x18>
 800ae2e:	2aff      	cmp	r2, #255	@ 0xff
 800ae30:	d904      	bls.n	800ae3c <__ascii_wctomb+0x14>
 800ae32:	228a      	movs	r2, #138	@ 0x8a
 800ae34:	601a      	str	r2, [r3, #0]
 800ae36:	f04f 30ff 	mov.w	r0, #4294967295
 800ae3a:	4770      	bx	lr
 800ae3c:	700a      	strb	r2, [r1, #0]
 800ae3e:	2001      	movs	r0, #1
 800ae40:	4770      	bx	lr
	...

0800ae44 <fiprintf>:
 800ae44:	b40e      	push	{r1, r2, r3}
 800ae46:	b503      	push	{r0, r1, lr}
 800ae48:	4601      	mov	r1, r0
 800ae4a:	ab03      	add	r3, sp, #12
 800ae4c:	4805      	ldr	r0, [pc, #20]	@ (800ae64 <fiprintf+0x20>)
 800ae4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae52:	6800      	ldr	r0, [r0, #0]
 800ae54:	9301      	str	r3, [sp, #4]
 800ae56:	f7ff fd3b 	bl	800a8d0 <_vfiprintf_r>
 800ae5a:	b002      	add	sp, #8
 800ae5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae60:	b003      	add	sp, #12
 800ae62:	4770      	bx	lr
 800ae64:	2000002c 	.word	0x2000002c

0800ae68 <__swhatbuf_r>:
 800ae68:	b570      	push	{r4, r5, r6, lr}
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae70:	2900      	cmp	r1, #0
 800ae72:	b096      	sub	sp, #88	@ 0x58
 800ae74:	4615      	mov	r5, r2
 800ae76:	461e      	mov	r6, r3
 800ae78:	da0d      	bge.n	800ae96 <__swhatbuf_r+0x2e>
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae80:	f04f 0100 	mov.w	r1, #0
 800ae84:	bf14      	ite	ne
 800ae86:	2340      	movne	r3, #64	@ 0x40
 800ae88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	6031      	str	r1, [r6, #0]
 800ae90:	602b      	str	r3, [r5, #0]
 800ae92:	b016      	add	sp, #88	@ 0x58
 800ae94:	bd70      	pop	{r4, r5, r6, pc}
 800ae96:	466a      	mov	r2, sp
 800ae98:	f000 f848 	bl	800af2c <_fstat_r>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	dbec      	blt.n	800ae7a <__swhatbuf_r+0x12>
 800aea0:	9901      	ldr	r1, [sp, #4]
 800aea2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aea6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aeaa:	4259      	negs	r1, r3
 800aeac:	4159      	adcs	r1, r3
 800aeae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aeb2:	e7eb      	b.n	800ae8c <__swhatbuf_r+0x24>

0800aeb4 <__smakebuf_r>:
 800aeb4:	898b      	ldrh	r3, [r1, #12]
 800aeb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeb8:	079d      	lsls	r5, r3, #30
 800aeba:	4606      	mov	r6, r0
 800aebc:	460c      	mov	r4, r1
 800aebe:	d507      	bpl.n	800aed0 <__smakebuf_r+0x1c>
 800aec0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aec4:	6023      	str	r3, [r4, #0]
 800aec6:	6123      	str	r3, [r4, #16]
 800aec8:	2301      	movs	r3, #1
 800aeca:	6163      	str	r3, [r4, #20]
 800aecc:	b003      	add	sp, #12
 800aece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed0:	ab01      	add	r3, sp, #4
 800aed2:	466a      	mov	r2, sp
 800aed4:	f7ff ffc8 	bl	800ae68 <__swhatbuf_r>
 800aed8:	9f00      	ldr	r7, [sp, #0]
 800aeda:	4605      	mov	r5, r0
 800aedc:	4639      	mov	r1, r7
 800aede:	4630      	mov	r0, r6
 800aee0:	f7ff f8be 	bl	800a060 <_malloc_r>
 800aee4:	b948      	cbnz	r0, 800aefa <__smakebuf_r+0x46>
 800aee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeea:	059a      	lsls	r2, r3, #22
 800aeec:	d4ee      	bmi.n	800aecc <__smakebuf_r+0x18>
 800aeee:	f023 0303 	bic.w	r3, r3, #3
 800aef2:	f043 0302 	orr.w	r3, r3, #2
 800aef6:	81a3      	strh	r3, [r4, #12]
 800aef8:	e7e2      	b.n	800aec0 <__smakebuf_r+0xc>
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	6020      	str	r0, [r4, #0]
 800aefe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af02:	81a3      	strh	r3, [r4, #12]
 800af04:	9b01      	ldr	r3, [sp, #4]
 800af06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af0a:	b15b      	cbz	r3, 800af24 <__smakebuf_r+0x70>
 800af0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af10:	4630      	mov	r0, r6
 800af12:	f000 f81d 	bl	800af50 <_isatty_r>
 800af16:	b128      	cbz	r0, 800af24 <__smakebuf_r+0x70>
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	f023 0303 	bic.w	r3, r3, #3
 800af1e:	f043 0301 	orr.w	r3, r3, #1
 800af22:	81a3      	strh	r3, [r4, #12]
 800af24:	89a3      	ldrh	r3, [r4, #12]
 800af26:	431d      	orrs	r5, r3
 800af28:	81a5      	strh	r5, [r4, #12]
 800af2a:	e7cf      	b.n	800aecc <__smakebuf_r+0x18>

0800af2c <_fstat_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d07      	ldr	r5, [pc, #28]	@ (800af4c <_fstat_r+0x20>)
 800af30:	2300      	movs	r3, #0
 800af32:	4604      	mov	r4, r0
 800af34:	4608      	mov	r0, r1
 800af36:	4611      	mov	r1, r2
 800af38:	602b      	str	r3, [r5, #0]
 800af3a:	f7f7 f889 	bl	8002050 <_fstat>
 800af3e:	1c43      	adds	r3, r0, #1
 800af40:	d102      	bne.n	800af48 <_fstat_r+0x1c>
 800af42:	682b      	ldr	r3, [r5, #0]
 800af44:	b103      	cbz	r3, 800af48 <_fstat_r+0x1c>
 800af46:	6023      	str	r3, [r4, #0]
 800af48:	bd38      	pop	{r3, r4, r5, pc}
 800af4a:	bf00      	nop
 800af4c:	20004930 	.word	0x20004930

0800af50 <_isatty_r>:
 800af50:	b538      	push	{r3, r4, r5, lr}
 800af52:	4d06      	ldr	r5, [pc, #24]	@ (800af6c <_isatty_r+0x1c>)
 800af54:	2300      	movs	r3, #0
 800af56:	4604      	mov	r4, r0
 800af58:	4608      	mov	r0, r1
 800af5a:	602b      	str	r3, [r5, #0]
 800af5c:	f7f7 f888 	bl	8002070 <_isatty>
 800af60:	1c43      	adds	r3, r0, #1
 800af62:	d102      	bne.n	800af6a <_isatty_r+0x1a>
 800af64:	682b      	ldr	r3, [r5, #0]
 800af66:	b103      	cbz	r3, 800af6a <_isatty_r+0x1a>
 800af68:	6023      	str	r3, [r4, #0]
 800af6a:	bd38      	pop	{r3, r4, r5, pc}
 800af6c:	20004930 	.word	0x20004930

0800af70 <abort>:
 800af70:	b508      	push	{r3, lr}
 800af72:	2006      	movs	r0, #6
 800af74:	f000 f82c 	bl	800afd0 <raise>
 800af78:	2001      	movs	r0, #1
 800af7a:	f7f7 f835 	bl	8001fe8 <_exit>

0800af7e <_raise_r>:
 800af7e:	291f      	cmp	r1, #31
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	4605      	mov	r5, r0
 800af84:	460c      	mov	r4, r1
 800af86:	d904      	bls.n	800af92 <_raise_r+0x14>
 800af88:	2316      	movs	r3, #22
 800af8a:	6003      	str	r3, [r0, #0]
 800af8c:	f04f 30ff 	mov.w	r0, #4294967295
 800af90:	bd38      	pop	{r3, r4, r5, pc}
 800af92:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af94:	b112      	cbz	r2, 800af9c <_raise_r+0x1e>
 800af96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af9a:	b94b      	cbnz	r3, 800afb0 <_raise_r+0x32>
 800af9c:	4628      	mov	r0, r5
 800af9e:	f000 f831 	bl	800b004 <_getpid_r>
 800afa2:	4622      	mov	r2, r4
 800afa4:	4601      	mov	r1, r0
 800afa6:	4628      	mov	r0, r5
 800afa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afac:	f000 b818 	b.w	800afe0 <_kill_r>
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d00a      	beq.n	800afca <_raise_r+0x4c>
 800afb4:	1c59      	adds	r1, r3, #1
 800afb6:	d103      	bne.n	800afc0 <_raise_r+0x42>
 800afb8:	2316      	movs	r3, #22
 800afba:	6003      	str	r3, [r0, #0]
 800afbc:	2001      	movs	r0, #1
 800afbe:	e7e7      	b.n	800af90 <_raise_r+0x12>
 800afc0:	2100      	movs	r1, #0
 800afc2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800afc6:	4620      	mov	r0, r4
 800afc8:	4798      	blx	r3
 800afca:	2000      	movs	r0, #0
 800afcc:	e7e0      	b.n	800af90 <_raise_r+0x12>
	...

0800afd0 <raise>:
 800afd0:	4b02      	ldr	r3, [pc, #8]	@ (800afdc <raise+0xc>)
 800afd2:	4601      	mov	r1, r0
 800afd4:	6818      	ldr	r0, [r3, #0]
 800afd6:	f7ff bfd2 	b.w	800af7e <_raise_r>
 800afda:	bf00      	nop
 800afdc:	2000002c 	.word	0x2000002c

0800afe0 <_kill_r>:
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	4d07      	ldr	r5, [pc, #28]	@ (800b000 <_kill_r+0x20>)
 800afe4:	2300      	movs	r3, #0
 800afe6:	4604      	mov	r4, r0
 800afe8:	4608      	mov	r0, r1
 800afea:	4611      	mov	r1, r2
 800afec:	602b      	str	r3, [r5, #0]
 800afee:	f7f6 ffeb 	bl	8001fc8 <_kill>
 800aff2:	1c43      	adds	r3, r0, #1
 800aff4:	d102      	bne.n	800affc <_kill_r+0x1c>
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	b103      	cbz	r3, 800affc <_kill_r+0x1c>
 800affa:	6023      	str	r3, [r4, #0]
 800affc:	bd38      	pop	{r3, r4, r5, pc}
 800affe:	bf00      	nop
 800b000:	20004930 	.word	0x20004930

0800b004 <_getpid_r>:
 800b004:	f7f6 bfd8 	b.w	8001fb8 <_getpid>

0800b008 <_init>:
 800b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00a:	bf00      	nop
 800b00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b00e:	bc08      	pop	{r3}
 800b010:	469e      	mov	lr, r3
 800b012:	4770      	bx	lr

0800b014 <_fini>:
 800b014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b016:	bf00      	nop
 800b018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01a:	bc08      	pop	{r3}
 800b01c:	469e      	mov	lr, r3
 800b01e:	4770      	bx	lr
